{"title":"JUC(一)-多线程筑基","slug":"JUC-一-多线程筑基","date":"2022-06-14T15:14:08.000Z","updated":"2024-04-22T07:21:14.875Z","comments":true,"path":"api/articles/JUC-一-多线程筑基.json","excerpt":" 回顾复习一下多线程基础知识，为JUC筑基","covers":["http://hyqup-blog-upyun.test.upcdn.net/img/1775037-20191112153234240-689002981.png"],"content":"<p> 回顾复习一下多线程基础知识，为JUC筑基</p>\n<span id=\"more\"></span>\n\n<h2 id=\"实现多线程的方式\"><a href=\"#实现多线程的方式\" class=\"headerlink\" title=\"实现多线程的方式\"></a>实现多线程的方式</h2><ul>\n<li><p>继承Thread</p>\n<p>run()调用：主线程调用run()的时候，整个流程只有主线程一条执行路径，主线程run执行后再串行执行run方法体的内容</p>\n<p>start()调用：调用start(),会由子线程执行子线程的run()，主线程和子线程交替执行</p>\n</li>\n</ul>\n<p>​\t\trun和start的区别：</p>\n<p>​\t\t\t\t1、start是启动一个新的线程</p>\n<p>​\t\t\t\t2、run()方法内的内容是执行的主体，是执行内容的入口方法</p>\n<p>​\t\t\t\t3、start()方法只能调用一次，run()方法调用没有限制\t</p>\n<p>​\t\t\t\t4、start()方法不会阻塞主线程，run会阻塞调用线程</p>\n<ul>\n<li>实现Runnable</li>\n<li>实现Callable</li>\n</ul>\n<h2 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h2><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/1775037-20191112153234240-689002981.png\" alt=\"线程状态流转图\"></p>\n<p>一个线程从创建到消亡会经历新建状态（New）、就绪状态（Runnable）、运行状态（Running）、等待（Waiting）、阻塞状态（Blocked）和死亡状态</p>\n<ul>\n<li>新建状态（New）： 新创建了一个线程对象，还未调用线程的start()方法。</li>\n<li>就绪状态（Runnable）： 线程对象创建后，其他线程调用了该对象的start()方法，该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li>\n<li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码的状态，还有种可能就是这个线程正在等待其他的系统资源（IO资源等），这种状态也称为Running状态。<strong>需要注意的是，通过Thread::getStatus查看状态时，Runnable状态和Running统一称为Runnable状态。</strong></li>\n<li>阻塞状态（Blocked）：一个线程因为等待监视锁而被阻塞的状态，也称之为阻塞状态。<strong>阻塞的线程不会被分配CPU资源</strong>。</li>\n<li>等待状态（WAITING）：一个正在等待的线程的状态，也称之为等待状态。造成线程等待的原因有三种，分别是调用Object.wait()、join()以及LockSupport.park()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。<strong>处于等待状态的线程不会被分配CPU资源</strong>。</li>\n<li>超时等待（TIMED_WAITING）：一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有五种，分别是：Thread.sleep(long)、Object.wait(long)、join(long)、LockSupport.parkNanos(obj,long)和LockSupport.parkUntil(obj,long)。</li>\n<li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期(当时如果线程被持久持有, 可能不会被回收)。</li>\n</ul>\n<h3 id=\"三种阻塞状态\"><a href=\"#三种阻塞状态\" class=\"headerlink\" title=\"三种阻塞状态\"></a>三种阻塞状态</h3><p><strong>1. 超时等待状态（TIMED_WAITING）</strong><br>Java文档官方定义TIMED_WAITING状态为：“一个线程在一个特定的等待时间内等待另一个线程完成一个动作会在这个状态”。调用下面的这些方法会让线程进入TIMED_WAITING状态。</p>\n<ul>\n<li>Thread#sleep()；</li>\n<li>Object#wait() 并加了超时参数；</li>\n<li>Thread#join() 并加了超时参数；</li>\n<li>LockSupport#parkNanos()；</li>\n<li>LockSupport#parkUntil()。</li>\n</ul>\n<p><strong>2. 等待状态（WAITING）</strong><br>Java文档官方定义WAITING状态是：“一个线程在等待另一个线程执行一个动作时在这个状态。”</p>\n<p>当线程调用以下方法时会进入WAITING状态：</p>\n<ul>\n<li>Object#wait() 而且不加超时参数</li>\n<li>Thread#join() 而且不加超时参数</li>\n<li>LockSupport#park()。</li>\n</ul>\n<p>在对象上的线程调用了Object.wait()会进入WAITING状态，直到另一个线程在这个对象上调用了Object.notify()或Object.notifyAll()方法才能恢复。一个调用了Thread.join()的线程会进入WAITING状态直到一个特定的线程来结束。</p>\n<p><strong>3. BLOCKED状态</strong><br>Java文档官方定义BLOCKED状态是：“这种状态是指一个阻塞线程在等待monitor锁。”</p>\n<h3 id=\"sleep、yield、wait、join的区别\"><a href=\"#sleep、yield、wait、join的区别\" class=\"headerlink\" title=\"sleep、yield、wait、join的区别\"></a>sleep、yield、wait、join的区别</h3><h4 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h4><p>Thread.sleep(long )，线程休眠</p>\n<p>obj.wait() 线程等待</p>\n<p>Thread.yield() 让出cpu调度，重新竞争资源</p>\n<p>线程对象obj.join(),A线程对象中调用B线程join方法，此时A线程进入等待，B线程开始执行，执行完了A线程继续执行</p>\n<p>详解 <a href=\"https://www.cnblogs.com/aspirant/p/8876670.html\">https://www.cnblogs.com/aspirant/p/8876670.html</a></p>\n<h3 id=\"用戶线程和守护线程\"><a href=\"#用戶线程和守护线程\" class=\"headerlink\" title=\"用戶线程和守护线程\"></a>用戶线程和守护线程</h3><blockquote>\n<p>用户线程(普通线程)、守护线程(后台线程)</p>\n</blockquote>\n<p>用户线程：</p>\n<p> 守护线程 Daemon：程序运行的时候在后台提供一种通用服务的线程，比如垃圾回收线程</p>\n<p>当所有的非守护线程结束时，程序也就终止了，同时会杀死进程中的所有守护线程。</p>\n<p>通过setDaemon(true) 将普通线程变为守护线程</p>\n<h2 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h2><p>并发：一个对象被多个线程同时操作</p>\n<p>使用队列+锁机制解决</p>\n<p>java的wait&#x2F;notify的通知机制可以用来实现线程间通信。wait表示线程的等待，调用该方法会导致线程阻塞，直至另一线程调用notify或notifyAll方法才可另其继续执行。经典的生产者、消费者模式即是使用wait&#x2F;notify机制得以完成</p>\n<h2 id=\"线程的启动原理\"><a href=\"#线程的启动原理\" class=\"headerlink\" title=\"线程的启动原理\"></a>线程的启动原理</h2><p>从一个线程的strat启动开始，</p>\n<p>线程的启动，JNI底层调用C的代码，进一步调用OS来操作进程线程相关</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaemonDemo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">new</span>  <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈哈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * This method is not invoked for the main method thread or \"system\"\n     * group threads created/set up by the VM. Any new functionality added\n     * to this method in the future may have to also be added to the VM.\n     *\n     * A zero status value corresponds to state \"NEW\".\n     */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadStatus <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalThreadStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Notify the group that this thread is about to be started\n     * so that it can be added to the group's list of threads\n     * and the group's unstarted count can be decremented. */</span>\n    group<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> started <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">start0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        started <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>started<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                group<span class=\"token punctuation\">.</span><span class=\"token function\">threadStartFailed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ignore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">/* do nothing. If start0 threw a Throwable then\n              it will be passed up the call stack */</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n\n\n<p>start0 方法是native方法，是jvm底层通过C&#x2F;C++调用操作系统的方法</p>\n","more":"<h2 id=\"实现多线程的方式\"><a href=\"#实现多线程的方式\" class=\"headerlink\" title=\"实现多线程的方式\"></a>实现多线程的方式</h2><ul>\n<li><p>继承Thread</p>\n<p>run()调用：主线程调用run()的时候，整个流程只有主线程一条执行路径，主线程run执行后再串行执行run方法体的内容</p>\n<p>start()调用：调用start(),会由子线程执行子线程的run()，主线程和子线程交替执行</p>\n</li>\n</ul>\n<p>​\t\trun和start的区别：</p>\n<p>​\t\t\t\t1、start是启动一个新的线程</p>\n<p>​\t\t\t\t2、run()方法内的内容是执行的主体，是执行内容的入口方法</p>\n<p>​\t\t\t\t3、start()方法只能调用一次，run()方法调用没有限制\t</p>\n<p>​\t\t\t\t4、start()方法不会阻塞主线程，run会阻塞调用线程</p>\n<ul>\n<li>实现Runnable</li>\n<li>实现Callable</li>\n</ul>\n<h2 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h2><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/1775037-20191112153234240-689002981.png\" alt=\"线程状态流转图\"></p>\n<p>一个线程从创建到消亡会经历新建状态（New）、就绪状态（Runnable）、运行状态（Running）、等待（Waiting）、阻塞状态（Blocked）和死亡状态</p>\n<ul>\n<li>新建状态（New）： 新创建了一个线程对象，还未调用线程的start()方法。</li>\n<li>就绪状态（Runnable）： 线程对象创建后，其他线程调用了该对象的start()方法，该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li>\n<li>运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码的状态，还有种可能就是这个线程正在等待其他的系统资源（IO资源等），这种状态也称为Running状态。<strong>需要注意的是，通过Thread::getStatus查看状态时，Runnable状态和Running统一称为Runnable状态。</strong></li>\n<li>阻塞状态（Blocked）：一个线程因为等待监视锁而被阻塞的状态，也称之为阻塞状态。<strong>阻塞的线程不会被分配CPU资源</strong>。</li>\n<li>等待状态（WAITING）：一个正在等待的线程的状态，也称之为等待状态。造成线程等待的原因有三种，分别是调用Object.wait()、join()以及LockSupport.park()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。<strong>处于等待状态的线程不会被分配CPU资源</strong>。</li>\n<li>超时等待（TIMED_WAITING）：一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有五种，分别是：Thread.sleep(long)、Object.wait(long)、join(long)、LockSupport.parkNanos(obj,long)和LockSupport.parkUntil(obj,long)。</li>\n<li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期(当时如果线程被持久持有, 可能不会被回收)。</li>\n</ul>\n<h3 id=\"三种阻塞状态\"><a href=\"#三种阻塞状态\" class=\"headerlink\" title=\"三种阻塞状态\"></a>三种阻塞状态</h3><p><strong>1. 超时等待状态（TIMED_WAITING）</strong><br>Java文档官方定义TIMED_WAITING状态为：“一个线程在一个特定的等待时间内等待另一个线程完成一个动作会在这个状态”。调用下面的这些方法会让线程进入TIMED_WAITING状态。</p>\n<ul>\n<li>Thread#sleep()；</li>\n<li>Object#wait() 并加了超时参数；</li>\n<li>Thread#join() 并加了超时参数；</li>\n<li>LockSupport#parkNanos()；</li>\n<li>LockSupport#parkUntil()。</li>\n</ul>\n<p><strong>2. 等待状态（WAITING）</strong><br>Java文档官方定义WAITING状态是：“一个线程在等待另一个线程执行一个动作时在这个状态。”</p>\n<p>当线程调用以下方法时会进入WAITING状态：</p>\n<ul>\n<li>Object#wait() 而且不加超时参数</li>\n<li>Thread#join() 而且不加超时参数</li>\n<li>LockSupport#park()。</li>\n</ul>\n<p>在对象上的线程调用了Object.wait()会进入WAITING状态，直到另一个线程在这个对象上调用了Object.notify()或Object.notifyAll()方法才能恢复。一个调用了Thread.join()的线程会进入WAITING状态直到一个特定的线程来结束。</p>\n<p><strong>3. BLOCKED状态</strong><br>Java文档官方定义BLOCKED状态是：“这种状态是指一个阻塞线程在等待monitor锁。”</p>\n<h3 id=\"sleep、yield、wait、join的区别\"><a href=\"#sleep、yield、wait、join的区别\" class=\"headerlink\" title=\"sleep、yield、wait、join的区别\"></a>sleep、yield、wait、join的区别</h3><h4 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h4><p>Thread.sleep(long )，线程休眠</p>\n<p>obj.wait() 线程等待</p>\n<p>Thread.yield() 让出cpu调度，重新竞争资源</p>\n<p>线程对象obj.join(),A线程对象中调用B线程join方法，此时A线程进入等待，B线程开始执行，执行完了A线程继续执行</p>\n<p>详解 <a href=\"https://www.cnblogs.com/aspirant/p/8876670.html\">https://www.cnblogs.com/aspirant/p/8876670.html</a></p>\n<h3 id=\"用戶线程和守护线程\"><a href=\"#用戶线程和守护线程\" class=\"headerlink\" title=\"用戶线程和守护线程\"></a>用戶线程和守护线程</h3><blockquote>\n<p>用户线程(普通线程)、守护线程(后台线程)</p>\n</blockquote>\n<p>用户线程：</p>\n<p> 守护线程 Daemon：程序运行的时候在后台提供一种通用服务的线程，比如垃圾回收线程</p>\n<p>当所有的非守护线程结束时，程序也就终止了，同时会杀死进程中的所有守护线程。</p>\n<p>通过setDaemon(true) 将普通线程变为守护线程</p>\n<h2 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h2><p>并发：一个对象被多个线程同时操作</p>\n<p>使用队列+锁机制解决</p>\n<p>java的wait&#x2F;notify的通知机制可以用来实现线程间通信。wait表示线程的等待，调用该方法会导致线程阻塞，直至另一线程调用notify或notifyAll方法才可另其继续执行。经典的生产者、消费者模式即是使用wait&#x2F;notify机制得以完成</p>\n<h2 id=\"线程的启动原理\"><a href=\"#线程的启动原理\" class=\"headerlink\" title=\"线程的启动原理\"></a>线程的启动原理</h2><p>从一个线程的strat启动开始，</p>\n<p>线程的启动，JNI底层调用C的代码，进一步调用OS来操作进程线程相关</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaemonDemo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">new</span>  <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈哈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * This method is not invoked for the main method thread or \"system\"\n     * group threads created/set up by the VM. Any new functionality added\n     * to this method in the future may have to also be added to the VM.\n     *\n     * A zero status value corresponds to state \"NEW\".\n     */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadStatus <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalThreadStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Notify the group that this thread is about to be started\n     * so that it can be added to the group's list of threads\n     * and the group's unstarted count can be decremented. */</span>\n    group<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> started <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">start0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        started <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>started<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                group<span class=\"token punctuation\">.</span><span class=\"token function\">threadStartFailed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ignore<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">/* do nothing. If start0 threw a Throwable then\n              it will be passed up the call stack */</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>start0 方法是native方法，是jvm底层通过C&#x2F;C++调用操作系统的方法</p>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"JUC","path":"api/categories/JUC.json"}],"tags":[]}