{"title":"JVM与GC调优(一)-字节码篇","slug":"JVM与GC调优-一-JVM基本常识篇","date":"2022-09-13T06:39:40.000Z","updated":"2024-04-22T07:21:14.879Z","comments":true,"path":"api/articles/JVM与GC调优-一-JVM基本常识篇.json","excerpt":"了解JVM整体架构图，javac编译器编译步骤，class文件的解读，字节码指令是什么以及常见的字节码有哪些","covers":null,"content":"<p>了解JVM整体架构图，javac编译器编译步骤，class文件的解读，字节码指令是什么以及常见的字节码有哪些</p>\n<span id=\"more\"></span>\n\n<p><strong>概念</strong>：广义上的JVM是指一种规范，狭义上的JVM指的是Hotspot类的虚拟机实现</p>\n<p><strong>Java语言与JVM的关系</strong>：Java语言编写程序生成class字节码在JVM虚拟机里执行。其他语言也可以，比如 kotlin、Groovy</p>\n<p><strong>学习流程</strong>：类加载子系统 –&gt; 运行时数据区 –&gt; 一个对象的一生–&gt; GC垃圾收集器</p>\n<h2 id=\"知识体系\"><a href=\"#知识体系\" class=\"headerlink\" title=\"知识体系\"></a>知识体系</h2><blockquote>\n<p>JVM整体学习流程</p>\n</blockquote>\n<ul>\n<li><strong>字节码引出JVM基础知识</strong></li>\n<li><strong>类的加载过程</strong></li>\n<li><strong>运行时内存数据</strong></li>\n<li><strong>对象内存布局</strong></li>\n<li><strong>执行引擎</strong></li>\n<li><strong>垃圾回收</strong></li>\n<li><strong>JVM性能监控</strong></li>\n<li><strong>性能调优案例</strong></li>\n</ul>\n<h2 id=\"字节码篇\"><a href=\"#字节码篇\" class=\"headerlink\" title=\"字节码篇\"></a>字节码篇</h2><blockquote>\n<p>什么是字节码指令？</p>\n</blockquote>\n<p>Java虚拟机的指令是由<code>一个字节长度</code>的、代表着某种特定操作含义的<code>操作码</code>（opcode），以及其后跟随<code>零至多个</code>代表此操作所需参数的<code>操作数</code>（operand）</p>\n<h3 id=\"字节码案例\"><a href=\"#字节码案例\" class=\"headerlink\" title=\"字节码案例\"></a>字节码案例</h3><h4 id=\"案例1\"><a href=\"#案例1\" class=\"headerlink\" title=\"案例1\"></a>案例1</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ByteCondeInterview</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * 包装类对象的缓存问题\n     * Byte         -128-127\n     * Short        -128-127\n     * Integer      -128-127\n     * Long         -128-127\n     * Float        没有\n     * Double       没有\n     * Character    0-127\n     * Boolean      true/false\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Integer</span> i1<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> i2<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i1<span class=\"token operator\">==</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>通过idea插件jclasslib观察字节码文件</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\"> 0 sipush 128\n 3 invokestatic #2 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;>\n 6 astore_1\n 7 sipush 128\n10 invokestatic #2 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;>\n13 astore_2\n14 getstatic #3 &lt;java/lang/System.out : Ljava/io/PrintStream;>\n17 aload_1\n18 aload_2\n19 if_acmpne 26 (+7)\n22 iconst_1\n23 goto 27 (+4)\n26 iconst_0\n27 invokevirtual #4 &lt;java/io/PrintStream.println : (Z)V>\n30 return\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>Integer.valueOf里面回去调用 IntegerCache缓存对象</p>\n<h4 id=\"案例2\"><a href=\"#案例2\" class=\"headerlink\" title=\"案例2\"></a>案例2</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Test\npublic void test2() &#123;\n    String str1 &#x3D; new String(&quot;hello&quot;) + new String(&quot;world&quot;);\n    String str2 &#x3D; &quot;helloworld&quot;;\n\n    System.out.println(str1 &#x3D;&#x3D; str2); &#x2F;&#x2F;false\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\"> 0 new #5 &lt;java/lang/StringBuilder>\n 3 dup\n 4 invokespecial #6 &lt;java/lang/StringBuilder.&lt;init> : ()V>\n 7 new #7 &lt;java/lang/String>\n10 dup\n11 ldc #8 &lt;hello>\n13 invokespecial #9 &lt;java/lang/String.&lt;init> : (Ljava/lang/String;)V>\n16 invokevirtual #10 &lt;java/lang/StringBuilder.append : (Ljava/lang/String;)Ljava/lang/StringBuilder;>\n19 new #7 &lt;java/lang/String>\n22 dup\n23 ldc #11 &lt;world>\n25 invokespecial #9 &lt;java/lang/String.&lt;init> : (Ljava/lang/String;)V>\n28 invokevirtual #10 &lt;java/lang/StringBuilder.append : (Ljava/lang/String;)Ljava/lang/StringBuilder;>\n31 invokevirtual #12 &lt;java/lang/StringBuilder.toString : ()Ljava/lang/String;>\n34 astore_1\n35 ldc #13 &lt;helloworld>\n37 astore_2\n38 getstatic #3 &lt;java/lang/System.out : Ljava/io/PrintStream;>\n41 aload_1\n42 aload_2\n43 if_acmpne 50 (+7)\n46 iconst_1\n47 goto 51 (+4)\n50 iconst_0\n51 invokevirtual #4 &lt;java/io/PrintStream.println : (Z)V>\n54 return\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>str1不和str2相等的原因在于，str1的对象是由两个StringBuilder对象转化使用append拼接，最后调用StringBuilder的toString,而toString里面使用的值又是StringBuilder对象的值新new一个对象的，而str2是直接在堆中常量对象，二者地址自然不对等</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Create a copy, don't share the array</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"案例3\"><a href=\"#案例3\" class=\"headerlink\" title=\"案例3\"></a>案例3</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    str1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>加入  str1.intern(); 就是true  jdk6还事false，jdk8后是true,因为jdk8后的常量池也在堆中，此时通过  str1.intern();会将常量池改对象的地址指向堆中的地址</p>\n<h3 id=\"如何解读class文件？\"><a href=\"#如何解读class文件？\" class=\"headerlink\" title=\"如何解读class文件？\"></a>如何解读class文件？</h3><p>.class文件以16进制存储的</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">0000000 ca fe ba be 00 00 00 34 00 4b 0a 00 10 00 2a 0a | .......4.K....*.\n0000010 00 2b 00 2c 09 00 2d 00 2e 0a 00 2f 00 30 07 00 | .+.,..-..../.0..\n0000020 31 0a 00 05 00 2a 07 00 32 08 00 33 0a 00 07 00 | 1....*..2..3....\n0000030 34 0a 00 05 00 35 08 00 36 0a 00 05 00 37 08 00 | 4....5..6....7..\n0000040 38 0a 00 07 00 39 07 00 3a 07 00 3b 01 00 06 3c | 8....9..:..;...&lt;\n0000050 69 6e 69 74 3e 01 00 03 28 29 56 01 00 04 43 6f | init>...()V...Co\n0000060 64 65 01 00 0f 4c 69 6e 65 4e 75 6d 62 65 72 54 | de...LineNumberT\n0000070 61 62 6c 65 01 00 12 4c 6f 63 61 6c 56 61 72 69 | able...LocalVari\n0000080 61 62 6c 65 54 61 62 6c 65 01 00 04 74 68 69 73 | ableTable...this\n0000090 01 00 21 4c 63 6e 2f 68 79 71 75 70 2f 6a 76 6d | ..!Lcn/hyqup/jvm\n00000a0 2f 42 79 74 65 43 6f 6e 64 65 49 6e 74 65 72 76 | /ByteCondeInterv\n00000b0 69 65 77 3b 01 00 05 74 65 73 74 31 01 00 02 69 | iew;...test1...i\n00000c0 31 01 00 13 4c 6a 61 76 61 2f 6c 61 6e 67 2f 49 | 1...Ljava/lang/I\n00000d0 6e 74 65 67 65 72 3b 01 00 02 69 32 01 00 0d 53 | nteger;...i2...S\n00000e0 74 61 63 6b 4d 61 70 54 61 62 6c 65 07 00 3a 07 | tackMapTable..:.\n00000f0 00 3c 07 00 3d 01 00 19 52 75 6e 74 69 6d 65 56 | .&lt;..=...RuntimeV\n0000100 69 73 69 62 6c 65 41 6e 6e 6f 74 61 74 69 6f 6e | isibleAnnotation\n0000110 73 01 00 10 4c 6f 72 67 2f 6a 75 6e 69 74 2f 54 | s...Lorg/junit/T\n0000120 65 73 74 3b 01 00 05 74 65 73 74 32 01 00 04 73 | est;...test2...s\n0000130 74 72 31 01 00 12 4c 6a 61 76 61 2f 6c 61 6e 67 | tr1...Ljava/lang\n0000140 2f 53 74 72 69 6e 67 3b 01 00 04 73 74 72 32 07 | /String;...str2.\n0000150 00 32 01 00 05 74 65 73 74 33 01 00 0a 53 6f 75 | .2...test3...Sou\n0000160 72 63 65 46 69 6c 65 01 00 17 42 79 74 65 43 6f | rceFile...ByteCo\n0000170 6e 64 65 49 6e 74 65 72 76 69 65 77 2e 6a 61 76 | ndeInterview.jav\n0000180 61 0c 00 11 00 12 07 00 3c 0c 00 3e 00 3f 07 00 | a.......&lt;..>.?..\n0000190 40 0c 00 41 00 42 07 00 3d 0c 00 43 00 44 01 00 | @..A.B..=..C.D..\n00001a0 17 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e | .java/lang/Strin\n00001b0 67 42 75 69 6c 64 65 72 01 00 10 6a 61 76 61 2f | gBuilder...java/\n00001c0 6c 61 6e 67 2f 53 74 72 69 6e 67 01 00 05 68 65 | lang/String...he\n00001d0 6c 6c 6f 0c 00 11 00 45 0c 00 46 00 47 01 00 05 | llo....E..F.G...\n00001e0 77 6f 72 6c 64 0c 00 48 00 49 01 00 0a 68 65 6c | world..H.I...hel\n00001f0 6c 6f 77 6f 72 6c 64 0c 00 4a 00 49 01 00 1f 63 | loworld..J.I...c\n0000200 6e 2f 68 79 71 75 70 2f 6a 76 6d 2f 42 79 74 65 | n/hyqup/jvm/Byte\n0000210 43 6f 6e 64 65 49 6e 74 65 72 76 69 65 77 01 00 | CondeInterview..\n0000220 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63 | .java/lang/Objec\n0000230 74 01 00 11 6a 61 76 61 2f 6c 61 6e 67 2f 49 6e | t...java/lang/In\n0000240 74 65 67 65 72 01 00 13 6a 61 76 61 2f 69 6f 2f | teger...java/io/\n0000250 50 72 69 6e 74 53 74 72 65 61 6d 01 00 07 76 61 | PrintStream...va\n0000260 6c 75 65 4f 66 01 00 16 28 49 29 4c 6a 61 76 61 | lueOf...(I)Ljava\n0000270 2f 6c 61 6e 67 2f 49 6e 74 65 67 65 72 3b 01 00 | /lang/Integer;..\n0000280 10 6a 61 76 61 2f 6c 61 6e 67 2f 53 79 73 74 65 | .java/lang/Syste\n0000290 6d 01 00 03 6f 75 74 01 00 15 4c 6a 61 76 61 2f | m...out...Ljava/\n00002a0 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d 3b 01 | io/PrintStream;.\n00002b0 00 07 70 72 69 6e 74 6c 6e 01 00 04 28 5a 29 56 | ..println...(Z)V\n00002c0 01 00 15 28 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 | ...(Ljava/lang/S\n00002d0 74 72 69 6e 67 3b 29 56 01 00 06 61 70 70 65 6e | tring;)V...appen\n00002e0 64 01 00 2d 28 4c 6a 61 76 61 2f 6c 61 6e 67 2f | d..-(Ljava/lang/\n00002f0 53 74 72 69 6e 67 3b 29 4c 6a 61 76 61 2f 6c 61 | String;)Ljava/la\n0000300 6e 67 2f 53 74 72 69 6e 67 42 75 69 6c 64 65 72 | ng/StringBuilder\n0000310 3b 01 00 08 74 6f 53 74 72 69 6e 67 01 00 14 28 | ;...toString...(\n0000320 29 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 | )Ljava/lang/Stri\n0000330 6e 67 3b 01 00 06 69 6e 74 65 72 6e 00 21 00 0f | ng;...intern.!..\n0000340 00 10 00 00 00 00 00 04 00 01 00 11 00 12 00 01 | ................\n0000350 00 13 00 00 00 2f 00 01 00 01 00 00 00 05 2a b7 | ...../........*.\n0000360 00 01 b1 00 00 00 02 00 14 00 00 00 06 00 01 00 | ................\n0000370 00 00 0d 00 15 00 00 00 0c 00 01 00 00 00 05 00 | ................\n0000380 16 00 17 00 00 00 01 00 18 00 12 00 02 00 13 00 | ................\n0000390 00 00 98 00 03 00 03 00 00 00 1f 11 00 80 b8 00 | ................\n00003a0 02 4c 11 00 80 b8 00 02 4d b2 00 03 2b 2c a6 00 | .L......M...+,..\n00003b0 07 04 a7 00 04 03 b6 00 04 b1 00 00 00 03 00 14 | ................\n00003c0 00 00 00 12 00 04 00 00 00 1c 00 07 00 1d 00 0e | ................\n00003d0 00 1f 00 1e 00 20 00 15 00 00 00 20 00 03 00 00 | ..... ..... ....\n00003e0 00 1f 00 16 00 17 00 00 00 07 00 18 00 19 00 1a | ................\n00003f0 00 01 00 0e 00 11 00 1b 00 1a 00 02 00 1c 00 00 | ................\n0000400 00 29 00 02 ff 00 1a 00 03 07 00 1d 07 00 1e 07 | .)..............\n0000410 00 1e 00 01 07 00 1f ff 00 00 00 03 07 00 1d 07 | ................\n0000420 00 1e 07 00 1e 00 02 07 00 1f 01 00 20 00 00 00 | ............ ...\n0000430 06 00 01 00 21 00 00 00 01 00 22 00 12 00 02 00 | ....!.....\".....\n0000440 13 00 00 00 b0 00 04 00 03 00 00 00 37 bb 00 05 | ............7...\n0000450 59 b7 00 06 bb 00 07 59 12 08 b7 00 09 b6 00 0a | Y......Y........\n0000460 bb 00 07 59 12 0b b7 00 09 b6 00 0a b6 00 0c 4c | ...Y...........L\n0000470 12 0d 4d b2 00 03 2b 2c a6 00 07 04 a7 00 04 03 | ..M...+,........\n0000480 b6 00 04 b1 00 00 00 03 00 14 00 00 00 12 00 04 | ................\n0000490 00 00 00 25 00 23 00 26 00 26 00 28 00 36 00 29 | ...%.#.&amp;.&amp;.(.6.)\n00004a0 00 15 00 00 00 20 00 03 00 00 00 37 00 16 00 17 | ..... .....7....\n00004b0 00 00 00 23 00 14 00 23 00 24 00 01 00 26 00 11 | ...#...#.$...&amp;..\n00004c0 00 25 00 24 00 02 00 1c 00 00 00 29 00 02 ff 00 | .%.$.......)....\n00004d0 32 00 03 07 00 1d 07 00 26 07 00 26 00 01 07 00 | 2.......&amp;..&amp;....\n00004e0 1f ff 00 00 00 03 07 00 1d 07 00 26 07 00 26 00 | ...........&amp;..&amp;.\n00004f0 02 07 00 1f 01 00 20 00 00 00 06 00 01 00 21 00 | ...... .......!.\n0000500 00 00 01 00 27 00 12 00 02 00 13 00 00 00 b9 00 | ....'...........\n0000510 04 00 03 00 00 00 3c bb 00 05 59 b7 00 06 bb 00 | ......&lt;...Y.....\n0000520 07 59 12 08 b7 00 09 b6 00 0a bb 00 07 59 12 0b | .Y...........Y..\n0000530 b7 00 09 b6 00 0a b6 00 0c 4c 2b b6 00 0e 57 12 | .........L+...W.\n0000540 0d 4d b2 00 03 2b 2c a6 00 07 04 a7 00 04 03 b6 | .M...+,.........\n0000550 00 04 b1 00 00 00 03 00 14 00 00 00 16 00 05 00 | ................\n0000560 00 00 2e 00 23 00 2f 00 28 00 30 00 2b 00 31 00 | ....#./.(.0.+.1.\n0000570 3b 00 32 00 15 00 00 00 20 00 03 00 00 00 3c 00 | ;.2..... .....&lt;.\n0000580 16 00 17 00 00 00 23 00 19 00 23 00 24 00 01 00 | ......#...#.$...\n0000590 2b 00 11 00 25 00 24 00 02 00 1c 00 00 00 29 00 | +...%.$.......).\n00005a0 02 ff 00 37 00 03 07 00 1d 07 00 26 07 00 26 00 | ...7.......&amp;..&amp;.\n00005b0 01 07 00 1f ff 00 00 00 03 07 00 1d 07 00 26 07 | ..............&amp;.\n00005c0 00 26 00 02 07 00 1f 01 00 20 00 00 00 06 00 01 | .&amp;....... ......\n00005d0 00 21 00 00 00 01 00 28 00 00 00 02 00 29       | .!.....(.....)\n00005de <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>如上，.class</p>\n<p>文件开头的4个字节<code>cafe babe</code> 称之为 <strong>魔数</strong>,0000是编译器jdk版本的次版本号0，0034转化为十进制是52,是主版本号，java的版本号从45开始  52对应1.8，接下来就是一些<code>常量池</code>、<code>方法表集合</code>等信息 这些字16进制的信息对应为jvm 所认识的字节码指令。</p>\n<h3 id=\"字节码指令集与解析\"><a href=\"#字节码指令集与解析\" class=\"headerlink\" title=\"字节码指令集与解析\"></a>字节码指令集与解析</h3><blockquote>\n<p>JVM中的字节码指令集按用途大致分成9类</p>\n</blockquote>\n<ul>\n<li>加载与存储指令</li>\n</ul>\n<p>​\t    <strong>局部变量压入操作数栈</strong></p>\n<p>​\t\t\txload：（其中x 为 i、l、f、d、a）</p>\n<p>​\t\t<strong>常量入栈</strong></p>\n<p>​\t\t\tconst、push、ldc</p>\n<ul>\n<li>算术指令</li>\n<li>类型转换指令</li>\n<li>对象的创建与访问指令</li>\n<li>方法调用与返回指令</li>\n</ul>\n<p>1.<code>invokevirtual</code>指令用于调用对象的实例方法，根据对象的实际类型进行分派(虚方法分派)，支持多态，这也是java语言中最常见的方法分派方式。</p>\n<p>2.<code>invokerinterface</code>指令用于调用接口方法，它会在运行时搜索由特定对象所实现的这个接口方法，并找出适合的方法进行调用</p>\n<p>3.<code>invokespecial</code>指令用于调用一些需要特殊处理的实例方法，包括实例<code>初始化方法(构造器)</code>，私有方法和父类方法，这些方法都是静态类型绑定的，不会在调用时进行动态派发</p>\n<p>4.<code>invokestatic</code>指令用于调用命名类中的类方法(static方法)，这是静态绑定的</p>\n<p>5.<code>invokedynamic</code>指令用于调用动态绑定的方法，这是jdk1.7之后新加入的指令，用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。前面4条调用指令的分派逻辑都固化在java虚拟机内部，而invokedynamic指令的分配逻辑是由用户所设定的引导方法决定的</p>\n<ul>\n<li>操作数栈管理指令</li>\n<li>控制转移指令</li>\n<li>异常处理指令</li>\n<li>同步控制指令</li>\n</ul>\n<p> 关于字节码指令集详细：</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/sjqstart/p/15044517.html\">https://www.cnblogs.com/sjqstart/p/15044517.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/mynameisgt/article/details/125052344\">https://blog.csdn.net/mynameisgt/article/details/125052344</a></p>\n</blockquote>\n","more":"<p><strong>概念</strong>：广义上的JVM是指一种规范，狭义上的JVM指的是Hotspot类的虚拟机实现</p>\n<p><strong>Java语言与JVM的关系</strong>：Java语言编写程序生成class字节码在JVM虚拟机里执行。其他语言也可以，比如 kotlin、Groovy</p>\n<p><strong>学习流程</strong>：类加载子系统 –&gt; 运行时数据区 –&gt; 一个对象的一生–&gt; GC垃圾收集器</p>\n<h2 id=\"知识体系\"><a href=\"#知识体系\" class=\"headerlink\" title=\"知识体系\"></a>知识体系</h2><blockquote>\n<p>JVM整体学习流程</p>\n</blockquote>\n<ul>\n<li><strong>字节码引出JVM基础知识</strong></li>\n<li><strong>类的加载过程</strong></li>\n<li><strong>运行时内存数据</strong></li>\n<li><strong>对象内存布局</strong></li>\n<li><strong>执行引擎</strong></li>\n<li><strong>垃圾回收</strong></li>\n<li><strong>JVM性能监控</strong></li>\n<li><strong>性能调优案例</strong></li>\n</ul>\n<h2 id=\"字节码篇\"><a href=\"#字节码篇\" class=\"headerlink\" title=\"字节码篇\"></a>字节码篇</h2><blockquote>\n<p>什么是字节码指令？</p>\n</blockquote>\n<p>Java虚拟机的指令是由<code>一个字节长度</code>的、代表着某种特定操作含义的<code>操作码</code>（opcode），以及其后跟随<code>零至多个</code>代表此操作所需参数的<code>操作数</code>（operand）</p>\n<h3 id=\"字节码案例\"><a href=\"#字节码案例\" class=\"headerlink\" title=\"字节码案例\"></a>字节码案例</h3><h4 id=\"案例1\"><a href=\"#案例1\" class=\"headerlink\" title=\"案例1\"></a>案例1</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ByteCondeInterview</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * 包装类对象的缓存问题\n     * Byte         -128-127\n     * Short        -128-127\n     * Integer      -128-127\n     * Long         -128-127\n     * Float        没有\n     * Double       没有\n     * Character    0-127\n     * Boolean      true/false\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Integer</span> i1<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> i2<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i1<span class=\"token operator\">==</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过idea插件jclasslib观察字节码文件</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\"> 0 sipush 128\n 3 invokestatic #2 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;>\n 6 astore_1\n 7 sipush 128\n10 invokestatic #2 &lt;java/lang/Integer.valueOf : (I)Ljava/lang/Integer;>\n13 astore_2\n14 getstatic #3 &lt;java/lang/System.out : Ljava/io/PrintStream;>\n17 aload_1\n18 aload_2\n19 if_acmpne 26 (+7)\n22 iconst_1\n23 goto 27 (+4)\n26 iconst_0\n27 invokevirtual #4 &lt;java/io/PrintStream.println : (Z)V>\n30 return\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Integer.valueOf里面回去调用 IntegerCache缓存对象</p>\n<h4 id=\"案例2\"><a href=\"#案例2\" class=\"headerlink\" title=\"案例2\"></a>案例2</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Test\npublic void test2() &#123;\n    String str1 &#x3D; new String(&quot;hello&quot;) + new String(&quot;world&quot;);\n    String str2 &#x3D; &quot;helloworld&quot;;\n\n    System.out.println(str1 &#x3D;&#x3D; str2); &#x2F;&#x2F;false\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\"> 0 new #5 &lt;java/lang/StringBuilder>\n 3 dup\n 4 invokespecial #6 &lt;java/lang/StringBuilder.&lt;init> : ()V>\n 7 new #7 &lt;java/lang/String>\n10 dup\n11 ldc #8 &lt;hello>\n13 invokespecial #9 &lt;java/lang/String.&lt;init> : (Ljava/lang/String;)V>\n16 invokevirtual #10 &lt;java/lang/StringBuilder.append : (Ljava/lang/String;)Ljava/lang/StringBuilder;>\n19 new #7 &lt;java/lang/String>\n22 dup\n23 ldc #11 &lt;world>\n25 invokespecial #9 &lt;java/lang/String.&lt;init> : (Ljava/lang/String;)V>\n28 invokevirtual #10 &lt;java/lang/StringBuilder.append : (Ljava/lang/String;)Ljava/lang/StringBuilder;>\n31 invokevirtual #12 &lt;java/lang/StringBuilder.toString : ()Ljava/lang/String;>\n34 astore_1\n35 ldc #13 &lt;helloworld>\n37 astore_2\n38 getstatic #3 &lt;java/lang/System.out : Ljava/io/PrintStream;>\n41 aload_1\n42 aload_2\n43 if_acmpne 50 (+7)\n46 iconst_1\n47 goto 51 (+4)\n50 iconst_0\n51 invokevirtual #4 &lt;java/io/PrintStream.println : (Z)V>\n54 return\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>str1不和str2相等的原因在于，str1的对象是由两个StringBuilder对象转化使用append拼接，最后调用StringBuilder的toString,而toString里面使用的值又是StringBuilder对象的值新new一个对象的，而str2是直接在堆中常量对象，二者地址自然不对等</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Create a copy, don't share the array</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"案例3\"><a href=\"#案例3\" class=\"headerlink\" title=\"案例3\"></a>案例3</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    str1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>加入  str1.intern(); 就是true  jdk6还事false，jdk8后是true,因为jdk8后的常量池也在堆中，此时通过  str1.intern();会将常量池改对象的地址指向堆中的地址</p>\n<h3 id=\"如何解读class文件？\"><a href=\"#如何解读class文件？\" class=\"headerlink\" title=\"如何解读class文件？\"></a>如何解读class文件？</h3><p>.class文件以16进制存储的</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">0000000 ca fe ba be 00 00 00 34 00 4b 0a 00 10 00 2a 0a | .......4.K....*.\n0000010 00 2b 00 2c 09 00 2d 00 2e 0a 00 2f 00 30 07 00 | .+.,..-..../.0..\n0000020 31 0a 00 05 00 2a 07 00 32 08 00 33 0a 00 07 00 | 1....*..2..3....\n0000030 34 0a 00 05 00 35 08 00 36 0a 00 05 00 37 08 00 | 4....5..6....7..\n0000040 38 0a 00 07 00 39 07 00 3a 07 00 3b 01 00 06 3c | 8....9..:..;...&lt;\n0000050 69 6e 69 74 3e 01 00 03 28 29 56 01 00 04 43 6f | init>...()V...Co\n0000060 64 65 01 00 0f 4c 69 6e 65 4e 75 6d 62 65 72 54 | de...LineNumberT\n0000070 61 62 6c 65 01 00 12 4c 6f 63 61 6c 56 61 72 69 | able...LocalVari\n0000080 61 62 6c 65 54 61 62 6c 65 01 00 04 74 68 69 73 | ableTable...this\n0000090 01 00 21 4c 63 6e 2f 68 79 71 75 70 2f 6a 76 6d | ..!Lcn/hyqup/jvm\n00000a0 2f 42 79 74 65 43 6f 6e 64 65 49 6e 74 65 72 76 | /ByteCondeInterv\n00000b0 69 65 77 3b 01 00 05 74 65 73 74 31 01 00 02 69 | iew;...test1...i\n00000c0 31 01 00 13 4c 6a 61 76 61 2f 6c 61 6e 67 2f 49 | 1...Ljava/lang/I\n00000d0 6e 74 65 67 65 72 3b 01 00 02 69 32 01 00 0d 53 | nteger;...i2...S\n00000e0 74 61 63 6b 4d 61 70 54 61 62 6c 65 07 00 3a 07 | tackMapTable..:.\n00000f0 00 3c 07 00 3d 01 00 19 52 75 6e 74 69 6d 65 56 | .&lt;..=...RuntimeV\n0000100 69 73 69 62 6c 65 41 6e 6e 6f 74 61 74 69 6f 6e | isibleAnnotation\n0000110 73 01 00 10 4c 6f 72 67 2f 6a 75 6e 69 74 2f 54 | s...Lorg/junit/T\n0000120 65 73 74 3b 01 00 05 74 65 73 74 32 01 00 04 73 | est;...test2...s\n0000130 74 72 31 01 00 12 4c 6a 61 76 61 2f 6c 61 6e 67 | tr1...Ljava/lang\n0000140 2f 53 74 72 69 6e 67 3b 01 00 04 73 74 72 32 07 | /String;...str2.\n0000150 00 32 01 00 05 74 65 73 74 33 01 00 0a 53 6f 75 | .2...test3...Sou\n0000160 72 63 65 46 69 6c 65 01 00 17 42 79 74 65 43 6f | rceFile...ByteCo\n0000170 6e 64 65 49 6e 74 65 72 76 69 65 77 2e 6a 61 76 | ndeInterview.jav\n0000180 61 0c 00 11 00 12 07 00 3c 0c 00 3e 00 3f 07 00 | a.......&lt;..>.?..\n0000190 40 0c 00 41 00 42 07 00 3d 0c 00 43 00 44 01 00 | @..A.B..=..C.D..\n00001a0 17 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e | .java/lang/Strin\n00001b0 67 42 75 69 6c 64 65 72 01 00 10 6a 61 76 61 2f | gBuilder...java/\n00001c0 6c 61 6e 67 2f 53 74 72 69 6e 67 01 00 05 68 65 | lang/String...he\n00001d0 6c 6c 6f 0c 00 11 00 45 0c 00 46 00 47 01 00 05 | llo....E..F.G...\n00001e0 77 6f 72 6c 64 0c 00 48 00 49 01 00 0a 68 65 6c | world..H.I...hel\n00001f0 6c 6f 77 6f 72 6c 64 0c 00 4a 00 49 01 00 1f 63 | loworld..J.I...c\n0000200 6e 2f 68 79 71 75 70 2f 6a 76 6d 2f 42 79 74 65 | n/hyqup/jvm/Byte\n0000210 43 6f 6e 64 65 49 6e 74 65 72 76 69 65 77 01 00 | CondeInterview..\n0000220 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f 62 6a 65 63 | .java/lang/Objec\n0000230 74 01 00 11 6a 61 76 61 2f 6c 61 6e 67 2f 49 6e | t...java/lang/In\n0000240 74 65 67 65 72 01 00 13 6a 61 76 61 2f 69 6f 2f | teger...java/io/\n0000250 50 72 69 6e 74 53 74 72 65 61 6d 01 00 07 76 61 | PrintStream...va\n0000260 6c 75 65 4f 66 01 00 16 28 49 29 4c 6a 61 76 61 | lueOf...(I)Ljava\n0000270 2f 6c 61 6e 67 2f 49 6e 74 65 67 65 72 3b 01 00 | /lang/Integer;..\n0000280 10 6a 61 76 61 2f 6c 61 6e 67 2f 53 79 73 74 65 | .java/lang/Syste\n0000290 6d 01 00 03 6f 75 74 01 00 15 4c 6a 61 76 61 2f | m...out...Ljava/\n00002a0 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d 3b 01 | io/PrintStream;.\n00002b0 00 07 70 72 69 6e 74 6c 6e 01 00 04 28 5a 29 56 | ..println...(Z)V\n00002c0 01 00 15 28 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 | ...(Ljava/lang/S\n00002d0 74 72 69 6e 67 3b 29 56 01 00 06 61 70 70 65 6e | tring;)V...appen\n00002e0 64 01 00 2d 28 4c 6a 61 76 61 2f 6c 61 6e 67 2f | d..-(Ljava/lang/\n00002f0 53 74 72 69 6e 67 3b 29 4c 6a 61 76 61 2f 6c 61 | String;)Ljava/la\n0000300 6e 67 2f 53 74 72 69 6e 67 42 75 69 6c 64 65 72 | ng/StringBuilder\n0000310 3b 01 00 08 74 6f 53 74 72 69 6e 67 01 00 14 28 | ;...toString...(\n0000320 29 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 | )Ljava/lang/Stri\n0000330 6e 67 3b 01 00 06 69 6e 74 65 72 6e 00 21 00 0f | ng;...intern.!..\n0000340 00 10 00 00 00 00 00 04 00 01 00 11 00 12 00 01 | ................\n0000350 00 13 00 00 00 2f 00 01 00 01 00 00 00 05 2a b7 | ...../........*.\n0000360 00 01 b1 00 00 00 02 00 14 00 00 00 06 00 01 00 | ................\n0000370 00 00 0d 00 15 00 00 00 0c 00 01 00 00 00 05 00 | ................\n0000380 16 00 17 00 00 00 01 00 18 00 12 00 02 00 13 00 | ................\n0000390 00 00 98 00 03 00 03 00 00 00 1f 11 00 80 b8 00 | ................\n00003a0 02 4c 11 00 80 b8 00 02 4d b2 00 03 2b 2c a6 00 | .L......M...+,..\n00003b0 07 04 a7 00 04 03 b6 00 04 b1 00 00 00 03 00 14 | ................\n00003c0 00 00 00 12 00 04 00 00 00 1c 00 07 00 1d 00 0e | ................\n00003d0 00 1f 00 1e 00 20 00 15 00 00 00 20 00 03 00 00 | ..... ..... ....\n00003e0 00 1f 00 16 00 17 00 00 00 07 00 18 00 19 00 1a | ................\n00003f0 00 01 00 0e 00 11 00 1b 00 1a 00 02 00 1c 00 00 | ................\n0000400 00 29 00 02 ff 00 1a 00 03 07 00 1d 07 00 1e 07 | .)..............\n0000410 00 1e 00 01 07 00 1f ff 00 00 00 03 07 00 1d 07 | ................\n0000420 00 1e 07 00 1e 00 02 07 00 1f 01 00 20 00 00 00 | ............ ...\n0000430 06 00 01 00 21 00 00 00 01 00 22 00 12 00 02 00 | ....!.....\".....\n0000440 13 00 00 00 b0 00 04 00 03 00 00 00 37 bb 00 05 | ............7...\n0000450 59 b7 00 06 bb 00 07 59 12 08 b7 00 09 b6 00 0a | Y......Y........\n0000460 bb 00 07 59 12 0b b7 00 09 b6 00 0a b6 00 0c 4c | ...Y...........L\n0000470 12 0d 4d b2 00 03 2b 2c a6 00 07 04 a7 00 04 03 | ..M...+,........\n0000480 b6 00 04 b1 00 00 00 03 00 14 00 00 00 12 00 04 | ................\n0000490 00 00 00 25 00 23 00 26 00 26 00 28 00 36 00 29 | ...%.#.&amp;.&amp;.(.6.)\n00004a0 00 15 00 00 00 20 00 03 00 00 00 37 00 16 00 17 | ..... .....7....\n00004b0 00 00 00 23 00 14 00 23 00 24 00 01 00 26 00 11 | ...#...#.$...&amp;..\n00004c0 00 25 00 24 00 02 00 1c 00 00 00 29 00 02 ff 00 | .%.$.......)....\n00004d0 32 00 03 07 00 1d 07 00 26 07 00 26 00 01 07 00 | 2.......&amp;..&amp;....\n00004e0 1f ff 00 00 00 03 07 00 1d 07 00 26 07 00 26 00 | ...........&amp;..&amp;.\n00004f0 02 07 00 1f 01 00 20 00 00 00 06 00 01 00 21 00 | ...... .......!.\n0000500 00 00 01 00 27 00 12 00 02 00 13 00 00 00 b9 00 | ....'...........\n0000510 04 00 03 00 00 00 3c bb 00 05 59 b7 00 06 bb 00 | ......&lt;...Y.....\n0000520 07 59 12 08 b7 00 09 b6 00 0a bb 00 07 59 12 0b | .Y...........Y..\n0000530 b7 00 09 b6 00 0a b6 00 0c 4c 2b b6 00 0e 57 12 | .........L+...W.\n0000540 0d 4d b2 00 03 2b 2c a6 00 07 04 a7 00 04 03 b6 | .M...+,.........\n0000550 00 04 b1 00 00 00 03 00 14 00 00 00 16 00 05 00 | ................\n0000560 00 00 2e 00 23 00 2f 00 28 00 30 00 2b 00 31 00 | ....#./.(.0.+.1.\n0000570 3b 00 32 00 15 00 00 00 20 00 03 00 00 00 3c 00 | ;.2..... .....&lt;.\n0000580 16 00 17 00 00 00 23 00 19 00 23 00 24 00 01 00 | ......#...#.$...\n0000590 2b 00 11 00 25 00 24 00 02 00 1c 00 00 00 29 00 | +...%.$.......).\n00005a0 02 ff 00 37 00 03 07 00 1d 07 00 26 07 00 26 00 | ...7.......&amp;..&amp;.\n00005b0 01 07 00 1f ff 00 00 00 03 07 00 1d 07 00 26 07 | ..............&amp;.\n00005c0 00 26 00 02 07 00 1f 01 00 20 00 00 00 06 00 01 | .&amp;....... ......\n00005d0 00 21 00 00 00 01 00 28 00 00 00 02 00 29       | .!.....(.....)\n00005de <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上，.class</p>\n<p>文件开头的4个字节<code>cafe babe</code> 称之为 <strong>魔数</strong>,0000是编译器jdk版本的次版本号0，0034转化为十进制是52,是主版本号，java的版本号从45开始  52对应1.8，接下来就是一些<code>常量池</code>、<code>方法表集合</code>等信息 这些字16进制的信息对应为jvm 所认识的字节码指令。</p>\n<h3 id=\"字节码指令集与解析\"><a href=\"#字节码指令集与解析\" class=\"headerlink\" title=\"字节码指令集与解析\"></a>字节码指令集与解析</h3><blockquote>\n<p>JVM中的字节码指令集按用途大致分成9类</p>\n</blockquote>\n<ul>\n<li>加载与存储指令</li>\n</ul>\n<p>​\t    <strong>局部变量压入操作数栈</strong></p>\n<p>​\t\t\txload：（其中x 为 i、l、f、d、a）</p>\n<p>​\t\t<strong>常量入栈</strong></p>\n<p>​\t\t\tconst、push、ldc</p>\n<ul>\n<li>算术指令</li>\n<li>类型转换指令</li>\n<li>对象的创建与访问指令</li>\n<li>方法调用与返回指令</li>\n</ul>\n<p>1.<code>invokevirtual</code>指令用于调用对象的实例方法，根据对象的实际类型进行分派(虚方法分派)，支持多态，这也是java语言中最常见的方法分派方式。</p>\n<p>2.<code>invokerinterface</code>指令用于调用接口方法，它会在运行时搜索由特定对象所实现的这个接口方法，并找出适合的方法进行调用</p>\n<p>3.<code>invokespecial</code>指令用于调用一些需要特殊处理的实例方法，包括实例<code>初始化方法(构造器)</code>，私有方法和父类方法，这些方法都是静态类型绑定的，不会在调用时进行动态派发</p>\n<p>4.<code>invokestatic</code>指令用于调用命名类中的类方法(static方法)，这是静态绑定的</p>\n<p>5.<code>invokedynamic</code>指令用于调用动态绑定的方法，这是jdk1.7之后新加入的指令，用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。前面4条调用指令的分派逻辑都固化在java虚拟机内部，而invokedynamic指令的分配逻辑是由用户所设定的引导方法决定的</p>\n<ul>\n<li>操作数栈管理指令</li>\n<li>控制转移指令</li>\n<li>异常处理指令</li>\n<li>同步控制指令</li>\n</ul>\n<p> 关于字节码指令集详细：</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/sjqstart/p/15044517.html\">https://www.cnblogs.com/sjqstart/p/15044517.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/mynameisgt/article/details/125052344\">https://blog.csdn.net/mynameisgt/article/details/125052344</a></p>\n</blockquote>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"JVM","path":"api/categories/JVM.json"}],"tags":[]}