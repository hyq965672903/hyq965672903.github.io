{"title":"MySQL进阶(四)-锁篇","slug":"MySQL进阶-四-锁篇","date":"2023-04-02T15:09:13.000Z","updated":"2024-04-22T07:21:14.891Z","comments":true,"path":"api/articles/MySQL进阶-四-锁篇.json","excerpt":"MySQL中的锁，共享锁、排它锁、全局锁、表锁、行锁、读锁、写锁等","covers":["http://file.hyqup.cn/img/%E5%8A%A0%E9%94%81%E8%BF%87%E7%A8%8B.png"],"content":"<p>MySQL中的锁，共享锁、排它锁、全局锁、表锁、行锁、读锁、写锁等</p>\n<span id=\"more\"></span>\n\n<h2 id=\"锁分类\"><a href=\"#锁分类\" class=\"headerlink\" title=\"锁分类\"></a>锁分类</h2><p>MySQL加锁过程</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">update</span> tab_user <span class=\"token keyword\">set</span> name<span class=\"token operator\">=</span><span class=\"token string\">'曹操'</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p><img src=\"http://file.hyqup.cn/img/%E5%8A%A0%E9%94%81%E8%BF%87%E7%A8%8B.png\" alt=\"加锁过程\"></p>\n<h3 id=\"功能划分\"><a href=\"#功能划分\" class=\"headerlink\" title=\"功能划分\"></a><strong>功能划分</strong></h3><p>**<code>共享锁（shared lock）</code>**：也叫S锁、读锁，读锁是共享的，读锁之间互相不阻塞</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> … <span class=\"token keyword\">lock</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">share</span> <span class=\"token keyword\">mode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>**<code>排他锁（exclusive lock）</code>**：也叫X锁、写锁，写锁是排他的，写锁阻塞其他的读和写锁</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> … <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h3 id=\"按粒度分\"><a href=\"#按粒度分\" class=\"headerlink\" title=\"按粒度分\"></a><strong>按粒度分</strong></h3><ul>\n<li>全局锁：锁整Database，由MySQL的SQL layer层实现</li>\n<li>表级锁：锁某Table，由MySQL的SQL layer层实现</li>\n<li>行级锁：锁某Row的索引，也可锁定行索引之间的间隙，由存储引擎实现【InnoDB】<ul>\n<li>记录锁（Record Locks）：锁定索引中一条记录</li>\n<li>间隙锁（Gap Locks）：仅仅锁住一个索引区间</li>\n<li>临键锁（Next-Key Locks）：记录锁和间隙锁的组合，<strong>解决幻读问题</strong></li>\n<li>插入意向锁(Insert Intention Locks)：做insert时添加的对记录id的锁</li>\n<li>意向锁：存储引擎级别的“表级”锁</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h2><p>全局锁是对整个数据库实例加锁，加锁后整个实例就处于只读状态，将阻塞DML、DDL及已经更新但未提交的语句</p>\n<p>应用场景：全库逻辑备份</p>\n<h3 id=\"表锁相关命令\"><a href=\"#表锁相关命令\" class=\"headerlink\" title=\"表锁相关命令\"></a><strong>表锁相关命令</strong></h3><p>加锁命令：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">flush <span class=\"token keyword\">tables</span> <span class=\"token keyword\">with</span> <span class=\"token keyword\">read</span> <span class=\"token keyword\">lock</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>释放锁命令：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">unlock</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>注：**<code>断开Session锁自动释放全局锁</code>**</p>\n<h2 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h2><ul>\n<li><p><code>表读锁（Table Read Lock）</code>，阻塞对当前表的写，但不阻塞读</p>\n</li>\n<li><p><code>表写锁（Table Write Lock）</code>，阻塞对当前表的读和写</p>\n</li>\n<li><p><code>元数据锁（Meta Data Lock，MDL)</code>，不需要显式指定，在访问表时会被自动加上，作用保证读写的正确性</p>\n<ul>\n<li>当对表做<strong>增删改查</strong>操作的时<strong>加元数据读锁</strong></li>\n<li>当对表做<strong>结构变更</strong>操作的时<strong>加元数据写锁</strong></li>\n</ul>\n</li>\n<li><p><code>自增锁(AUTO-INC Locks)</code>， AUTO-INC是一种特殊的表级锁，自增列事务性插入操作时产生</p>\n</li>\n</ul>\n<h3 id=\"表锁相关命令-1\"><a href=\"#表锁相关命令-1\" class=\"headerlink\" title=\"表锁相关命令\"></a><strong>表锁相关命令</strong></h3><ul>\n<li><p>查看表锁定状态：show status like ‘table_locks%’;</p>\n</li>\n<li><p>添加表读锁：lock table t read;</p>\n</li>\n<li><p>添加表写锁：lock table t write;</p>\n</li>\n<li><p>查看表锁情况：show open tables;</p>\n</li>\n<li><p>删除表锁：unlock tables;</p>\n</li>\n</ul>\n<h2 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a><strong>行锁</strong></h2><blockquote>\n<p>MySQL的行级锁是由存储引擎实现，<strong>InnoDB行锁</strong>是通过给索引上的<strong>索引项加锁来实现</strong></p>\n</blockquote>\n<p>注：<strong>只有通过索引条件检索的数据InnoDB才使用行级锁，否则InnoDB都将使用表锁</strong></p>\n<h3 id=\"按范围分：\"><a href=\"#按范围分：\" class=\"headerlink\" title=\"按范围分：\"></a><strong>按范围分：</strong></h3><p>记录锁（Record Locks）、间隙锁（Gap Locks）、临键锁（Next-Key Locks）、插入意向锁（Insert Intention Locks）</p>\n<h3 id=\"按功能分：\"><a href=\"#按功能分：\" class=\"headerlink\" title=\"按功能分：\"></a>按功能分：</h3><p>读锁：允许事务<strong>去读</strong>目标行，阻止其他事务<strong>更新</strong>。阻止其他事务加写锁，但不阻止加读锁</p>\n<p>写锁：允许事务<strong>更新</strong>目标行，阻止其他事务<strong>获取或修改</strong>。同时阻止其他事务加读锁和写锁。</p>\n<h3 id=\"如何加锁\"><a href=\"#如何加锁\" class=\"headerlink\" title=\"如何加锁?\"></a>如何加锁?</h3><ul>\n<li><p>对于Update、Delete和Insert语句，InnoDB会自动给涉及数据集加<strong>写锁</strong></p>\n</li>\n<li><p>对于普通Select语句，<strong>InnoDB不会加任何锁</strong></p>\n</li>\n<li><p>事务手动给Select记录集加读锁或写锁</p>\n</li>\n<li><p>手动加锁</p>\n<ul>\n<li><p><strong>添加读锁</strong></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> xxx <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> xx <span class=\"token keyword\">lock</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">share</span> <span class=\"token keyword\">mode</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n</li>\n<li><p><strong>添加写锁</strong></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> xxx <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> xx <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"行锁四兄弟：记录、间隙、临键和插入意向锁\"><a href=\"#行锁四兄弟：记录、间隙、临键和插入意向锁\" class=\"headerlink\" title=\"行锁四兄弟：记录、间隙、临键和插入意向锁\"></a><strong>行锁四兄弟：记录、间隙、临键和插入意向锁</strong></h3><h4 id=\"记录锁\"><a href=\"#记录锁\" class=\"headerlink\" title=\"记录锁\"></a><strong>记录锁</strong></h4><blockquote>\n<p>记录锁（Record Locks）仅仅锁住索引记录的一行</p>\n</blockquote>\n<ul>\n<li>记录锁锁住的永远是索引，而非记录本身，即使该表上没有任何显示索引 </li>\n<li>没有索引，InnoDB会创建隐藏列ROWID的聚簇索引</li>\n</ul>\n<h4 id=\"间隙锁\"><a href=\"#间隙锁\" class=\"headerlink\" title=\"间隙锁\"></a>间隙锁</h4><blockquote>\n<p>间隙锁（Gap Locks）仅仅锁住一个索引区间，开区间，不包括双端端点和索引记录</p>\n</blockquote>\n<ul>\n<li>在索引记录间隙中加锁，并不包括该索引记录本身</li>\n<li>间隙锁可用于防止幻读，保证索引间隙不会被插入数据</li>\n</ul>\n<h4 id=\"临键锁\"><a href=\"#临键锁\" class=\"headerlink\" title=\"临键锁\"></a>临键锁</h4><blockquote>\n<p>临键锁（Next-Key Locks）相当于记录锁 + 间隙锁，左开右闭区间</p>\n</blockquote>\n<ul>\n<li>默认情况下，InnoDB使用临键锁来锁定记录，但会在不同场景中退化</li>\n<li>场景01-唯一性字段等值（&#x3D;）且记录存在，退化为<strong>记录锁</strong></li>\n<li>场景02-唯一性字段等值（&#x3D;）且记录不存在，退化为<strong>间隙锁</strong></li>\n<li>场景03-唯一性字段范围（&lt; &gt;），还是<strong>临键锁</strong></li>\n<li>场景04-非唯一性字段，默认是<strong>临键锁</strong></li>\n</ul>\n<h4 id=\"插入意向锁\"><a href=\"#插入意向锁\" class=\"headerlink\" title=\"插入意向锁\"></a><strong>插入意向锁</strong></h4><blockquote>\n<p>插入意向锁（Insert Intention Locks）是一种在 INSERT 操作之前设置的一种特殊的间隙锁</p>\n</blockquote>\n<ul>\n<li>插入意向锁表示了一种插入意图，即当多个不同的事务，同时往<strong>同一个索引</strong>的<strong>同一个间隙</strong>中插入数据的时候，它们互相之间无需等待，即不会阻塞</li>\n<li>插入意向锁不会阻止插入意向锁，但是插入意向锁会阻止其他<strong>间隙写锁（排他锁）、记录锁</strong></li>\n</ul>\n<h3 id=\"加锁规则\"><a href=\"#加锁规则\" class=\"headerlink\" title=\"加锁规则\"></a>加锁规则</h3><p><strong>主键索引：</strong></p>\n<ul>\n<li><p>等值条件，命中加记录锁</p>\n</li>\n<li><p>等值条件，未命中加间隙锁</p>\n</li>\n<li><p>范围条件，命中包含where条件的临键区间加临键锁</p>\n</li>\n<li><p>范围条件，没有命中加间隙锁</p>\n</li>\n</ul>\n<p><strong>辅助索引：</strong></p>\n<ul>\n<li><p>等值条件，命中，命中记录辅助索引项，回表主键索引项加记录锁，辅助索引项两侧加间隙锁</p>\n</li>\n<li><p>等值条件，未命中加间隙锁</p>\n</li>\n<li><p>范围条件，命中包含where条件的临键区间加临键锁。命中记录回表主键索引项加记录锁</p>\n</li>\n<li><p>范围条件，没有命中加间隙锁</p>\n</li>\n</ul>\n","more":"<h2 id=\"锁分类\"><a href=\"#锁分类\" class=\"headerlink\" title=\"锁分类\"></a>锁分类</h2><p>MySQL加锁过程</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">update</span> tab_user <span class=\"token keyword\">set</span> name<span class=\"token operator\">=</span><span class=\"token string\">'曹操'</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"http://file.hyqup.cn/img/%E5%8A%A0%E9%94%81%E8%BF%87%E7%A8%8B.png\" alt=\"加锁过程\"></p>\n<h3 id=\"功能划分\"><a href=\"#功能划分\" class=\"headerlink\" title=\"功能划分\"></a><strong>功能划分</strong></h3><p>**<code>共享锁（shared lock）</code>**：也叫S锁、读锁，读锁是共享的，读锁之间互相不阻塞</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> … <span class=\"token keyword\">lock</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">share</span> <span class=\"token keyword\">mode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>**<code>排他锁（exclusive lock）</code>**：也叫X锁、写锁，写锁是排他的，写锁阻塞其他的读和写锁</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> … <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"按粒度分\"><a href=\"#按粒度分\" class=\"headerlink\" title=\"按粒度分\"></a><strong>按粒度分</strong></h3><ul>\n<li>全局锁：锁整Database，由MySQL的SQL layer层实现</li>\n<li>表级锁：锁某Table，由MySQL的SQL layer层实现</li>\n<li>行级锁：锁某Row的索引，也可锁定行索引之间的间隙，由存储引擎实现【InnoDB】<ul>\n<li>记录锁（Record Locks）：锁定索引中一条记录</li>\n<li>间隙锁（Gap Locks）：仅仅锁住一个索引区间</li>\n<li>临键锁（Next-Key Locks）：记录锁和间隙锁的组合，<strong>解决幻读问题</strong></li>\n<li>插入意向锁(Insert Intention Locks)：做insert时添加的对记录id的锁</li>\n<li>意向锁：存储引擎级别的“表级”锁</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h2><p>全局锁是对整个数据库实例加锁，加锁后整个实例就处于只读状态，将阻塞DML、DDL及已经更新但未提交的语句</p>\n<p>应用场景：全库逻辑备份</p>\n<h3 id=\"表锁相关命令\"><a href=\"#表锁相关命令\" class=\"headerlink\" title=\"表锁相关命令\"></a><strong>表锁相关命令</strong></h3><p>加锁命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">flush <span class=\"token keyword\">tables</span> <span class=\"token keyword\">with</span> <span class=\"token keyword\">read</span> <span class=\"token keyword\">lock</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>释放锁命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">unlock</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注：**<code>断开Session锁自动释放全局锁</code>**</p>\n<h2 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h2><ul>\n<li><p><code>表读锁（Table Read Lock）</code>，阻塞对当前表的写，但不阻塞读</p>\n</li>\n<li><p><code>表写锁（Table Write Lock）</code>，阻塞对当前表的读和写</p>\n</li>\n<li><p><code>元数据锁（Meta Data Lock，MDL)</code>，不需要显式指定，在访问表时会被自动加上，作用保证读写的正确性</p>\n<ul>\n<li>当对表做<strong>增删改查</strong>操作的时<strong>加元数据读锁</strong></li>\n<li>当对表做<strong>结构变更</strong>操作的时<strong>加元数据写锁</strong></li>\n</ul>\n</li>\n<li><p><code>自增锁(AUTO-INC Locks)</code>， AUTO-INC是一种特殊的表级锁，自增列事务性插入操作时产生</p>\n</li>\n</ul>\n<h3 id=\"表锁相关命令-1\"><a href=\"#表锁相关命令-1\" class=\"headerlink\" title=\"表锁相关命令\"></a><strong>表锁相关命令</strong></h3><ul>\n<li><p>查看表锁定状态：show status like ‘table_locks%’;</p>\n</li>\n<li><p>添加表读锁：lock table t read;</p>\n</li>\n<li><p>添加表写锁：lock table t write;</p>\n</li>\n<li><p>查看表锁情况：show open tables;</p>\n</li>\n<li><p>删除表锁：unlock tables;</p>\n</li>\n</ul>\n<h2 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a><strong>行锁</strong></h2><blockquote>\n<p>MySQL的行级锁是由存储引擎实现，<strong>InnoDB行锁</strong>是通过给索引上的<strong>索引项加锁来实现</strong></p>\n</blockquote>\n<p>注：<strong>只有通过索引条件检索的数据InnoDB才使用行级锁，否则InnoDB都将使用表锁</strong></p>\n<h3 id=\"按范围分：\"><a href=\"#按范围分：\" class=\"headerlink\" title=\"按范围分：\"></a><strong>按范围分：</strong></h3><p>记录锁（Record Locks）、间隙锁（Gap Locks）、临键锁（Next-Key Locks）、插入意向锁（Insert Intention Locks）</p>\n<h3 id=\"按功能分：\"><a href=\"#按功能分：\" class=\"headerlink\" title=\"按功能分：\"></a>按功能分：</h3><p>读锁：允许事务<strong>去读</strong>目标行，阻止其他事务<strong>更新</strong>。阻止其他事务加写锁，但不阻止加读锁</p>\n<p>写锁：允许事务<strong>更新</strong>目标行，阻止其他事务<strong>获取或修改</strong>。同时阻止其他事务加读锁和写锁。</p>\n<h3 id=\"如何加锁\"><a href=\"#如何加锁\" class=\"headerlink\" title=\"如何加锁?\"></a>如何加锁?</h3><ul>\n<li><p>对于Update、Delete和Insert语句，InnoDB会自动给涉及数据集加<strong>写锁</strong></p>\n</li>\n<li><p>对于普通Select语句，<strong>InnoDB不会加任何锁</strong></p>\n</li>\n<li><p>事务手动给Select记录集加读锁或写锁</p>\n</li>\n<li><p>手动加锁</p>\n<ul>\n<li><p><strong>添加读锁</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> xxx <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> xx <span class=\"token keyword\">lock</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">share</span> <span class=\"token keyword\">mode</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>添加写锁</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> xxx <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> xx <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"行锁四兄弟：记录、间隙、临键和插入意向锁\"><a href=\"#行锁四兄弟：记录、间隙、临键和插入意向锁\" class=\"headerlink\" title=\"行锁四兄弟：记录、间隙、临键和插入意向锁\"></a><strong>行锁四兄弟：记录、间隙、临键和插入意向锁</strong></h3><h4 id=\"记录锁\"><a href=\"#记录锁\" class=\"headerlink\" title=\"记录锁\"></a><strong>记录锁</strong></h4><blockquote>\n<p>记录锁（Record Locks）仅仅锁住索引记录的一行</p>\n</blockquote>\n<ul>\n<li>记录锁锁住的永远是索引，而非记录本身，即使该表上没有任何显示索引 </li>\n<li>没有索引，InnoDB会创建隐藏列ROWID的聚簇索引</li>\n</ul>\n<h4 id=\"间隙锁\"><a href=\"#间隙锁\" class=\"headerlink\" title=\"间隙锁\"></a>间隙锁</h4><blockquote>\n<p>间隙锁（Gap Locks）仅仅锁住一个索引区间，开区间，不包括双端端点和索引记录</p>\n</blockquote>\n<ul>\n<li>在索引记录间隙中加锁，并不包括该索引记录本身</li>\n<li>间隙锁可用于防止幻读，保证索引间隙不会被插入数据</li>\n</ul>\n<h4 id=\"临键锁\"><a href=\"#临键锁\" class=\"headerlink\" title=\"临键锁\"></a>临键锁</h4><blockquote>\n<p>临键锁（Next-Key Locks）相当于记录锁 + 间隙锁，左开右闭区间</p>\n</blockquote>\n<ul>\n<li>默认情况下，InnoDB使用临键锁来锁定记录，但会在不同场景中退化</li>\n<li>场景01-唯一性字段等值（&#x3D;）且记录存在，退化为<strong>记录锁</strong></li>\n<li>场景02-唯一性字段等值（&#x3D;）且记录不存在，退化为<strong>间隙锁</strong></li>\n<li>场景03-唯一性字段范围（&lt; &gt;），还是<strong>临键锁</strong></li>\n<li>场景04-非唯一性字段，默认是<strong>临键锁</strong></li>\n</ul>\n<h4 id=\"插入意向锁\"><a href=\"#插入意向锁\" class=\"headerlink\" title=\"插入意向锁\"></a><strong>插入意向锁</strong></h4><blockquote>\n<p>插入意向锁（Insert Intention Locks）是一种在 INSERT 操作之前设置的一种特殊的间隙锁</p>\n</blockquote>\n<ul>\n<li>插入意向锁表示了一种插入意图，即当多个不同的事务，同时往<strong>同一个索引</strong>的<strong>同一个间隙</strong>中插入数据的时候，它们互相之间无需等待，即不会阻塞</li>\n<li>插入意向锁不会阻止插入意向锁，但是插入意向锁会阻止其他<strong>间隙写锁（排他锁）、记录锁</strong></li>\n</ul>\n<h3 id=\"加锁规则\"><a href=\"#加锁规则\" class=\"headerlink\" title=\"加锁规则\"></a>加锁规则</h3><p><strong>主键索引：</strong></p>\n<ul>\n<li><p>等值条件，命中加记录锁</p>\n</li>\n<li><p>等值条件，未命中加间隙锁</p>\n</li>\n<li><p>范围条件，命中包含where条件的临键区间加临键锁</p>\n</li>\n<li><p>范围条件，没有命中加间隙锁</p>\n</li>\n</ul>\n<p><strong>辅助索引：</strong></p>\n<ul>\n<li><p>等值条件，命中，命中记录辅助索引项，回表主键索引项加记录锁，辅助索引项两侧加间隙锁</p>\n</li>\n<li><p>等值条件，未命中加间隙锁</p>\n</li>\n<li><p>范围条件，命中包含where条件的临键区间加临键锁。命中记录回表主键索引项加记录锁</p>\n</li>\n<li><p>范围条件，没有命中加间隙锁</p>\n</li>\n</ul>","categories":[],"tags":[]}