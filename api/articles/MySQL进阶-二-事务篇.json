{"title":"MySQL进阶(二)-事务篇","slug":"MySQL进阶-二-事务篇","date":"2023-04-02T03:30:23.000Z","updated":"2024-04-22T07:21:14.891Z","comments":true,"path":"api/articles/MySQL进阶-二-事务篇.json","excerpt":" MySQL事务回顾，事务底层实现原理，MVCC是如何工作的，Undo日志","covers":null,"content":"<p> MySQL事务回顾，事务底层实现原理，MVCC是如何工作的，Undo日志</p>\n<span id=\"more\"></span>\n\n<h2 id=\"事务概念\"><a href=\"#事务概念\" class=\"headerlink\" title=\"事务概念\"></a>事务概念</h2><p>事务指的是逻辑上的一组操作，这组操作的组成单元<strong>要么全都成功，要么全都失败</strong>，本质上是个<strong>并发编程问题</strong></p>\n<h3 id=\"事务四大特性ACID\"><a href=\"#事务四大特性ACID\" class=\"headerlink\" title=\"事务四大特性ACID\"></a><strong>事务四大特性ACID</strong></h3><ul>\n<li><p>原子性**<code>A</code>**tomicity</p>\n</li>\n<li><p>一致性**<code>C</code>**onsistency</p>\n</li>\n<li><p>隔离性**<code>I</code>**solation</p>\n</li>\n<li><p>持久性**<code>D</code>**urability</p>\n</li>\n</ul>\n<h3 id=\"事务并发问题\"><a href=\"#事务并发问题\" class=\"headerlink\" title=\"事务并发问题\"></a>事务并发问题</h3><ul>\n<li><code>脏读</code>：一个事务读到了另一个事务**<code>未提交</code>**的数据</li>\n<li><code>不可重复读</code>：一个事务读到另一个事务**<code>已经Update</code>**的数据。引发事务中的多次查询结果不一致</li>\n<li><code>幻读</code>：一个事务读到另一个事务**<code>已经Insert</code>**的数据。导致事务中多次查询的结果不一致</li>\n</ul>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a><strong>事务隔离级别</strong></h3><p><strong>读未提交RU</strong>：Read Uncommitted，一个事务读到另一个事务没有提交的数据</p>\n<ul>\n<li>存在：3个问题：脏读、不可重复读、幻读</li>\n</ul>\n<p><strong>读已提交RC：</strong>Read Committed，一个事务读到另一个事务已经提交的数据</p>\n<ul>\n<li>存在：2个问题：不可重复读、幻读</li>\n</ul>\n<p><strong>可重复读RR：</strong>Repeatable Read，在一个事务中读到的数据始终保持一致，无论另一个事务是否提交</p>\n<ul>\n<li>存在：1个问题：幻读</li>\n</ul>\n<p><strong>串行化读：</strong>Serializable，同时只能执行一个事务，相当于事务中的单线程</p>\n<h2 id=\"事务底层原理MVCC\"><a href=\"#事务底层原理MVCC\" class=\"headerlink\" title=\"事务底层原理MVCC\"></a>事务底层原理MVCC</h2><blockquote>\n<p>MVCC全称叫多版本并发控制，是RDBMS常用的一种并发控制方法，用来对数据库数据进行并发访问，实现事务</p>\n</blockquote>\n<p><strong><code>读不加锁，读写不冲突</code></strong></p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p><strong>数据快照</strong>，不同十五访问数据快照中不同版本的数据</p>\n<p>InnoDB下的表有<strong>默认字段</strong>和<strong>可见字段</strong>，默认字段是实现MVCC的关键，默认字段是隐藏的列。默认字段最关键的两个列，<strong>一个保存了行的事务<strong><strong>ID</strong></strong>，一个保存了行的回滚指针</strong>。每开始新的事务，都会自动递增产生一个新的事务id。事务开始后，生成当前事务影响行的ReadView。当查询时，需要用当前查询的事务id与ReadView确定要查询的数据版本。</p>\n<h3 id=\"Undo日志\"><a href=\"#Undo日志\" class=\"headerlink\" title=\"Undo日志\"></a>Undo日志</h3><ul>\n<li><p>在对数据修改时，InnoDB会产生一定量的Undo日志，如果事务执行失败Rollback了，则利用Undo日志回滚到历史版本</p>\n</li>\n<li><p>Undo日志还可以解决<strong>丢失更新问题</strong></p>\n</li>\n<li><p>存储位置：系统表空间内的回滚段中</p>\n</li>\n</ul>\n<h4 id=\"Undo日志分类\"><a href=\"#Undo日志分类\" class=\"headerlink\" title=\"Undo日志分类\"></a><strong>Undo日志分类</strong></h4><p>Insert Undo日志：是在Insert操作中产生的Undo日志</p>\n<p>Update Undo日志：是Update或Delete 操作中产生的Undo日志</p>\n<h3 id=\"ReadView\"><a href=\"#ReadView\" class=\"headerlink\" title=\"ReadView\"></a><strong>ReadView</strong></h3><p>ReadView是张存储事务id的表，主要包含当前系统中有哪些活跃的读写事务，把它们的事务id放到一个列表中。结合Undo日志的默认字段【事务trx_id】来控制那个版本的Undo日志可被其他事务看见。</p>\n<p><strong>m_ids</strong>：表示在生成ReadView时，当前系统中<strong>活跃的读写事务</strong>id列表</p>\n<p><strong>m_low_limit_id</strong>：事务id下限，表示当前系统中活跃的读写事务中最小的事务id，m_ids事务列表中的最小事务id</p>\n<p><strong>m_up_limit_id</strong>：事务id上限，表示生成ReadView时，系统中应该分配给下一个事务的id值</p>\n<p><strong>m_creator_trx_id</strong>：表示生成该ReadView的事务的事务id</p>\n<h2 id=\"事务底层原理（快照读与当前读）\"><a href=\"#事务底层原理（快照读与当前读）\" class=\"headerlink\" title=\"事务底层原理（快照读与当前读）\"></a>事务底层原理（快照读与当前读）</h2><p><strong>快照读：</strong>读取的是记录的可见版本 (有可能是历史版本)，不用加锁。</p>\n<p><strong>当前读：</strong>读取的是记录的最新版本，并且当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录</p>\n","more":"<h2 id=\"事务概念\"><a href=\"#事务概念\" class=\"headerlink\" title=\"事务概念\"></a>事务概念</h2><p>事务指的是逻辑上的一组操作，这组操作的组成单元<strong>要么全都成功，要么全都失败</strong>，本质上是个<strong>并发编程问题</strong></p>\n<h3 id=\"事务四大特性ACID\"><a href=\"#事务四大特性ACID\" class=\"headerlink\" title=\"事务四大特性ACID\"></a><strong>事务四大特性ACID</strong></h3><ul>\n<li><p>原子性**<code>A</code>**tomicity</p>\n</li>\n<li><p>一致性**<code>C</code>**onsistency</p>\n</li>\n<li><p>隔离性**<code>I</code>**solation</p>\n</li>\n<li><p>持久性**<code>D</code>**urability</p>\n</li>\n</ul>\n<h3 id=\"事务并发问题\"><a href=\"#事务并发问题\" class=\"headerlink\" title=\"事务并发问题\"></a>事务并发问题</h3><ul>\n<li><code>脏读</code>：一个事务读到了另一个事务**<code>未提交</code>**的数据</li>\n<li><code>不可重复读</code>：一个事务读到另一个事务**<code>已经Update</code>**的数据。引发事务中的多次查询结果不一致</li>\n<li><code>幻读</code>：一个事务读到另一个事务**<code>已经Insert</code>**的数据。导致事务中多次查询的结果不一致</li>\n</ul>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a><strong>事务隔离级别</strong></h3><p><strong>读未提交RU</strong>：Read Uncommitted，一个事务读到另一个事务没有提交的数据</p>\n<ul>\n<li>存在：3个问题：脏读、不可重复读、幻读</li>\n</ul>\n<p><strong>读已提交RC：</strong>Read Committed，一个事务读到另一个事务已经提交的数据</p>\n<ul>\n<li>存在：2个问题：不可重复读、幻读</li>\n</ul>\n<p><strong>可重复读RR：</strong>Repeatable Read，在一个事务中读到的数据始终保持一致，无论另一个事务是否提交</p>\n<ul>\n<li>存在：1个问题：幻读</li>\n</ul>\n<p><strong>串行化读：</strong>Serializable，同时只能执行一个事务，相当于事务中的单线程</p>\n<h2 id=\"事务底层原理MVCC\"><a href=\"#事务底层原理MVCC\" class=\"headerlink\" title=\"事务底层原理MVCC\"></a>事务底层原理MVCC</h2><blockquote>\n<p>MVCC全称叫多版本并发控制，是RDBMS常用的一种并发控制方法，用来对数据库数据进行并发访问，实现事务</p>\n</blockquote>\n<p><strong><code>读不加锁，读写不冲突</code></strong></p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p><strong>数据快照</strong>，不同十五访问数据快照中不同版本的数据</p>\n<p>InnoDB下的表有<strong>默认字段</strong>和<strong>可见字段</strong>，默认字段是实现MVCC的关键，默认字段是隐藏的列。默认字段最关键的两个列，<strong>一个保存了行的事务<strong><strong>ID</strong></strong>，一个保存了行的回滚指针</strong>。每开始新的事务，都会自动递增产生一个新的事务id。事务开始后，生成当前事务影响行的ReadView。当查询时，需要用当前查询的事务id与ReadView确定要查询的数据版本。</p>\n<h3 id=\"Undo日志\"><a href=\"#Undo日志\" class=\"headerlink\" title=\"Undo日志\"></a>Undo日志</h3><ul>\n<li><p>在对数据修改时，InnoDB会产生一定量的Undo日志，如果事务执行失败Rollback了，则利用Undo日志回滚到历史版本</p>\n</li>\n<li><p>Undo日志还可以解决<strong>丢失更新问题</strong></p>\n</li>\n<li><p>存储位置：系统表空间内的回滚段中</p>\n</li>\n</ul>\n<h4 id=\"Undo日志分类\"><a href=\"#Undo日志分类\" class=\"headerlink\" title=\"Undo日志分类\"></a><strong>Undo日志分类</strong></h4><p>Insert Undo日志：是在Insert操作中产生的Undo日志</p>\n<p>Update Undo日志：是Update或Delete 操作中产生的Undo日志</p>\n<h3 id=\"ReadView\"><a href=\"#ReadView\" class=\"headerlink\" title=\"ReadView\"></a><strong>ReadView</strong></h3><p>ReadView是张存储事务id的表，主要包含当前系统中有哪些活跃的读写事务，把它们的事务id放到一个列表中。结合Undo日志的默认字段【事务trx_id】来控制那个版本的Undo日志可被其他事务看见。</p>\n<p><strong>m_ids</strong>：表示在生成ReadView时，当前系统中<strong>活跃的读写事务</strong>id列表</p>\n<p><strong>m_low_limit_id</strong>：事务id下限，表示当前系统中活跃的读写事务中最小的事务id，m_ids事务列表中的最小事务id</p>\n<p><strong>m_up_limit_id</strong>：事务id上限，表示生成ReadView时，系统中应该分配给下一个事务的id值</p>\n<p><strong>m_creator_trx_id</strong>：表示生成该ReadView的事务的事务id</p>\n<h2 id=\"事务底层原理（快照读与当前读）\"><a href=\"#事务底层原理（快照读与当前读）\" class=\"headerlink\" title=\"事务底层原理（快照读与当前读）\"></a>事务底层原理（快照读与当前读）</h2><p><strong>快照读：</strong>读取的是记录的可见版本 (有可能是历史版本)，不用加锁。</p>\n<p><strong>当前读：</strong>读取的是记录的最新版本，并且当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录</p>","categories":[],"tags":[]}