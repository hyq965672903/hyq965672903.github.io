{"title":"MySQL进阶(一)-架构篇","slug":"MySQL进阶-一-架构篇","date":"2023-03-27T13:49:59.000Z","updated":"2024-04-22T07:21:14.891Z","comments":true,"path":"api/articles/MySQL进阶-一-架构篇.json","excerpt":" 概述整个MySQL的整体架构，日志文件，存储引擎InnoDB，执行流程","covers":["E:\\git_repo\\hyq965672903.github.io\\source_posts\\MySQL进阶-一-架构篇.assets\\MySQL逻辑架构图.png","http://file.hyqup.cn/img/InnoDB%E6%9E%B6%E6%9E%84%E5%9B%BE.png"],"content":"<p> 概述整个MySQL的整体架构，日志文件，存储引擎InnoDB，执行流程</p>\n<span id=\"more\"></span>\n\n<h3 id=\"MySQL逻辑架构图\"><a href=\"#MySQL逻辑架构图\" class=\"headerlink\" title=\"MySQL逻辑架构图\"></a>MySQL逻辑架构图</h3><p><img src=\"E:\\git_repo\\hyq965672903.github.io\\source_posts\\MySQL进阶-一-架构篇.assets\\MySQL逻辑架构图.png\" alt=\"MySQL逻辑架构图\"></p>\n<h3 id=\"MySQL日志文件\"><a href=\"#MySQL日志文件\" class=\"headerlink\" title=\"MySQL日志文件\"></a>MySQL日志文件</h3><p>MySQL是通过文件系统对数据索引后进行存储的，MySQL从物理结构上可以分为<strong>日志文件</strong>和<strong>数据及索引</strong></p>\n<p><strong>文件</strong>。MySQL在Linux中的数据索引文件和日志文件通常放在&#x2F;var&#x2F;lib&#x2F;mysql目录下。MySQL通过日志记</p>\n<p>录了数据库操作信息和错误信息。</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'log_%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h4 id=\"常用日志文件\"><a href=\"#常用日志文件\" class=\"headerlink\" title=\"常用日志文件\"></a>常用日志文件</h4><ul>\n<li><p>错误日志：&#x2F;var&#x2F;log&#x2F;mysql-error.log</p>\n</li>\n<li><p>二进制日志：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</p>\n</li>\n<li><p>查询日志：general_query.log</p>\n</li>\n<li><p>慢查询日志：slow_query_log.log</p>\n</li>\n<li><p>事务重做日志：redo log</p>\n</li>\n<li><p>中继日志：relay log</p>\n</li>\n</ul>\n<h4 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><blockquote>\n<p>默认开启，错误日志记录了运行过程中遇到的所有严重的错误信息，以及 MySQL每次启动和关闭的详细信息。错误日志所记录的信息是可以通过log_error和log_warnings配置来定义的。从5.5.7以后不能关闭错误日志</p>\n</blockquote>\n<p>log_error：指定错误日志存储位置</p>\n<p>log-warnings：是否将警告信息输出到错误日志中。</p>\n<ul>\n<li><p>log_warnings 为0， 表示不记录告警信息。</p>\n</li>\n<li><p>log_warnings 为1， 表示告警信息写入错误日志。</p>\n</li>\n<li><p>log_warnings 大于1， 表示各类告警信息，例如：有关网络故障的信息和重新连接信息写入</p>\n</li>\n</ul>\n<p>错误日志。</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">log_error<span class=\"token operator\">=</span><span class=\"token operator\">/</span>var<span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>mysql<span class=\"token operator\">-</span>error<span class=\"token punctuation\">.</span>log\nlog_warnings<span class=\"token operator\">=</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"二进制日志\"><a href=\"#二进制日志\" class=\"headerlink\" title=\"二进制日志\"></a>二进制日志</h4><blockquote>\n<p>默认关闭，需要通过配置进行开启。binlog记录了数据库所有的ddl语句和dml语句，但不包括select语句内容，语句以事件的形式保存，描述了数据的变更顺序，binlog还包括了每个更新语句的执行时间信息。如果是DDL语句，则直接记录到binlog日志，而DML语句，必须通过事务提交才能记录到binlog日志中</p>\n</blockquote>\n<p>binlog主要用于实现mysql<strong>主从复制、数据备份、数据恢复</strong></p>\n<p>不同版本开启方式有些许<code>差异</code></p>\n<h4 id=\"通用查询日志\"><a href=\"#通用查询日志\" class=\"headerlink\" title=\"通用查询日志\"></a>通用查询日志</h4><blockquote>\n<p><strong>默认关闭，</strong>由于通用查询日志会记录用户的所有操作，其中还包含增删查改等信息，在并发操作大的环境下会产生大量的信息从而导致不必要的磁盘IO，会影响MySQL的性能的。</p>\n</blockquote>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%general_log%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>一般不建议开启，调试时候使用</p>\n<h4 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h4><blockquote>\n<p><strong>默认关闭</strong>，通过以下设置开启。记录执行时间超过<strong>long_query_time</strong>秒的所有查询，便于收集查询时间比较长的SQL语句。</p>\n</blockquote>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'%Slow_queries%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%slow_query%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'long_query_time%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>配置慢查询开启</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 开启慢查询日志</span>\nslow_query_log<span class=\"token operator\">=</span><span class=\"token keyword\">ON</span>\n<span class=\"token comment\"># 慢查询的阈值，单位秒</span>\nlong_query_time<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token comment\"># 日志记录文件</span>\n<span class=\"token comment\"># 如果没有给出file_name值， 默认为主机名，后缀为-slow.log。</span>\n<span class=\"token comment\"># 如果给出了文件名，但不是绝对路径名，文件则写入数据目录。</span>\nslow_query_log_file<span class=\"token operator\">=</span>slow_query_log<span class=\"token punctuation\">.</span>log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"MySQL数据文件\"><a href=\"#MySQL数据文件\" class=\"headerlink\" title=\"MySQL数据文件\"></a>MySQL数据文件</h3><p>查看MySQL数据文件</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%datadir%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<ul>\n<li><code>ibdata</code>文件：使用系统表空间存储表数据和索引信息，所有表共同使用一个或者多个ibdata文件</li>\n<li><code>InnoDB</code>存储引擎的数据文件<ul>\n<li>.<strong>frm</strong>文件：主要存放与表相关的数据信息，主要包括表结构的定义信息</li>\n<li>.<strong>ibd</strong>：<strong>使用独享表空间存储表</strong>数据和索引信息，一张表对应一个ibd文件。</li>\n</ul>\n</li>\n<li><code>MyISAM</code>存储引擎的数据文件<ul>\n<li><strong>.frm</strong>文件：主要存放与表相关的数据信息，主要包括表结构的定义信息</li>\n<li><strong>.myd</strong>文件：主要用来存储表数据信息。</li>\n<li><strong>.myi</strong>文件：主要用来存储表数据文件中任何索引的数据树。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL存储引擎之InnoDB\"><a href=\"#MySQL存储引擎之InnoDB\" class=\"headerlink\" title=\"MySQL存储引擎之InnoDB\"></a>MySQL存储引擎之InnoDB</h3><blockquote>\n<p>除了特殊场景，一般都选择InnoDB，支持事务，分布式事务</p>\n</blockquote>\n<h4 id=\"存储引擎种类\"><a href=\"#存储引擎种类\" class=\"headerlink\" title=\"存储引擎种类\"></a>存储引擎种类</h4><table>\n<thead>\n<tr>\n<th><strong>存储引擎</strong></th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>MyISAM</code></td>\n<td>高速引擎，拥有较高的插入，查询速度，<strong>但不支持事务</strong></td>\n</tr>\n<tr>\n<td><code>InnoDB</code></td>\n<td><strong>5.5<strong><strong>版本后</strong></strong>MySQL****的默认数据库存储引擎，支持事务和行级锁</strong>，比MyISAM处理速度稍慢</td>\n</tr>\n<tr>\n<td>ISAM</td>\n<td>MyISAM的前身，MySQL5.0以后不再默认安装</td>\n</tr>\n<tr>\n<td>MRG_MyISAM</td>\n<td>将多个表联合成一个表使用，在超大规模数据存储时很有用</td>\n</tr>\n<tr>\n<td><code>Memory</code></td>\n<td><strong>内存存储引擎，拥有极高的插入，更新和查询效率。</strong>但是会占用和数据量成正比的内存空间。只在内存上保存数据，意味着数据可能会丢失</td>\n</tr>\n<tr>\n<td>Archive</td>\n<td>将数据压缩后进行存储，非常适合存储大量的独立的，作为历史记录的数据，</td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>CSV 存储引擎是基于 CSV 格式文件存储数据(应用于跨平台的数据交换)</td>\n</tr>\n</tbody></table>\n<h4 id=\"InnoDB和MyISAM存储引擎区别\"><a href=\"#InnoDB和MyISAM存储引擎区别\" class=\"headerlink\" title=\"InnoDB和MyISAM存储引擎区别\"></a><code>InnoDB</code>和<code>MyISAM</code>存储引擎区别</h4><table>\n<thead>\n<tr>\n<th><strong>比较项</strong></th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储文件</strong></td>\n<td>.frm 表定义文件.ibd 数据文件和索引文件</td>\n<td>frm 表定义文件.myd 数据文件.myi 索引文件</td>\n</tr>\n<tr>\n<td><strong>锁</strong></td>\n<td>表锁、行锁</td>\n<td>表锁</td>\n</tr>\n<tr>\n<td><strong>事务</strong></td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td><strong>CRUD</strong></td>\n<td>读、写</td>\n<td>读多</td>\n</tr>\n<tr>\n<td><strong>索引结构</strong></td>\n<td>B+ Tree</td>\n<td>B+ Tree</td>\n</tr>\n</tbody></table>\n<h4 id=\"InnoDB架构图\"><a href=\"#InnoDB架构图\" class=\"headerlink\" title=\"InnoDB架构图\"></a>InnoDB架构图</h4><p><img src=\"http://file.hyqup.cn/img/InnoDB%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"InnoDB架构图\"></p>\n<h5 id=\"内存结构\"><a href=\"#内存结构\" class=\"headerlink\" title=\"内存结构\"></a>内存结构</h5><ol>\n<li><p>Buffer Pool 缓冲池</p>\n</li>\n<li><p>Change Buffer 修改缓冲</p>\n</li>\n<li><p>Adaptive Hash Index 自适应索引</p>\n</li>\n<li><p>Log Buffer 日志缓冲</p>\n</li>\n</ol>\n<h6 id=\"Buffer-Pool-缓冲池\"><a href=\"#Buffer-Pool-缓冲池\" class=\"headerlink\" title=\"Buffer Pool 缓冲池\"></a>Buffer Pool 缓冲池</h6><blockquote>\n<p>缓冲池Buffer Pool 用于加速数据的访问和修改，通过将热点数据缓存在内存的方法，最大限度地减少磁盘 IO，加速热点数据读写</p>\n</blockquote>\n<h6 id=\"Change-Buffer-修改缓冲\"><a href=\"#Change-Buffer-修改缓冲\" class=\"headerlink\" title=\"Change Buffer 修改缓冲\"></a>Change Buffer 修改缓冲</h6><blockquote>\n<p>Change Buffer（在 MySQL 5.6 之前叫 insert buffer，简称 ibuf ）是 InnoDB 5.5 引入的一种优化策略。<strong>Change Buffer</strong> <strong>用于加速非热点数据中二级索引的写入操作。</strong>由于二级索引数据的不连续性，导致修改二级索引时需要进行频繁的磁盘 IO 消耗大量性能，Change Buffer 缓冲对二级索引的修改操作，同时将写操作录入 redo log 中，在缓冲到一定量或系统较空闲时进行 merge 操作将修改写入磁盘中。</p>\n</blockquote>\n<h6 id=\"Adaptive-Hash-Index-自适应索引\"><a href=\"#Adaptive-Hash-Index-自适应索引\" class=\"headerlink\" title=\"Adaptive Hash Index 自适应索引\"></a>Adaptive Hash Index 自适应索引</h6><blockquote>\n<p><strong>自适应哈希索引</strong>（Adaptive Hash Index，<strong>AHI</strong>）<strong>用于实现对于热数据页的一次查询。</strong>是建立在索引之上的索引！使用聚簇索引进行<strong>数据页</strong>定位的时候需要根据索引树的高度从根节点走到叶子节点，**通常需要3 到 4 <strong>次查询才能定位到数据</strong>。InnoDB 根据对索引使用情况的分析和索引字段的分析，通过自调优Self-tuning的方式为索引页建立或者删除哈希索引。</p>\n</blockquote>\n<h6 id=\"Log-Buffer-日志缓冲\"><a href=\"#Log-Buffer-日志缓冲\" class=\"headerlink\" title=\"Log Buffer 日志缓冲\"></a>Log Buffer 日志缓冲</h6><blockquote>\n<p><strong>InnoDB</strong> <strong>使用</strong> <strong>Log Buffer</strong> <strong>来缓冲日志文件的写入操作。</strong>内存写入加上日志文件顺序写的特点，使得InnoDB 日志写入性能极高。</p>\n</blockquote>\n<h5 id=\"磁盘结构\"><a href=\"#磁盘结构\" class=\"headerlink\" title=\"磁盘结构\"></a>磁盘结构</h5><p><strong>表空间</strong></p>\n<p>在磁盘中，InnoDB 将所有数据都逻辑地存放在一个空间中，称为表空间（Tablespace）。表空间由段（Segment）、区（extent）、页（Page）组成</p>\n<ul>\n<li><p>开启独立表空间<code>innodb_file_per_table=1</code>每张表的数据都会存储到一个独立表空间，即 表名.ibd 文件</p>\n</li>\n<li><p>关闭独占表空间<code>innodb_file_per_table=0</code>，则所有基于InnoDB存储引擎的表数据都会记录到系统表空间，即 ibdata1 文件</p>\n</li>\n</ul>\n<p>表空间是 InnoDB 物理存储中的最高层，目前的表空间类别包括：</p>\n<ul>\n<li><p>系统表空间（System Tablespace）</p>\n</li>\n<li><p>独立表空间（File-per-table Tablespace）</p>\n</li>\n<li><p>通用表空间（General Tablespace）</p>\n</li>\n<li><p>回滚表空间（Undo Tablespace）</p>\n</li>\n<li><p>临时表空间（The Temporary Tablespace）</p>\n</li>\n</ul>\n<h6 id=\"系统表空间\"><a href=\"#系统表空间\" class=\"headerlink\" title=\"系统表空间\"></a>系统表空间</h6><blockquote>\n<p><strong>系统表空间是</strong> <strong>InnoDB</strong> <strong>数据字典、双写缓冲、修改缓冲和回滚日志的存储位置</strong>，如果关闭独立表空间，它将存储所有表数据和索引。</p>\n</blockquote>\n<h6 id=\"独立表空间\"><a href=\"#独立表空间\" class=\"headerlink\" title=\"独立表空间\"></a>独立表空间</h6><blockquote>\n<p><strong>独立表空间用于存放每个表的数据和索引。</strong>其他类型的信息，如：回滚日志、双写缓冲区、系统事务信息、修改缓冲等仍存放于系统表空间内。因此即使用了独立表空间，系统表空间也会不断增长。在5.7版本中默认开启</p>\n</blockquote>\n<h6 id=\"通用表空间\"><a href=\"#通用表空间\" class=\"headerlink\" title=\"通用表空间\"></a>通用表空间</h6><blockquote>\n<p>通用表空间（General Tablespace）是一个由 CREATE TABLESPACE 命令创建的共享表空间，创建时必须指定该表空间名称和 ibd 文件位置，ibd 文件可以放置于任何 MySQL 有权限的地方。该表空间内可以容纳多张数据表，同时在创建时可以指定该表空间所使用的默认引擎。</p>\n</blockquote>\n<p><strong>通用表空间存在的目的是为了在系统表空间与独立表空间之间作出平衡</strong></p>\n<h6 id=\"回滚表空间\"><a href=\"#回滚表空间\" class=\"headerlink\" title=\"回滚表空间\"></a>回滚表空间</h6><blockquote>\n<p>Undo TableSpace 用于存放一个或多个 undo log 文件。<strong>默认</strong> <strong>undo log</strong> <strong>存储在系统表空间中，</strong>MySql5.7中支持自定义Undo log表空间并存储所有 <strong>undo log</strong>。一旦用户定义了 Undo Tablespace，则系统表空间中的 Undo log 区域将失效。对于 Undo Tablespace 的启用必须在 MySQL 初始化前设置，Undo Tablespace 默认大小为 10MB。Undo Tablespace 中的 Undo log 表可以进行 truncate 操作。</p>\n</blockquote>\n<h5 id=\"存储架构\"><a href=\"#存储架构\" class=\"headerlink\" title=\"存储架构\"></a>存储架构</h5><h6 id=\"段【Segment】\"><a href=\"#段【Segment】\" class=\"headerlink\" title=\"段【Segment】\"></a>段【Segment】</h6><ul>\n<li>表空间由各个段组成，段类型分<code>数据段</code>（叶子节点）、<code>索引段</code>（非叶子节点）、<code>回滚段</code></li>\n<li>MySQL的索引数据结构是B+树，这个树有叶子节点和非叶子节点</li>\n<li>一个段包含多个区，至少有一个区，段扩展的最小单位是区</li>\n</ul>\n<h6 id=\"区【Extent】\"><a href=\"#区【Extent】\" class=\"headerlink\" title=\"区【Extent】\"></a>区【Extent】</h6><ul>\n<li>区是由连续的页组成的空间，大小固定为 <code>1MB</code></li>\n<li>默认情况下，一个区里有64个页</li>\n<li>为了保证区的连续性，InnoDB一次会从磁盘申请4-5个区</li>\n</ul>\n<h6 id=\"页【Page】\"><a href=\"#页【Page】\" class=\"headerlink\" title=\"页【Page】\"></a>页【Page】</h6><ul>\n<li><strong>页是 InnoDB 的基本存储单位</strong>，页默认大小是16K（可配置innodb_page_size），InnoDB 首次加载后便无法更改</li>\n<li>操作系统读写磁盘最小单位是页，4K</li>\n<li>磁盘存储数据量最小单位512 byte</li>\n</ul>\n<h6 id=\"行（Row）\"><a href=\"#行（Row）\" class=\"headerlink\" title=\"行（Row）\"></a>行（Row）</h6><ul>\n<li>InnoDB的数据是以行为单位存储，一个页中包含多个行</li>\n<li>InnoDB提供4种行格式：Compact、Redundant、Dynamic和Compressed</li>\n<li>默认行格式Dynamic</li>\n</ul>\n<h5 id=\"内存中的数据如何进入磁盘？\"><a href=\"#内存中的数据如何进入磁盘？\" class=\"headerlink\" title=\"内存中的数据如何进入磁盘？\"></a>内存中的数据如何进入磁盘？</h5><h6 id=\"脏页落盘\"><a href=\"#脏页落盘\" class=\"headerlink\" title=\"脏页落盘\"></a>脏页落盘</h6><p><strong>什么是脏页？</strong></p>\n<blockquote>\n<p>对于数据库中页的<strong>修改操作</strong>，则首先修改在缓冲区中的页，缓冲区中的页与磁盘中的页数据不一致，所以称缓冲区中的页为**<code>脏页</code>**</p>\n</blockquote>\n<p><strong>脏页如何进入到磁盘？</strong></p>\n<ul>\n<li>脏页从缓冲区刷新到磁盘，不是每次页更新之后触发，而是通过**<code>CheckPoint机制</code>**刷新磁盘</li>\n</ul>\n<h6 id=\"数据安全性保证-重点\"><a href=\"#数据安全性保证-重点\" class=\"headerlink\" title=\"数据安全性保证(重点)\"></a>数据安全性保证(重点)</h6><ul>\n<li><p><strong>Write Ahead Log（WAL）</strong>：<strong>要求数据的变更写入到磁盘前，首先必须将内存中的日志</strong></p>\n<p><strong>写入到磁盘</strong>，InnoDB就是<code>redo log</code></p>\n</li>\n<li><p><strong>Force Log at Commit</strong>：<strong>当事务提交时，所有事务产生的日志都必须刷到磁盘</strong></p>\n</li>\n</ul>\n<h6 id=\"怎么确保日志就能安全的写入系统\"><a href=\"#怎么确保日志就能安全的写入系统\" class=\"headerlink\" title=\"怎么确保日志就能安全的写入系统\"></a><strong>怎么确保日志就能安全的写入系统</strong></h6><p>为了确保每次日志都写入到redo日志文件，在每次将redo日志缓冲写入redo日志后，调用一次</p>\n<p>**<code>fsync</code>**操作，将缓冲文件从文件系统缓存中真正写入磁盘</p>\n<p>与数据直接写入磁盘不同的是</p>\n<ul>\n<li>redo日志不会记录完整的一页数据</li>\n<li>日志是顺序写入，而数据是随机写入。顺序写入效率更高</li>\n<li>可以通过 innodb_flush_log_at_trx_commit 来控制redo日志刷新到磁盘的策略<ul>\n<li><strong>为0时：</strong>每秒写入，与事务无关<ul>\n<li>最多丢失1秒的事务操作</li>\n<li>写入效率最高，安全性最低</li>\n</ul>\n</li>\n<li><strong>为1时：</strong>事务提交，写入磁盘<ul>\n<li>不会丢失数据</li>\n<li>写入效率最低，安全性最高</li>\n</ul>\n</li>\n<li><strong>为2时：</strong>事务提交，写入OS Buffer<ul>\n<li>数据安全性依赖于系统，最多丢1秒事务操作</li>\n<li>写入效率居中，安全性居中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"CheckPoint机制\"><a href=\"#CheckPoint机制\" class=\"headerlink\" title=\"CheckPoint机制\"></a><strong>CheckPoint机制</strong></h6><blockquote>\n<p>它是将缓冲池中的脏页数据刷到磁盘上的机制，决定脏页落盘的时机、条件和脏页的选择等</p>\n</blockquote>\n<h6 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h6><p><strong>sharp checkpoint：</strong>关闭数据库时将脏页全部刷新到磁盘中</p>\n<p><strong>fuzzy checkpoint：默认方式，</strong>在运行时选择不同时机将脏页刷盘，只刷新部分脏页</p>\n<ul>\n<li><strong>Master Thread Checkpoint：</strong>固定频率刷新部分脏页到磁盘，异步操作不会阻塞用户线程</li>\n<li><strong>FLUSH_LRU_LIST Checkpoint：</strong>缓冲池淘汰非热点Page，如果该Page是脏页会执行CheckPoint</li>\n<li><strong>Async&#x2F;Sync Flush Checkpoint：</strong>redo日志不可用时，强制脏页落盘，有了前两个这种一般不会发生</li>\n<li><strong>Dirty Page too much Checkpoint：</strong>脏页占比太多强制进行刷盘，阈值75%</li>\n</ul>\n<h6 id=\"Double-Write机制\"><a href=\"#Double-Write机制\" class=\"headerlink\" title=\"Double Write机制\"></a><strong>Double Write机制</strong></h6><blockquote>\n<p>数据库准备刷新脏页时，将16KB的刷入磁盘，但当写入了8KB时，就宕机了这种只写了部分没完成的情况被称为<strong>写失效Partial Page Write</strong></p>\n</blockquote>\n<p><strong>Double Write</strong>其实就是写两次，在修改记录redo日志前，先做个副本留个“备胎”</p>\n","more":"<h3 id=\"MySQL逻辑架构图\"><a href=\"#MySQL逻辑架构图\" class=\"headerlink\" title=\"MySQL逻辑架构图\"></a>MySQL逻辑架构图</h3><p><img src=\"E:\\git_repo\\hyq965672903.github.io\\source_posts\\MySQL进阶-一-架构篇.assets\\MySQL逻辑架构图.png\" alt=\"MySQL逻辑架构图\"></p>\n<h3 id=\"MySQL日志文件\"><a href=\"#MySQL日志文件\" class=\"headerlink\" title=\"MySQL日志文件\"></a>MySQL日志文件</h3><p>MySQL是通过文件系统对数据索引后进行存储的，MySQL从物理结构上可以分为<strong>日志文件</strong>和<strong>数据及索引</strong></p>\n<p><strong>文件</strong>。MySQL在Linux中的数据索引文件和日志文件通常放在&#x2F;var&#x2F;lib&#x2F;mysql目录下。MySQL通过日志记</p>\n<p>录了数据库操作信息和错误信息。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'log_%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"常用日志文件\"><a href=\"#常用日志文件\" class=\"headerlink\" title=\"常用日志文件\"></a>常用日志文件</h4><ul>\n<li><p>错误日志：&#x2F;var&#x2F;log&#x2F;mysql-error.log</p>\n</li>\n<li><p>二进制日志：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</p>\n</li>\n<li><p>查询日志：general_query.log</p>\n</li>\n<li><p>慢查询日志：slow_query_log.log</p>\n</li>\n<li><p>事务重做日志：redo log</p>\n</li>\n<li><p>中继日志：relay log</p>\n</li>\n</ul>\n<h4 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><blockquote>\n<p>默认开启，错误日志记录了运行过程中遇到的所有严重的错误信息，以及 MySQL每次启动和关闭的详细信息。错误日志所记录的信息是可以通过log_error和log_warnings配置来定义的。从5.5.7以后不能关闭错误日志</p>\n</blockquote>\n<p>log_error：指定错误日志存储位置</p>\n<p>log-warnings：是否将警告信息输出到错误日志中。</p>\n<ul>\n<li><p>log_warnings 为0， 表示不记录告警信息。</p>\n</li>\n<li><p>log_warnings 为1， 表示告警信息写入错误日志。</p>\n</li>\n<li><p>log_warnings 大于1， 表示各类告警信息，例如：有关网络故障的信息和重新连接信息写入</p>\n</li>\n</ul>\n<p>错误日志。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">log_error<span class=\"token operator\">=</span><span class=\"token operator\">/</span>var<span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>mysql<span class=\"token operator\">-</span>error<span class=\"token punctuation\">.</span>log\nlog_warnings<span class=\"token operator\">=</span><span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"二进制日志\"><a href=\"#二进制日志\" class=\"headerlink\" title=\"二进制日志\"></a>二进制日志</h4><blockquote>\n<p>默认关闭，需要通过配置进行开启。binlog记录了数据库所有的ddl语句和dml语句，但不包括select语句内容，语句以事件的形式保存，描述了数据的变更顺序，binlog还包括了每个更新语句的执行时间信息。如果是DDL语句，则直接记录到binlog日志，而DML语句，必须通过事务提交才能记录到binlog日志中</p>\n</blockquote>\n<p>binlog主要用于实现mysql<strong>主从复制、数据备份、数据恢复</strong></p>\n<p>不同版本开启方式有些许<code>差异</code></p>\n<h4 id=\"通用查询日志\"><a href=\"#通用查询日志\" class=\"headerlink\" title=\"通用查询日志\"></a>通用查询日志</h4><blockquote>\n<p><strong>默认关闭，</strong>由于通用查询日志会记录用户的所有操作，其中还包含增删查改等信息，在并发操作大的环境下会产生大量的信息从而导致不必要的磁盘IO，会影响MySQL的性能的。</p>\n</blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%general_log%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>一般不建议开启，调试时候使用</p>\n<h4 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h4><blockquote>\n<p><strong>默认关闭</strong>，通过以下设置开启。记录执行时间超过<strong>long_query_time</strong>秒的所有查询，便于收集查询时间比较长的SQL语句。</p>\n</blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'%Slow_queries%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%slow_query%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'long_query_time%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>配置慢查询开启</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\"># 开启慢查询日志</span>\nslow_query_log<span class=\"token operator\">=</span><span class=\"token keyword\">ON</span>\n<span class=\"token comment\"># 慢查询的阈值，单位秒</span>\nlong_query_time<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token comment\"># 日志记录文件</span>\n<span class=\"token comment\"># 如果没有给出file_name值， 默认为主机名，后缀为-slow.log。</span>\n<span class=\"token comment\"># 如果给出了文件名，但不是绝对路径名，文件则写入数据目录。</span>\nslow_query_log_file<span class=\"token operator\">=</span>slow_query_log<span class=\"token punctuation\">.</span>log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"MySQL数据文件\"><a href=\"#MySQL数据文件\" class=\"headerlink\" title=\"MySQL数据文件\"></a>MySQL数据文件</h3><p>查看MySQL数据文件</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%datadir%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>ibdata</code>文件：使用系统表空间存储表数据和索引信息，所有表共同使用一个或者多个ibdata文件</li>\n<li><code>InnoDB</code>存储引擎的数据文件<ul>\n<li>.<strong>frm</strong>文件：主要存放与表相关的数据信息，主要包括表结构的定义信息</li>\n<li>.<strong>ibd</strong>：<strong>使用独享表空间存储表</strong>数据和索引信息，一张表对应一个ibd文件。</li>\n</ul>\n</li>\n<li><code>MyISAM</code>存储引擎的数据文件<ul>\n<li><strong>.frm</strong>文件：主要存放与表相关的数据信息，主要包括表结构的定义信息</li>\n<li><strong>.myd</strong>文件：主要用来存储表数据信息。</li>\n<li><strong>.myi</strong>文件：主要用来存储表数据文件中任何索引的数据树。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL存储引擎之InnoDB\"><a href=\"#MySQL存储引擎之InnoDB\" class=\"headerlink\" title=\"MySQL存储引擎之InnoDB\"></a>MySQL存储引擎之InnoDB</h3><blockquote>\n<p>除了特殊场景，一般都选择InnoDB，支持事务，分布式事务</p>\n</blockquote>\n<h4 id=\"存储引擎种类\"><a href=\"#存储引擎种类\" class=\"headerlink\" title=\"存储引擎种类\"></a>存储引擎种类</h4><table>\n<thead>\n<tr>\n<th><strong>存储引擎</strong></th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>MyISAM</code></td>\n<td>高速引擎，拥有较高的插入，查询速度，<strong>但不支持事务</strong></td>\n</tr>\n<tr>\n<td><code>InnoDB</code></td>\n<td><strong>5.5<strong><strong>版本后</strong></strong>MySQL****的默认数据库存储引擎，支持事务和行级锁</strong>，比MyISAM处理速度稍慢</td>\n</tr>\n<tr>\n<td>ISAM</td>\n<td>MyISAM的前身，MySQL5.0以后不再默认安装</td>\n</tr>\n<tr>\n<td>MRG_MyISAM</td>\n<td>将多个表联合成一个表使用，在超大规模数据存储时很有用</td>\n</tr>\n<tr>\n<td><code>Memory</code></td>\n<td><strong>内存存储引擎，拥有极高的插入，更新和查询效率。</strong>但是会占用和数据量成正比的内存空间。只在内存上保存数据，意味着数据可能会丢失</td>\n</tr>\n<tr>\n<td>Archive</td>\n<td>将数据压缩后进行存储，非常适合存储大量的独立的，作为历史记录的数据，</td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>CSV 存储引擎是基于 CSV 格式文件存储数据(应用于跨平台的数据交换)</td>\n</tr>\n</tbody></table>\n<h4 id=\"InnoDB和MyISAM存储引擎区别\"><a href=\"#InnoDB和MyISAM存储引擎区别\" class=\"headerlink\" title=\"InnoDB和MyISAM存储引擎区别\"></a><code>InnoDB</code>和<code>MyISAM</code>存储引擎区别</h4><table>\n<thead>\n<tr>\n<th><strong>比较项</strong></th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储文件</strong></td>\n<td>.frm 表定义文件.ibd 数据文件和索引文件</td>\n<td>frm 表定义文件.myd 数据文件.myi 索引文件</td>\n</tr>\n<tr>\n<td><strong>锁</strong></td>\n<td>表锁、行锁</td>\n<td>表锁</td>\n</tr>\n<tr>\n<td><strong>事务</strong></td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td><strong>CRUD</strong></td>\n<td>读、写</td>\n<td>读多</td>\n</tr>\n<tr>\n<td><strong>索引结构</strong></td>\n<td>B+ Tree</td>\n<td>B+ Tree</td>\n</tr>\n</tbody></table>\n<h4 id=\"InnoDB架构图\"><a href=\"#InnoDB架构图\" class=\"headerlink\" title=\"InnoDB架构图\"></a>InnoDB架构图</h4><p><img src=\"http://file.hyqup.cn/img/InnoDB%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"InnoDB架构图\"></p>\n<h5 id=\"内存结构\"><a href=\"#内存结构\" class=\"headerlink\" title=\"内存结构\"></a>内存结构</h5><ol>\n<li><p>Buffer Pool 缓冲池</p>\n</li>\n<li><p>Change Buffer 修改缓冲</p>\n</li>\n<li><p>Adaptive Hash Index 自适应索引</p>\n</li>\n<li><p>Log Buffer 日志缓冲</p>\n</li>\n</ol>\n<h6 id=\"Buffer-Pool-缓冲池\"><a href=\"#Buffer-Pool-缓冲池\" class=\"headerlink\" title=\"Buffer Pool 缓冲池\"></a>Buffer Pool 缓冲池</h6><blockquote>\n<p>缓冲池Buffer Pool 用于加速数据的访问和修改，通过将热点数据缓存在内存的方法，最大限度地减少磁盘 IO，加速热点数据读写</p>\n</blockquote>\n<h6 id=\"Change-Buffer-修改缓冲\"><a href=\"#Change-Buffer-修改缓冲\" class=\"headerlink\" title=\"Change Buffer 修改缓冲\"></a>Change Buffer 修改缓冲</h6><blockquote>\n<p>Change Buffer（在 MySQL 5.6 之前叫 insert buffer，简称 ibuf ）是 InnoDB 5.5 引入的一种优化策略。<strong>Change Buffer</strong> <strong>用于加速非热点数据中二级索引的写入操作。</strong>由于二级索引数据的不连续性，导致修改二级索引时需要进行频繁的磁盘 IO 消耗大量性能，Change Buffer 缓冲对二级索引的修改操作，同时将写操作录入 redo log 中，在缓冲到一定量或系统较空闲时进行 merge 操作将修改写入磁盘中。</p>\n</blockquote>\n<h6 id=\"Adaptive-Hash-Index-自适应索引\"><a href=\"#Adaptive-Hash-Index-自适应索引\" class=\"headerlink\" title=\"Adaptive Hash Index 自适应索引\"></a>Adaptive Hash Index 自适应索引</h6><blockquote>\n<p><strong>自适应哈希索引</strong>（Adaptive Hash Index，<strong>AHI</strong>）<strong>用于实现对于热数据页的一次查询。</strong>是建立在索引之上的索引！使用聚簇索引进行<strong>数据页</strong>定位的时候需要根据索引树的高度从根节点走到叶子节点，**通常需要3 到 4 <strong>次查询才能定位到数据</strong>。InnoDB 根据对索引使用情况的分析和索引字段的分析，通过自调优Self-tuning的方式为索引页建立或者删除哈希索引。</p>\n</blockquote>\n<h6 id=\"Log-Buffer-日志缓冲\"><a href=\"#Log-Buffer-日志缓冲\" class=\"headerlink\" title=\"Log Buffer 日志缓冲\"></a>Log Buffer 日志缓冲</h6><blockquote>\n<p><strong>InnoDB</strong> <strong>使用</strong> <strong>Log Buffer</strong> <strong>来缓冲日志文件的写入操作。</strong>内存写入加上日志文件顺序写的特点，使得InnoDB 日志写入性能极高。</p>\n</blockquote>\n<h5 id=\"磁盘结构\"><a href=\"#磁盘结构\" class=\"headerlink\" title=\"磁盘结构\"></a>磁盘结构</h5><p><strong>表空间</strong></p>\n<p>在磁盘中，InnoDB 将所有数据都逻辑地存放在一个空间中，称为表空间（Tablespace）。表空间由段（Segment）、区（extent）、页（Page）组成</p>\n<ul>\n<li><p>开启独立表空间<code>innodb_file_per_table=1</code>每张表的数据都会存储到一个独立表空间，即 表名.ibd 文件</p>\n</li>\n<li><p>关闭独占表空间<code>innodb_file_per_table=0</code>，则所有基于InnoDB存储引擎的表数据都会记录到系统表空间，即 ibdata1 文件</p>\n</li>\n</ul>\n<p>表空间是 InnoDB 物理存储中的最高层，目前的表空间类别包括：</p>\n<ul>\n<li><p>系统表空间（System Tablespace）</p>\n</li>\n<li><p>独立表空间（File-per-table Tablespace）</p>\n</li>\n<li><p>通用表空间（General Tablespace）</p>\n</li>\n<li><p>回滚表空间（Undo Tablespace）</p>\n</li>\n<li><p>临时表空间（The Temporary Tablespace）</p>\n</li>\n</ul>\n<h6 id=\"系统表空间\"><a href=\"#系统表空间\" class=\"headerlink\" title=\"系统表空间\"></a>系统表空间</h6><blockquote>\n<p><strong>系统表空间是</strong> <strong>InnoDB</strong> <strong>数据字典、双写缓冲、修改缓冲和回滚日志的存储位置</strong>，如果关闭独立表空间，它将存储所有表数据和索引。</p>\n</blockquote>\n<h6 id=\"独立表空间\"><a href=\"#独立表空间\" class=\"headerlink\" title=\"独立表空间\"></a>独立表空间</h6><blockquote>\n<p><strong>独立表空间用于存放每个表的数据和索引。</strong>其他类型的信息，如：回滚日志、双写缓冲区、系统事务信息、修改缓冲等仍存放于系统表空间内。因此即使用了独立表空间，系统表空间也会不断增长。在5.7版本中默认开启</p>\n</blockquote>\n<h6 id=\"通用表空间\"><a href=\"#通用表空间\" class=\"headerlink\" title=\"通用表空间\"></a>通用表空间</h6><blockquote>\n<p>通用表空间（General Tablespace）是一个由 CREATE TABLESPACE 命令创建的共享表空间，创建时必须指定该表空间名称和 ibd 文件位置，ibd 文件可以放置于任何 MySQL 有权限的地方。该表空间内可以容纳多张数据表，同时在创建时可以指定该表空间所使用的默认引擎。</p>\n</blockquote>\n<p><strong>通用表空间存在的目的是为了在系统表空间与独立表空间之间作出平衡</strong></p>\n<h6 id=\"回滚表空间\"><a href=\"#回滚表空间\" class=\"headerlink\" title=\"回滚表空间\"></a>回滚表空间</h6><blockquote>\n<p>Undo TableSpace 用于存放一个或多个 undo log 文件。<strong>默认</strong> <strong>undo log</strong> <strong>存储在系统表空间中，</strong>MySql5.7中支持自定义Undo log表空间并存储所有 <strong>undo log</strong>。一旦用户定义了 Undo Tablespace，则系统表空间中的 Undo log 区域将失效。对于 Undo Tablespace 的启用必须在 MySQL 初始化前设置，Undo Tablespace 默认大小为 10MB。Undo Tablespace 中的 Undo log 表可以进行 truncate 操作。</p>\n</blockquote>\n<h5 id=\"存储架构\"><a href=\"#存储架构\" class=\"headerlink\" title=\"存储架构\"></a>存储架构</h5><h6 id=\"段【Segment】\"><a href=\"#段【Segment】\" class=\"headerlink\" title=\"段【Segment】\"></a>段【Segment】</h6><ul>\n<li>表空间由各个段组成，段类型分<code>数据段</code>（叶子节点）、<code>索引段</code>（非叶子节点）、<code>回滚段</code></li>\n<li>MySQL的索引数据结构是B+树，这个树有叶子节点和非叶子节点</li>\n<li>一个段包含多个区，至少有一个区，段扩展的最小单位是区</li>\n</ul>\n<h6 id=\"区【Extent】\"><a href=\"#区【Extent】\" class=\"headerlink\" title=\"区【Extent】\"></a>区【Extent】</h6><ul>\n<li>区是由连续的页组成的空间，大小固定为 <code>1MB</code></li>\n<li>默认情况下，一个区里有64个页</li>\n<li>为了保证区的连续性，InnoDB一次会从磁盘申请4-5个区</li>\n</ul>\n<h6 id=\"页【Page】\"><a href=\"#页【Page】\" class=\"headerlink\" title=\"页【Page】\"></a>页【Page】</h6><ul>\n<li><strong>页是 InnoDB 的基本存储单位</strong>，页默认大小是16K（可配置innodb_page_size），InnoDB 首次加载后便无法更改</li>\n<li>操作系统读写磁盘最小单位是页，4K</li>\n<li>磁盘存储数据量最小单位512 byte</li>\n</ul>\n<h6 id=\"行（Row）\"><a href=\"#行（Row）\" class=\"headerlink\" title=\"行（Row）\"></a>行（Row）</h6><ul>\n<li>InnoDB的数据是以行为单位存储，一个页中包含多个行</li>\n<li>InnoDB提供4种行格式：Compact、Redundant、Dynamic和Compressed</li>\n<li>默认行格式Dynamic</li>\n</ul>\n<h5 id=\"内存中的数据如何进入磁盘？\"><a href=\"#内存中的数据如何进入磁盘？\" class=\"headerlink\" title=\"内存中的数据如何进入磁盘？\"></a>内存中的数据如何进入磁盘？</h5><h6 id=\"脏页落盘\"><a href=\"#脏页落盘\" class=\"headerlink\" title=\"脏页落盘\"></a>脏页落盘</h6><p><strong>什么是脏页？</strong></p>\n<blockquote>\n<p>对于数据库中页的<strong>修改操作</strong>，则首先修改在缓冲区中的页，缓冲区中的页与磁盘中的页数据不一致，所以称缓冲区中的页为**<code>脏页</code>**</p>\n</blockquote>\n<p><strong>脏页如何进入到磁盘？</strong></p>\n<ul>\n<li>脏页从缓冲区刷新到磁盘，不是每次页更新之后触发，而是通过**<code>CheckPoint机制</code>**刷新磁盘</li>\n</ul>\n<h6 id=\"数据安全性保证-重点\"><a href=\"#数据安全性保证-重点\" class=\"headerlink\" title=\"数据安全性保证(重点)\"></a>数据安全性保证(重点)</h6><ul>\n<li><p><strong>Write Ahead Log（WAL）</strong>：<strong>要求数据的变更写入到磁盘前，首先必须将内存中的日志</strong></p>\n<p><strong>写入到磁盘</strong>，InnoDB就是<code>redo log</code></p>\n</li>\n<li><p><strong>Force Log at Commit</strong>：<strong>当事务提交时，所有事务产生的日志都必须刷到磁盘</strong></p>\n</li>\n</ul>\n<h6 id=\"怎么确保日志就能安全的写入系统\"><a href=\"#怎么确保日志就能安全的写入系统\" class=\"headerlink\" title=\"怎么确保日志就能安全的写入系统\"></a><strong>怎么确保日志就能安全的写入系统</strong></h6><p>为了确保每次日志都写入到redo日志文件，在每次将redo日志缓冲写入redo日志后，调用一次</p>\n<p>**<code>fsync</code>**操作，将缓冲文件从文件系统缓存中真正写入磁盘</p>\n<p>与数据直接写入磁盘不同的是</p>\n<ul>\n<li>redo日志不会记录完整的一页数据</li>\n<li>日志是顺序写入，而数据是随机写入。顺序写入效率更高</li>\n<li>可以通过 innodb_flush_log_at_trx_commit 来控制redo日志刷新到磁盘的策略<ul>\n<li><strong>为0时：</strong>每秒写入，与事务无关<ul>\n<li>最多丢失1秒的事务操作</li>\n<li>写入效率最高，安全性最低</li>\n</ul>\n</li>\n<li><strong>为1时：</strong>事务提交，写入磁盘<ul>\n<li>不会丢失数据</li>\n<li>写入效率最低，安全性最高</li>\n</ul>\n</li>\n<li><strong>为2时：</strong>事务提交，写入OS Buffer<ul>\n<li>数据安全性依赖于系统，最多丢1秒事务操作</li>\n<li>写入效率居中，安全性居中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"CheckPoint机制\"><a href=\"#CheckPoint机制\" class=\"headerlink\" title=\"CheckPoint机制\"></a><strong>CheckPoint机制</strong></h6><blockquote>\n<p>它是将缓冲池中的脏页数据刷到磁盘上的机制，决定脏页落盘的时机、条件和脏页的选择等</p>\n</blockquote>\n<h6 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h6><p><strong>sharp checkpoint：</strong>关闭数据库时将脏页全部刷新到磁盘中</p>\n<p><strong>fuzzy checkpoint：默认方式，</strong>在运行时选择不同时机将脏页刷盘，只刷新部分脏页</p>\n<ul>\n<li><strong>Master Thread Checkpoint：</strong>固定频率刷新部分脏页到磁盘，异步操作不会阻塞用户线程</li>\n<li><strong>FLUSH_LRU_LIST Checkpoint：</strong>缓冲池淘汰非热点Page，如果该Page是脏页会执行CheckPoint</li>\n<li><strong>Async&#x2F;Sync Flush Checkpoint：</strong>redo日志不可用时，强制脏页落盘，有了前两个这种一般不会发生</li>\n<li><strong>Dirty Page too much Checkpoint：</strong>脏页占比太多强制进行刷盘，阈值75%</li>\n</ul>\n<h6 id=\"Double-Write机制\"><a href=\"#Double-Write机制\" class=\"headerlink\" title=\"Double Write机制\"></a><strong>Double Write机制</strong></h6><blockquote>\n<p>数据库准备刷新脏页时，将16KB的刷入磁盘，但当写入了8KB时，就宕机了这种只写了部分没完成的情况被称为<strong>写失效Partial Page Write</strong></p>\n</blockquote>\n<p><strong>Double Write</strong>其实就是写两次，在修改记录redo日志前，先做个副本留个“备胎”</p>","categories":[],"tags":[]}