{"title":"Java并发多线程与高并发(四)-安全发布对象","slug":"Java并发多线程与高并发(四)-安全发布对象","date":"2021-04-28T15:40:36.000Z","updated":"2024-04-22T07:21:14.887Z","comments":true,"path":"api/articles/Java并发多线程与高并发(四)-安全发布对象.json","excerpt":"安全发布对象，讲述在编码中我们对公共资源正确发布来保证线程安全，且简述使用几种单例模式来发布对象","covers":null,"content":"<p>安全发布对象，讲述在编码中我们对公共资源正确发布来保证线程安全，且简述使用几种单例模式来发布对象</p>\n<span id=\"more\"></span>\n\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>发布对象：</strong>是一个对象能够被当前范围之外的代码嗦使用</p>\n<p><strong>对象溢出：</strong>一种错误的发布。当一个对象还没有构造完成时，就使它被其它线程所见</p>\n<h2 id=\"四种安全的发布对象\"><a href=\"#四种安全的发布对象\" class=\"headerlink\" title=\"四种安全的发布对象\"></a>四种安全的发布对象</h2><ul>\n<li>在静态初始化函数中初始化一个对象引用 (JVM 在静态初始化的时候会保证线程安全)</li>\n<li>将对象的引用保存到 volatile 类型的域或者 AtomicReferance 中</li>\n<li>将对象的引用保存到某个正确构造对象的的 final 类型域中</li>\n<li>将对象的引用保存到一个由锁保护的域中</li>\n</ul>\n<h2 id=\"线程安全的单例模式的写法\"><a href=\"#线程安全的单例模式的写法\" class=\"headerlink\" title=\"线程安全的单例模式的写法\"></a>线程安全的单例模式的写法</h2><h3 id=\"饿汉式（类加载的时候就创建好）\"><a href=\"#饿汉式（类加载的时候就创建好）\" class=\"headerlink\" title=\"饿汉式（类加载的时候就创建好）\"></a>饿汉式（类加载的时候就创建好）</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/13\n * @description: 饿汉式（类加载的时候就创建好）\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonExample1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//   私有构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample1</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonExample1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>备注：饿汉模式还可以通过静态块来初始化，<strong>需要注意静态域和静态代码块的顺序</strong>（决定先加载对象还是先加载静态代码块初始对象，如果静态代码块在前就会出现空指针），这里就不演示了</p>\n<h3 id=\"懒汉式（需要的时候才去创建）【不推荐的写法】\"><a href=\"#懒汉式（需要的时候才去创建）【不推荐的写法】\" class=\"headerlink\" title=\"懒汉式（需要的时候才去创建）【不推荐的写法】\"></a>懒汉式（需要的时候才去创建）【不推荐的写法】</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/13\n * @description: 懒汉式（需要的时候才去创建）【不推荐的写法】\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonExample2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//  私有构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample2</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 统一时间只有一个线程访问,虽然是线程安全的,但不推荐\n     * 原因：加锁在方法上容易造成资源浪费\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">SingletonExample2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonExample2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n\n\n<h3 id=\"懒汉式（需要的时候才去创建）-【推荐的写法】\"><a href=\"#懒汉式（需要的时候才去创建）-【推荐的写法】\" class=\"headerlink\" title=\"懒汉式（需要的时候才去创建）-【推荐的写法】\"></a>懒汉式（需要的时候才去创建）-【推荐的写法】</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/13\n * @description: 懒汉式（需要的时候才去创建）-【推荐的写法】\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonExample3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//  私有构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//    volatile+双重检测机制=》禁止指令重排序</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample3</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 1、双重检测机制\n     * 2、同步锁\n     * 3、禁止指令重排\n     *\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonExample3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonExample3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"为什么需要使用volatile\"><a href=\"#为什么需要使用volatile\" class=\"headerlink\" title=\"为什么需要使用volatile\"></a>为什么需要使用volatile</h4><p>&#x2F;&#x2F; instance &#x3D; new SingletonExample3();</p>\n<p>cpu的指令，执行new对象的时候分为三步</p>\n<ol>\n<li>memory&#x3D;allocate() 分配对象内存空间</li>\n<li>ctorInstance() 初始化对象</li>\n<li>instance&#x3D;memory 设置instance指向刚分配的内存</li>\n</ol>\n<p>多线程情况下会出问题</p>\n<p>JVM和CPU 发生指令重排 变成1  3 2，因为3和2的顺序不重要</p>\n<p>解决办法：使用volatile 禁止指令重排</p>\n<h3 id=\"枚举模式：最安全\"><a href=\"#枚举模式：最安全\" class=\"headerlink\" title=\"枚举模式：最安全\"></a>枚举模式：最安全</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/13\n * @description: 枚举单例（JVM 保证）-【推荐的写法】\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonExample4</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//  私有构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 1、既能保证整个对象初始化一次\n     * 2、又能保证在使用的使用的时候才去初始化\n     *\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample4</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample4</span> singleton<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonExample4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">SingletonExample4</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n\n\n","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>发布对象：</strong>是一个对象能够被当前范围之外的代码嗦使用</p>\n<p><strong>对象溢出：</strong>一种错误的发布。当一个对象还没有构造完成时，就使它被其它线程所见</p>\n<h2 id=\"四种安全的发布对象\"><a href=\"#四种安全的发布对象\" class=\"headerlink\" title=\"四种安全的发布对象\"></a>四种安全的发布对象</h2><ul>\n<li>在静态初始化函数中初始化一个对象引用 (JVM 在静态初始化的时候会保证线程安全)</li>\n<li>将对象的引用保存到 volatile 类型的域或者 AtomicReferance 中</li>\n<li>将对象的引用保存到某个正确构造对象的的 final 类型域中</li>\n<li>将对象的引用保存到一个由锁保护的域中</li>\n</ul>\n<h2 id=\"线程安全的单例模式的写法\"><a href=\"#线程安全的单例模式的写法\" class=\"headerlink\" title=\"线程安全的单例模式的写法\"></a>线程安全的单例模式的写法</h2><h3 id=\"饿汉式（类加载的时候就创建好）\"><a href=\"#饿汉式（类加载的时候就创建好）\" class=\"headerlink\" title=\"饿汉式（类加载的时候就创建好）\"></a>饿汉式（类加载的时候就创建好）</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/13\n * @description: 饿汉式（类加载的时候就创建好）\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonExample1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//   私有构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample1</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonExample1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>备注：饿汉模式还可以通过静态块来初始化，<strong>需要注意静态域和静态代码块的顺序</strong>（决定先加载对象还是先加载静态代码块初始对象，如果静态代码块在前就会出现空指针），这里就不演示了</p>\n<h3 id=\"懒汉式（需要的时候才去创建）【不推荐的写法】\"><a href=\"#懒汉式（需要的时候才去创建）【不推荐的写法】\" class=\"headerlink\" title=\"懒汉式（需要的时候才去创建）【不推荐的写法】\"></a>懒汉式（需要的时候才去创建）【不推荐的写法】</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/13\n * @description: 懒汉式（需要的时候才去创建）【不推荐的写法】\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonExample2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//  私有构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample2</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 统一时间只有一个线程访问,虽然是线程安全的,但不推荐\n     * 原因：加锁在方法上容易造成资源浪费\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">SingletonExample2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonExample2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"懒汉式（需要的时候才去创建）-【推荐的写法】\"><a href=\"#懒汉式（需要的时候才去创建）-【推荐的写法】\" class=\"headerlink\" title=\"懒汉式（需要的时候才去创建）-【推荐的写法】\"></a>懒汉式（需要的时候才去创建）-【推荐的写法】</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/13\n * @description: 懒汉式（需要的时候才去创建）-【推荐的写法】\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonExample3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//  私有构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//    volatile+双重检测机制=》禁止指令重排序</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample3</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 1、双重检测机制\n     * 2、同步锁\n     * 3、禁止指令重排\n     *\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonExample3</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonExample3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"为什么需要使用volatile\"><a href=\"#为什么需要使用volatile\" class=\"headerlink\" title=\"为什么需要使用volatile\"></a>为什么需要使用volatile</h4><p>&#x2F;&#x2F; instance &#x3D; new SingletonExample3();</p>\n<p>cpu的指令，执行new对象的时候分为三步</p>\n<ol>\n<li>memory&#x3D;allocate() 分配对象内存空间</li>\n<li>ctorInstance() 初始化对象</li>\n<li>instance&#x3D;memory 设置instance指向刚分配的内存</li>\n</ol>\n<p>多线程情况下会出问题</p>\n<p>JVM和CPU 发生指令重排 变成1  3 2，因为3和2的顺序不重要</p>\n<p>解决办法：使用volatile 禁止指令重排</p>\n<h3 id=\"枚举模式：最安全\"><a href=\"#枚举模式：最安全\" class=\"headerlink\" title=\"枚举模式：最安全\"></a>枚举模式：最安全</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>singleton</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/13\n * @description: 枚举单例（JVM 保证）-【推荐的写法】\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonExample4</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//  私有构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 1、既能保证整个对象初始化一次\n     * 2、又能保证在使用的使用的时候才去初始化\n     *\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonExample4</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonExample4</span> singleton<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonExample4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">SingletonExample4</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"Java进阶-并发","path":"api/categories/Java进阶-并发.json"}],"tags":[{"name":"单例模式","path":"api/tags/单例模式.json"},{"name":"对象发布","path":"api/tags/对象发布.json"},{"name":"对象溢出","path":"api/tags/对象溢出.json"}]}