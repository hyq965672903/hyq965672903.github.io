{"title":"剑指源码-spring-(七)-AOP原理剖析","slug":"剑指源码-spring-七-AOP原理剖析","date":"2022-05-12T14:22:15.000Z","updated":"2024-04-22T07:21:14.899Z","comments":true,"path":"api/articles/剑指源码-spring-七-AOP原理剖析.json","excerpt":"本章节探究AOP的使用及其原理剖析，了解AOP的详细使用及其注意事项，探究AOP是怎样在整个Bean生命周期干预来实现的","covers":null,"content":"<p>本章节探究AOP的使用及其原理剖析，了解AOP的详细使用及其注意事项，探究AOP是怎样在整个Bean生命周期干预来实现的</p>\n<span id=\"more\"></span>\n\n<h2 id=\"AOP演示\"><a href=\"#AOP演示\" class=\"headerlink\" title=\"AOP演示\"></a>AOP演示</h2><p>由于这里源码编译环境采用aspectJ相关，演示测试环境有点麻烦，我们这里采用springboot 新建项目引入AOP,使用SpringTest来进行演示及Debug</p>\n<h3 id=\"1、引入依赖\"><a href=\"#1、引入依赖\" class=\"headerlink\" title=\"1、引入依赖\"></a>1、引入依赖</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"2、编写测试\"><a href=\"#2、编写测试\" class=\"headerlink\" title=\"2、编写测试\"></a>2、编写测试</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//package cn.hyqup.spring.aop;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/11\n * @description:\n */</span>\n\n<span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">//开启自动代理</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AopConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/11\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogAspect</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">LogAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LogAspect...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * 定义切入点：对要拦截的方法进行定义与限制，如包、类\n\t *\n\t * 1、execution(public * *(..)) 任意的公共方法\n\t * 2、execution（* set*（..）） 以set开头的所有的方法\n\t * 3、execution（* com.hyq.practice.aop.LogAspect.*（..））   com.hyq.practice.aop.LogAspect这个类里的所有的方法\n\t * 4、execution（* com.hyq.practice.aop.*.*（..））   com.hyq.practice.aop包下的所有的类的所有的方法\n\t * 5、execution（* com.hyq.practice.aop..*.*（..））   com.hyq.practice.aop包及子包下所有的类的所有的方法\n\t * 6、execution(* com.hyq.practice.aop..*.*(String,?,Long))   com.hyq.practice.aop包及子包下所有的类的有三个参数，第一个参数为String类型，第二个参数为任意类型，第三个参数为Long类型的方法\n\t * 7、execution(@annotation(xxx))\n\t */</span>\n\t<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.hyq.practice.aop.HelloService.sayHello(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cutMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\n\n   <span class=\"token comment\">/**\n    * 前置通知：在目标方法执行前调用\n    */</span>\n   <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logStart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知==>\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....【args: \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">/**\n    * 后置通知：在目标方法执行后调用，若目标方法出现异常，则不执行\n    */</span>\n   <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">,</span>returning <span class=\"token operator\">=</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知(不发生异常执行)()==>\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....【args: \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】【result: \"</span><span class=\"token operator\">+</span>result<span class=\"token operator\">+</span><span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n\n   <span class=\"token comment\">/**\n    * 后置/最终通知：无论目标方法在执行过程中出现一场都会在它之后调用\n    */</span>\n   <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知(必定执行)()==>\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....【args: \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n\n   <span class=\"token comment\">/**\n    * 异常通知：目标方法抛出异常时执行\n    */</span>\n   <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">,</span>throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异常通知()==>\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....【args: \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】【exception: \"</span><span class=\"token operator\">+</span>e<span class=\"token operator\">+</span><span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">/**\n    * 环绕通知：灵活自由的在目标方法中切入代码\n    */</span>\n   <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕方法执行前通知()==> --》 method name \"</span> <span class=\"token operator\">+</span> methodName <span class=\"token operator\">+</span> <span class=\"token string\">\" args \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕方法执行后通知()==> --》 method name \"</span> <span class=\"token operator\">+</span> methodName <span class=\"token operator\">+</span> <span class=\"token string\">\" args \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/11\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloService</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HelloService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PracticeApplicationTests</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">HelloService</span> helloService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        helloService<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p><strong>执行结果：</strong></p>\n<p>环绕方法执行前通知()&#x3D;&#x3D;&gt; –》 method name sayHello args [123]<br>前置通知&#x3D;&#x3D;&gt;sayHello….【args: [123]】<br>Hello 123<br>后置通知(不发生异常执行)()&#x3D;&#x3D;&gt;sayHello….【args: [123]】【result: 123】<br>后置通知(必定执行)()&#x3D;&#x3D;&gt;sayHello….【args: [123]】<br>环绕方法执行后通知()&#x3D;&#x3D;&gt; –》 method name sayHello args [123]</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>正常：前置&#x3D;&gt;目标方法(环绕通知)&#x3D;&gt;返回通知&#x3D;&gt;后置通知</strong></p>\n<p><strong>异常：前置&#x3D;&gt;目标方法(环绕通知)&#x3D;&gt;异常通知&#x3D;&gt;后置通知</strong></p>\n<h2 id=\"原理剖析\"><a href=\"#原理剖析\" class=\"headerlink\" title=\"原理剖析\"></a>原理剖析</h2><p>1、了解AOP为生命周期条件，断点在bean12步骤里面为容器添加了什么组件，使用debug来剖析</p>\n<p>2、AOP实现是 @EnableAspectJAutoProxy 启用AOP功能</p>\n<h3 id=\"AOP定义阶段\"><a href=\"#AOP定义阶段\" class=\"headerlink\" title=\"AOP定义阶段\"></a>AOP定义阶段</h3><p>给容器中利用AspectJAutoProxyRegistrar（实现了ImportBeanDefinitionRegistrar）</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">AopConfigUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>这个给容器中导入了 AnnotationAwareAspectJAutoProxyCreator 组件</p>\n<p>AnnotationAwareAspectJAutoProxyCreator 本质上是一个BeanPostProcessor。</p>\n<p>容器刷新第五步 invokeBeanFactoryPostProcessors(beanFactory); 的时候会将AnnotationAwareAspectJAutoProxyCreator注册到容器中去，这里面 ReflectiveAspectJAdvisorFactory (创建增强器的工厂) 和 BeanFactoryAspectJAdvisorsBuilderAdapter（增强器适配器建造者）把这些工具准备好。</p>\n<p>后续在正常创建其他对象的时候干预，判断是切面相关 执行BeanPostProcessor 里面的逻辑来增强</p>\n<p>在创建其他Bean的时候（<strong>第一次</strong>）,回去遍历所有类来构建增强器 aspectJAdvisorsBuilder.buildAspectJAdvisors()</p>\n<h3 id=\"构建增强器的过程\"><a href=\"#构建增强器的过程\" class=\"headerlink\" title=\"构建增强器的过程\"></a>构建增强器的过程</h3><p>ps: 案例中这个时候会创建 LogAspect 相关的生成增强器</p>\n<p>aspectJAdvisorsBuilder.buildAspectJAdvisors()</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">buildAspectJAdvisors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> aspectNames <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectBeanNames<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aspectNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         aspectNames <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectBeanNames<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aspectNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> advisors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            aspectNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> beanNames <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanFactoryUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">beanNamesForTypeIncludingAncestors</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> beanNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEligibleBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token comment\">// We must be careful not to instantiate beans eagerly as in this case they</span>\n               <span class=\"token comment\">// would be cached by the Spring container but would not have been weaved.</span>\n               <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanType <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isAspect</span><span class=\"token punctuation\">(</span>beanType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  aspectNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token class-name\">AspectMetadata</span> amd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AspectMetadata</span><span class=\"token punctuation\">(</span>beanType<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amd<span class=\"token punctuation\">.</span><span class=\"token function\">getAjType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPerClause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">PerClauseKind</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SINGLETON</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> factory <span class=\"token operator\">=</span>\n                           <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanFactoryAspectInstanceFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token comment\">//得到增强器</span>\n                     <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> classAdvisors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAdvisors</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorsCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> classAdvisors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">&#125;</span>\n                     <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectFactoryCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">&#125;</span>\n                     advisors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>classAdvisors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n                  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token comment\">// Per target or per this.</span>\n                     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean with name '\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span>\n                              <span class=\"token string\">\"' is a singleton, but aspect instantiation model is not singleton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">&#125;</span>\n                     <span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> factory <span class=\"token operator\">=</span>\n                           <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrototypeAspectInstanceFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectFactoryCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     advisors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAdvisors</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectBeanNames <span class=\"token operator\">=</span> aspectNames<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> advisors<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aspectNames<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> advisors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> aspectName <span class=\"token operator\">:</span> aspectNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> cachedAdvisors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorsCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>aspectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedAdvisors <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         advisors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>cachedAdvisors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectFactoryCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>aspectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         advisors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAdvisors</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> advisors<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>构建好了会放在advisorsCache 缓存中去</p>\n<p>得到增强器 this.advisorFactory.getAdvisors(factory);</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAdvisors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> aspectInstanceFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> aspectClass <span class=\"token operator\">=</span> aspectInstanceFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAspectMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAspectClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">String</span> aspectName <span class=\"token operator\">=</span> aspectInstanceFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAspectMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAspectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>aspectClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// We need to wrap the MetadataAwareAspectInstanceFactory with a decorator</span>\n   <span class=\"token comment\">// so that it will only instantiate once.</span>\n   <span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> lazySingletonAspectInstanceFactory <span class=\"token operator\">=</span>\n         <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingletonAspectInstanceFactoryDecorator</span><span class=\"token punctuation\">(</span>aspectInstanceFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> advisors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 收集到所有的增强器</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> <span class=\"token function\">getAdvisorMethods</span><span class=\"token punctuation\">(</span>aspectClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Prior to Spring Framework 5.2.7, advisors.size() was supplied as the declarationOrderInAspect</span>\n      <span class=\"token comment\">// to getAdvisor(...) to represent the \"current position\" in the declared methods list.</span>\n      <span class=\"token comment\">// However, since Java 7 the \"current position\" is not valid since the JDK no longer</span>\n      <span class=\"token comment\">// returns declared methods in the order in which they are declared in the source code.</span>\n      <span class=\"token comment\">// Thus, we now hard code the declarationOrderInAspect to 0 for all advice methods</span>\n      <span class=\"token comment\">// discovered via reflection in order to support reliable advice ordering across JVM launches.</span>\n      <span class=\"token comment\">// Specifically, a value of 0 aligns with the default value used in</span>\n      <span class=\"token comment\">// AspectJPrecedenceComparator.getAspectDeclarationOrder(Advisor).</span>\n       <span class=\"token comment\">// 创建增强器</span>\n      <span class=\"token class-name\">Advisor</span> advisor <span class=\"token operator\">=</span> <span class=\"token function\">getAdvisor</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> lazySingletonAspectInstanceFactory<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> aspectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>advisor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         advisors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>advisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// If it's a per target aspect, emit the dummy instantiating aspect.</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>advisors<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> lazySingletonAspectInstanceFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAspectMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLazilyInstantiated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Advisor</span> instantiationAdvisor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyntheticInstantiationAdvisor</span><span class=\"token punctuation\">(</span>lazySingletonAspectInstanceFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      advisors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> instantiationAdvisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// Find introduction fields.</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> aspectClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Advisor</span> advisor <span class=\"token operator\">=</span> <span class=\"token function\">getDeclareParentsAdvisor</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>advisor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         advisors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>advisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">return</span> advisors<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"干扰切入点生成代理对象\"><a href=\"#干扰切入点生成代理对象\" class=\"headerlink\" title=\"干扰切入点生成代理对象\"></a>干扰切入点生成代理对象</h3><p>ps:干扰需要切入的对象的HelloService创建过程，会生成相关代理对象，并转为拦截器链，以便于后续执行过程</p>\n<p>容器刷新12大步之 finishBeanFactoryInitialization(beanFactory);里面 beanFactory.preInstantiateSingletons(); 完成对剩下单实例创建的过程中</p>\n<p>创建过程中BeanPostProcessor.postProcessAfterInitialization AOP开始增强，这个过程的时候bean已经生成，初始化的时候进行干预Bean</p>\n<p>代码位置AbstractAutoProxyCreator.postProcessAfterInitialization</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Object</span> cacheKey <span class=\"token operator\">=</span> <span class=\"token function\">getCacheKey</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlyProxyReferences<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> bean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token function\">wrapIfNecessary</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> cacheKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n\n\n<p>这里会去找当前bean 的增强器，采用MethodMatcher通过正则表达式匹配切入点和目标类的方法。匹配完拿到目标类的增强器的时候，会执行extendAdvisors 创建一个增强器链，在第0位增加一个ExposeInvocationInterceptor拦截器（方法拦截器），接下来拿到了增强器就为当前目标类创建代理，创建时候判断当前对象是否有接口实现，<strong>如果有则使用jdk动态代理创建，如果没有接口实现则采用CGlib来进行创建代理</strong></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">wrapIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> cacheKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasLength</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetSourcedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isInfrastructureClass</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">shouldSkip</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// Create proxy if we have advice.</span>\n   <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> specificInterceptors <span class=\"token operator\">=</span> <span class=\"token function\">getAdvicesAndAdvisorsForBean</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>specificInterceptors <span class=\"token operator\">!=</span> <span class=\"token constant\">DO_NOT_PROXY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Object</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span>\n            bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> specificInterceptors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonTargetSource</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>proxyTypes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> proxy<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"目标方法的执行\"><a href=\"#目标方法的执行\" class=\"headerlink\" title=\"目标方法的执行\"></a>目标方法的执行</h3><p>当目标方法执行的时候，如helloService.sayHello。这个时候会来到这个代理类设置的回调（DynamicAdvisedInterceptor）里面执行intercept。执行期间将之前的增强器通过getInterceptorsAndDynamicInterceptionAdvice转化为方法拦截器 执行invoke 的时候，链式调用。</p>\n<p>代理对象（HelloService）包含拦截器，拦截器中包含增强器，执行的过程中会执行过滤器链，<strong>责任链模式</strong></p>\n<ul>\n<li><p>ExposeInvocationInterceptor 线程共享数据</p>\n</li>\n<li><p>MethodBeforeAdviceInterceptor 前置通知拦截器</p>\n</li>\n<li><p>MethodBeforeAdvice后置通知拦截器</p>\n</li>\n<li><p>AfterReturningAdviceInterceptor返回通知拦截器</p>\n</li>\n<li><p>AspectJAfterThrowingAdvice异常通知拦截器</p>\n<p>拦截器链执行细节就不展开了</p>\n</li>\n</ul>\n","more":"<h2 id=\"AOP演示\"><a href=\"#AOP演示\" class=\"headerlink\" title=\"AOP演示\"></a>AOP演示</h2><p>由于这里源码编译环境采用aspectJ相关，演示测试环境有点麻烦，我们这里采用springboot 新建项目引入AOP,使用SpringTest来进行演示及Debug</p>\n<h3 id=\"1、引入依赖\"><a href=\"#1、引入依赖\" class=\"headerlink\" title=\"1、引入依赖\"></a>1、引入依赖</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、编写测试\"><a href=\"#2、编写测试\" class=\"headerlink\" title=\"2、编写测试\"></a>2、编写测试</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//package cn.hyqup.spring.aop;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/11\n * @description:\n */</span>\n\n<span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">//开启自动代理</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AopConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/11\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Aspect</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogAspect</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">LogAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LogAspect...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * 定义切入点：对要拦截的方法进行定义与限制，如包、类\n\t *\n\t * 1、execution(public * *(..)) 任意的公共方法\n\t * 2、execution（* set*（..）） 以set开头的所有的方法\n\t * 3、execution（* com.hyq.practice.aop.LogAspect.*（..））   com.hyq.practice.aop.LogAspect这个类里的所有的方法\n\t * 4、execution（* com.hyq.practice.aop.*.*（..））   com.hyq.practice.aop包下的所有的类的所有的方法\n\t * 5、execution（* com.hyq.practice.aop..*.*（..））   com.hyq.practice.aop包及子包下所有的类的所有的方法\n\t * 6、execution(* com.hyq.practice.aop..*.*(String,?,Long))   com.hyq.practice.aop包及子包下所有的类的有三个参数，第一个参数为String类型，第二个参数为任意类型，第三个参数为Long类型的方法\n\t * 7、execution(@annotation(xxx))\n\t */</span>\n\t<span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.hyq.practice.aop.HelloService.sayHello(..))\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cutMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\n\n   <span class=\"token comment\">/**\n    * 前置通知：在目标方法执行前调用\n    */</span>\n   <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logStart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知==>\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....【args: \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">/**\n    * 后置通知：在目标方法执行后调用，若目标方法出现异常，则不执行\n    */</span>\n   <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">,</span>returning <span class=\"token operator\">=</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知(不发生异常执行)()==>\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....【args: \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】【result: \"</span><span class=\"token operator\">+</span>result<span class=\"token operator\">+</span><span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n\n   <span class=\"token comment\">/**\n    * 后置/最终通知：无论目标方法在执行过程中出现一场都会在它之后调用\n    */</span>\n   <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知(必定执行)()==>\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....【args: \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n\n   <span class=\"token comment\">/**\n    * 异常通知：目标方法抛出异常时执行\n    */</span>\n   <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">,</span>throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异常通知()==>\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"....【args: \"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"】【exception: \"</span><span class=\"token operator\">+</span>e<span class=\"token operator\">+</span><span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">/**\n    * 环绕通知：灵活自由的在目标方法中切入代码\n    */</span>\n   <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cutMethod()\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕方法执行前通知()==> --》 method name \"</span> <span class=\"token operator\">+</span> methodName <span class=\"token operator\">+</span> <span class=\"token string\">\" args \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕方法执行后通知()==> --》 method name \"</span> <span class=\"token operator\">+</span> methodName <span class=\"token operator\">+</span> <span class=\"token string\">\" args \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/11\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloService</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hyq<span class=\"token punctuation\">.</span>practice<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HelloService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PracticeApplicationTests</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">HelloService</span> helloService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        helloService<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>执行结果：</strong></p>\n<p>环绕方法执行前通知()&#x3D;&#x3D;&gt; –》 method name sayHello args [123]<br>前置通知&#x3D;&#x3D;&gt;sayHello….【args: [123]】<br>Hello 123<br>后置通知(不发生异常执行)()&#x3D;&#x3D;&gt;sayHello….【args: [123]】【result: 123】<br>后置通知(必定执行)()&#x3D;&#x3D;&gt;sayHello….【args: [123]】<br>环绕方法执行后通知()&#x3D;&#x3D;&gt; –》 method name sayHello args [123]</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>正常：前置&#x3D;&gt;目标方法(环绕通知)&#x3D;&gt;返回通知&#x3D;&gt;后置通知</strong></p>\n<p><strong>异常：前置&#x3D;&gt;目标方法(环绕通知)&#x3D;&gt;异常通知&#x3D;&gt;后置通知</strong></p>\n<h2 id=\"原理剖析\"><a href=\"#原理剖析\" class=\"headerlink\" title=\"原理剖析\"></a>原理剖析</h2><p>1、了解AOP为生命周期条件，断点在bean12步骤里面为容器添加了什么组件，使用debug来剖析</p>\n<p>2、AOP实现是 @EnableAspectJAutoProxy 启用AOP功能</p>\n<h3 id=\"AOP定义阶段\"><a href=\"#AOP定义阶段\" class=\"headerlink\" title=\"AOP定义阶段\"></a>AOP定义阶段</h3><p>给容器中利用AspectJAutoProxyRegistrar（实现了ImportBeanDefinitionRegistrar）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">AopConfigUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个给容器中导入了 AnnotationAwareAspectJAutoProxyCreator 组件</p>\n<p>AnnotationAwareAspectJAutoProxyCreator 本质上是一个BeanPostProcessor。</p>\n<p>容器刷新第五步 invokeBeanFactoryPostProcessors(beanFactory); 的时候会将AnnotationAwareAspectJAutoProxyCreator注册到容器中去，这里面 ReflectiveAspectJAdvisorFactory (创建增强器的工厂) 和 BeanFactoryAspectJAdvisorsBuilderAdapter（增强器适配器建造者）把这些工具准备好。</p>\n<p>后续在正常创建其他对象的时候干预，判断是切面相关 执行BeanPostProcessor 里面的逻辑来增强</p>\n<p>在创建其他Bean的时候（<strong>第一次</strong>）,回去遍历所有类来构建增强器 aspectJAdvisorsBuilder.buildAspectJAdvisors()</p>\n<h3 id=\"构建增强器的过程\"><a href=\"#构建增强器的过程\" class=\"headerlink\" title=\"构建增强器的过程\"></a>构建增强器的过程</h3><p>ps: 案例中这个时候会创建 LogAspect 相关的生成增强器</p>\n<p>aspectJAdvisorsBuilder.buildAspectJAdvisors()</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">buildAspectJAdvisors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> aspectNames <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectBeanNames<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aspectNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         aspectNames <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectBeanNames<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aspectNames <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> advisors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            aspectNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> beanNames <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanFactoryUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">beanNamesForTypeIncludingAncestors</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> beanNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEligibleBean</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token comment\">// We must be careful not to instantiate beans eagerly as in this case they</span>\n               <span class=\"token comment\">// would be cached by the Spring container but would not have been weaved.</span>\n               <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanType <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isAspect</span><span class=\"token punctuation\">(</span>beanType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  aspectNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token class-name\">AspectMetadata</span> amd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AspectMetadata</span><span class=\"token punctuation\">(</span>beanType<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amd<span class=\"token punctuation\">.</span><span class=\"token function\">getAjType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPerClause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">PerClauseKind</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SINGLETON</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> factory <span class=\"token operator\">=</span>\n                           <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanFactoryAspectInstanceFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token comment\">//得到增强器</span>\n                     <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> classAdvisors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAdvisors</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorsCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> classAdvisors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">&#125;</span>\n                     <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectFactoryCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">&#125;</span>\n                     advisors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>classAdvisors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n                  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token comment\">// Per target or per this.</span>\n                     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean with name '\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span>\n                              <span class=\"token string\">\"' is a singleton, but aspect instantiation model is not singleton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">&#125;</span>\n                     <span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> factory <span class=\"token operator\">=</span>\n                           <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrototypeAspectInstanceFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectFactoryCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     advisors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAdvisors</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectBeanNames <span class=\"token operator\">=</span> aspectNames<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> advisors<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aspectNames<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> advisors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> aspectName <span class=\"token operator\">:</span> aspectNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> cachedAdvisors <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorsCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>aspectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedAdvisors <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         advisors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>cachedAdvisors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aspectFactoryCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>aspectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         advisors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAdvisors</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> advisors<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>构建好了会放在advisorsCache 缓存中去</p>\n<p>得到增强器 this.advisorFactory.getAdvisors(factory);</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAdvisors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> aspectInstanceFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> aspectClass <span class=\"token operator\">=</span> aspectInstanceFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAspectMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAspectClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">String</span> aspectName <span class=\"token operator\">=</span> aspectInstanceFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAspectMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAspectName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>aspectClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// We need to wrap the MetadataAwareAspectInstanceFactory with a decorator</span>\n   <span class=\"token comment\">// so that it will only instantiate once.</span>\n   <span class=\"token class-name\">MetadataAwareAspectInstanceFactory</span> lazySingletonAspectInstanceFactory <span class=\"token operator\">=</span>\n         <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingletonAspectInstanceFactoryDecorator</span><span class=\"token punctuation\">(</span>aspectInstanceFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Advisor</span><span class=\"token punctuation\">></span></span> advisors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 收集到所有的增强器</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> <span class=\"token function\">getAdvisorMethods</span><span class=\"token punctuation\">(</span>aspectClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Prior to Spring Framework 5.2.7, advisors.size() was supplied as the declarationOrderInAspect</span>\n      <span class=\"token comment\">// to getAdvisor(...) to represent the \"current position\" in the declared methods list.</span>\n      <span class=\"token comment\">// However, since Java 7 the \"current position\" is not valid since the JDK no longer</span>\n      <span class=\"token comment\">// returns declared methods in the order in which they are declared in the source code.</span>\n      <span class=\"token comment\">// Thus, we now hard code the declarationOrderInAspect to 0 for all advice methods</span>\n      <span class=\"token comment\">// discovered via reflection in order to support reliable advice ordering across JVM launches.</span>\n      <span class=\"token comment\">// Specifically, a value of 0 aligns with the default value used in</span>\n      <span class=\"token comment\">// AspectJPrecedenceComparator.getAspectDeclarationOrder(Advisor).</span>\n       <span class=\"token comment\">// 创建增强器</span>\n      <span class=\"token class-name\">Advisor</span> advisor <span class=\"token operator\">=</span> <span class=\"token function\">getAdvisor</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> lazySingletonAspectInstanceFactory<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> aspectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>advisor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         advisors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>advisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// If it's a per target aspect, emit the dummy instantiating aspect.</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>advisors<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> lazySingletonAspectInstanceFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAspectMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLazilyInstantiated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Advisor</span> instantiationAdvisor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyntheticInstantiationAdvisor</span><span class=\"token punctuation\">(</span>lazySingletonAspectInstanceFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      advisors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> instantiationAdvisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// Find introduction fields.</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> aspectClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Advisor</span> advisor <span class=\"token operator\">=</span> <span class=\"token function\">getDeclareParentsAdvisor</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>advisor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         advisors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>advisor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">return</span> advisors<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"干扰切入点生成代理对象\"><a href=\"#干扰切入点生成代理对象\" class=\"headerlink\" title=\"干扰切入点生成代理对象\"></a>干扰切入点生成代理对象</h3><p>ps:干扰需要切入的对象的HelloService创建过程，会生成相关代理对象，并转为拦截器链，以便于后续执行过程</p>\n<p>容器刷新12大步之 finishBeanFactoryInitialization(beanFactory);里面 beanFactory.preInstantiateSingletons(); 完成对剩下单实例创建的过程中</p>\n<p>创建过程中BeanPostProcessor.postProcessAfterInitialization AOP开始增强，这个过程的时候bean已经生成，初始化的时候进行干预Bean</p>\n<p>代码位置AbstractAutoProxyCreator.postProcessAfterInitialization</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Object</span> cacheKey <span class=\"token operator\">=</span> <span class=\"token function\">getCacheKey</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>earlyProxyReferences<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> bean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token function\">wrapIfNecessary</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> cacheKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这里会去找当前bean 的增强器，采用MethodMatcher通过正则表达式匹配切入点和目标类的方法。匹配完拿到目标类的增强器的时候，会执行extendAdvisors 创建一个增强器链，在第0位增加一个ExposeInvocationInterceptor拦截器（方法拦截器），接下来拿到了增强器就为当前目标类创建代理，创建时候判断当前对象是否有接口实现，<strong>如果有则使用jdk动态代理创建，如果没有接口实现则采用CGlib来进行创建代理</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">wrapIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> cacheKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasLength</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetSourcedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isInfrastructureClass</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">shouldSkip</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// Create proxy if we have advice.</span>\n   <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> specificInterceptors <span class=\"token operator\">=</span> <span class=\"token function\">getAdvicesAndAdvisorsForBean</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>specificInterceptors <span class=\"token operator\">!=</span> <span class=\"token constant\">DO_NOT_PROXY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Object</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span>\n            bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> specificInterceptors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonTargetSource</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>proxyTypes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> proxy<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advisedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"目标方法的执行\"><a href=\"#目标方法的执行\" class=\"headerlink\" title=\"目标方法的执行\"></a>目标方法的执行</h3><p>当目标方法执行的时候，如helloService.sayHello。这个时候会来到这个代理类设置的回调（DynamicAdvisedInterceptor）里面执行intercept。执行期间将之前的增强器通过getInterceptorsAndDynamicInterceptionAdvice转化为方法拦截器 执行invoke 的时候，链式调用。</p>\n<p>代理对象（HelloService）包含拦截器，拦截器中包含增强器，执行的过程中会执行过滤器链，<strong>责任链模式</strong></p>\n<ul>\n<li><p>ExposeInvocationInterceptor 线程共享数据</p>\n</li>\n<li><p>MethodBeforeAdviceInterceptor 前置通知拦截器</p>\n</li>\n<li><p>MethodBeforeAdvice后置通知拦截器</p>\n</li>\n<li><p>AfterReturningAdviceInterceptor返回通知拦截器</p>\n</li>\n<li><p>AspectJAfterThrowingAdvice异常通知拦截器</p>\n<p>拦截器链执行细节就不展开了</p>\n</li>\n</ul>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"Spring源码","path":"api/categories/Spring源码.json"}],"tags":[{"name":"AOP","path":"api/tags/AOP.json"}]}