{"title":"剑指源码-springmvc-(二)-九大组件概述","slug":"剑指源码-springmvc-二-九大组件概述","date":"2022-05-16T15:31:37.000Z","updated":"2024-04-22T07:21:14.911Z","comments":true,"path":"api/articles/剑指源码-springmvc-二-九大组件概述.json","excerpt":"概述springMVC九大组件的相关概念，及其基本作用，了解其初始化实现机制","covers":["http://hyqup-blog-upyun.test.upcdn.net/img/image-20220516212304671.png"],"content":"<p>概述springMVC九大组件的相关概念，及其基本作用，了解其初始化实现机制</p>\n<span id=\"more\"></span>\n\n<h2 id=\"了解初始化的时机\"><a href=\"#了解初始化的时机\" class=\"headerlink\" title=\"了解初始化的时机\"></a>了解初始化的时机</h2><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220516212304671.png\" alt=\"image-20220516212304671\"></p>\n<p>初始化web容器的时候initWebApplicationContext，有设置监听器wac.addApplicationListener(new SourceFilteringListener(wac, new ContextRefreshListener()));</p>\n<p>而FrameworkServlet中执行了onRefresh 方法，由子类实现</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">public void onApplicationEvent(ContextRefreshedEvent event) &#123;\n  this.refreshEventReceived &#x3D; true;\n  synchronized (this.onRefreshMonitor) &#123;\n     onRefresh(event.getApplicationContext());\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>这里DispatcherServlet里面实现了onRefresh方法这里面会对九大组件进行初始化</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">@Override\nprotected void onRefresh(ApplicationContext context) &#123;\n  initStrategies(context);\n&#125;\n\n&#x2F;**\n* Initialize the strategy objects that this servlet uses.\n* &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.\n*&#x2F;\nprotected void initStrategies(ApplicationContext context) &#123;\n  initMultipartResolver(context);\n  initLocaleResolver(context);\n  initThemeResolver(context);\n  initHandlerMappings(context);\n  initHandlerAdapters(context);\n  initHandlerExceptionResolvers(context);\n  initRequestToViewNameTranslator(context);\n  initViewResolvers(context);\n  initFlashMapManager(context);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h2 id=\"九大组件介绍\"><a href=\"#九大组件介绍\" class=\"headerlink\" title=\"九大组件介绍\"></a>九大组件介绍</h2><blockquote>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-special-bean-types%E5%AE%98%E6%96%B9%E8%BF%99%E9%87%8C%E5%88%97%E4%B8%BE%E4%BA%86%E5%85%AB%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%8CRequestToViewNameTranslator%E4%BB%8B%E7%BB%8D%E7%9B%B8%E5%AF%B9%E8%BE%83%E5%B0%91\">https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-special-bean-types官方这里列举了八大组件，RequestToViewNameTranslator介绍相对较少</a></p>\n<p>这里的组件除了 MultipartResolver，都有默认实现，也就是说如果我们要实现文件上传，就需要自己实现一个MultipartResolver</p>\n</blockquote>\n<p>前置概念：<code>Handler</code>、<code>HandlerMapping</code>和<code>HandlerAdapter</code></p>\n<p>Handler：处理器，实际上处理请求的就是Handler</p>\n<p>HandlerMapping：处理器映射器，查找Handler的，SpringMVC会接收很多request请求，如何确定哪一个请求是哪一个Handler，就是靠HandlerMapping</p>\n<p>HandlerAdapter：处理器适配器，灵活的调用Handler处理具体逻辑</p>\n<ul>\n<li><strong>HandlerMapping（处理器映射器）</strong></li>\n</ul>\n<p> 根据<code>request</code>查找请求对应的 <code>Handler</code> 和 <code>Interceptor</code></p>\n<ul>\n<li><strong>HandlerAdapter（处理器适配器）</strong></li>\n</ul>\n<p> 用来适配找到<code>Handler</code>对应的适配器，并进行执行</p>\n<ul>\n<li><strong>HandlerExceptionResolver（异常解析器 ）</strong></li>\n</ul>\n<p> 处理 <code>Handler</code> 产⽣的异常，根据异常设置<code>ModelAndView</code>，之后交给渲染⽅法进⾏渲染</p>\n<ul>\n<li><strong>ViewResolver（视图解析器）</strong></li>\n</ul>\n<p> 将 <code>String</code> 类型的视图名和 <code>Locale</code> 解析为 <code>View</code> 类型的视图</p>\n<ul>\n<li><strong>RequestToViewNameTranslator（请求视图名转换器）</strong></li>\n</ul>\n<p> 从请求中获取 <code>ViewName</code></p>\n<ul>\n<li><strong>LocaleResolver（区域化解析器）</strong></li>\n</ul>\n<p> 从请求中解析出 <code>Locale</code></p>\n<ul>\n<li><strong>ThemeResolver（主题解析器）</strong></li>\n</ul>\n<p> 从请求中解析出主题名，并获取主题具体的资源</p>\n<ul>\n<li><strong>MultipartResolver（分片解析器）</strong></li>\n</ul>\n<p> 封装普通的请求，使其拥有⽂件上传的功能</p>\n<ul>\n<li><strong>FlashMapManager（闪存管理器）</strong></li>\n</ul>\n<p> ⽤于重定向时的参数传递</p>\n<h2 id=\"SpringMVC的请求链路\"><a href=\"#SpringMVC的请求链路\" class=\"headerlink\" title=\"SpringMVC的请求链路\"></a>SpringMVC的请求链路</h2><blockquote>\n<p>SpringMVC的请求最基础原理是一个DispatcherServlet来处理请求，DispatcherServlet的最顶层也是一个Servlet，所以也是遵循Servlet规范来执行</p>\n</blockquote>\n<p>从<code>DispatcherServlet</code> 的Diagram可以看出，上三层分别是Servlet、GenericServlet、HttpServlet。这三个属于Servlet规范然后是HttpServletBean FrameworkServlet以及DispatcherServlet 后三个是属于Spring家族的</p>\n<p>当前端发送一个请求时候，执行到<code>Servlet.service()</code>—&gt;<code>GenericServlet.service()</code>—&gt;<code>HttpServlet.service()</code>执行到相应的doGet&#x2F;doPost—&gt;FrameworkServlet会重写doGet&#x2F;doPost，全部去执行<code>processRequest()</code>，留给子类的<code>doService()</code>—&gt;DispatcherServlet实现doService，最终调用到<code>doDispatch()</code></p>\n<p>所以，分析SpringMVC请求链路，从重分析<code>doDispatch</code>逻辑</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deprecation\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">HttpServletRequest</span> processedRequest <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">HandlerExecutionChain</span> mappedHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 文件上传的标识</span>\n\t<span class=\"token keyword\">boolean</span> multipartRequestParsed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 异步请求支持</span>\n\t<span class=\"token class-name\">WebAsyncManager</span> asyncManager <span class=\"token operator\">=</span> <span class=\"token class-name\">WebAsyncUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsyncManager</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Exception</span> dispatchException <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//检查是否文件上传,判断</span>\n\t\t\tprocessedRequest <span class=\"token operator\">=</span> <span class=\"token function\">checkMultipart</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmultipartRequestParsed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>processedRequest <span class=\"token operator\">!=</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Determine handler for the current request.</span>\n\t\t\t<span class=\"token comment\">// 使用HandlerMapping决定使用哪个Handler处理当前请求，会构造出 目标方法+拦截器链</span>\n\t\t\tmappedHandler <span class=\"token operator\">=</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedHandler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">noHandlerFound</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token comment\">// Determine handler adapter for the current request.</span>\n\t\t\t<span class=\"token comment\">// 使用HandlerAdapter 知道适配器</span>\n\t\t\t<span class=\"token class-name\">HandlerAdapter</span> ha <span class=\"token operator\">=</span> <span class=\"token function\">getHandlerAdapter</span><span class=\"token punctuation\">(</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Process last-modified header, if supported by the handler.</span>\n\t\t\t<span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">boolean</span> isGet <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isGet <span class=\"token operator\">||</span> <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HEAD</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">long</span> lastModified <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">getLastModified</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletWebRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotModified</span><span class=\"token punctuation\">(</span>lastModified<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isGet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">// 处理拦截器链的 preHandle （前置）方法</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPreHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token comment\">// Actually invoke the handler.</span>\n\t\t\t<span class=\"token comment\">// 真正反射执行</span>\n\t\t\tmv <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token function\">applyDefaultViewName</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 处理拦截器链的 preHandle （后置）方法</span>\n\t\t\tmappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPostHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tdispatchException <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// As of 4.3, we're processing Errors thrown from handler methods as well,</span>\n\t\t\t<span class=\"token comment\">// making them available for @ExceptionHandler methods and other scenarios.</span>\n\t\t\tdispatchException <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NestedServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handler dispatch failed\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">processDispatchResult</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">,</span> dispatchException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">triggerAfterCompletion</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">triggerAfterCompletion</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">NestedServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handler processing failed\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Instead of postHandle and afterCompletion</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyAfterConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Clean up any resources used by a multipart request.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>multipartRequestParsed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">cleanupMultipart</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>核心流程如上，这里面会涉及到HandlerMaping 的几种实现,以及HandlerAdapter的几种实现，下一章节详细分析</p>\n<p>这里拦截器概念引入。和以前的拦截器过滤器</p>\n<h3 id=\"过滤器、拦截器、监听器对比\"><a href=\"#过滤器、拦截器、监听器对比\" class=\"headerlink\" title=\"过滤器、拦截器、监听器对比\"></a>过滤器、拦截器、监听器对比</h3><ul>\n<li><p><strong>过滤器</strong></p>\n<p>Filter过滤器是Servlet容器层面的，过滤器是对数据进行过滤，预处理过程</p>\n</li>\n<li><p><strong>拦截器</strong></p>\n<p>Interceptor拦截器和Filter和Listener有本质上的不同，前面二者都是依赖于Servlet容器，而Interceptor则是依赖于Spring框架，是aop的一种表现，基于Java的动态代理实现的。</p>\n<p>实现步骤：</p>\n<ol>\n<li>声明拦截器的类：通过实现 HandlerInterceptor接口，实现preHandle、postHandle和afterCompletion方法。</li>\n<li>通过配置类配置拦截器：通过实现WebMvcConfigurer接口，实现addInterceptors方法。</li>\n</ol>\n</li>\n<li><p><strong>监听器</strong></p>\n<p>Listener监听器也是Servlet层面，可以用于监听Web应用中某些对象、信息的创建、销毁和修改等动作发生，然后做出相应的响应处理</p>\n<p>监听器分为3类：</p>\n<ol>\n<li>ServletContext：对应application，实现接口ServletContextListener。在整个Web服务中只有一个，在Web服务关闭时销毁。可用于做数据缓存，例如结合redis，在Web服务创建时从数据库拉取数据到缓存服务器。</li>\n<li>HttpSession：对应session会话，实现接口HttpSessionListener。在会话起始时创建，一端关闭会话后销毁。可用作获取在线用户数量。</li>\n<li>ServletRequest：对应request，实现接口ServletRequestListener。request对象是客户发送请求时创建的，用于封装请求数据，请求处理完毕后销毁。可用作封装用户信息。</li>\n</ol>\n</li>\n</ul>\n","more":"<h2 id=\"了解初始化的时机\"><a href=\"#了解初始化的时机\" class=\"headerlink\" title=\"了解初始化的时机\"></a>了解初始化的时机</h2><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220516212304671.png\" alt=\"image-20220516212304671\"></p>\n<p>初始化web容器的时候initWebApplicationContext，有设置监听器wac.addApplicationListener(new SourceFilteringListener(wac, new ContextRefreshListener()));</p>\n<p>而FrameworkServlet中执行了onRefresh 方法，由子类实现</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public void onApplicationEvent(ContextRefreshedEvent event) &#123;\n  this.refreshEventReceived &#x3D; true;\n  synchronized (this.onRefreshMonitor) &#123;\n     onRefresh(event.getApplicationContext());\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里DispatcherServlet里面实现了onRefresh方法这里面会对九大组件进行初始化</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Override\nprotected void onRefresh(ApplicationContext context) &#123;\n  initStrategies(context);\n&#125;\n\n&#x2F;**\n* Initialize the strategy objects that this servlet uses.\n* &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.\n*&#x2F;\nprotected void initStrategies(ApplicationContext context) &#123;\n  initMultipartResolver(context);\n  initLocaleResolver(context);\n  initThemeResolver(context);\n  initHandlerMappings(context);\n  initHandlerAdapters(context);\n  initHandlerExceptionResolvers(context);\n  initRequestToViewNameTranslator(context);\n  initViewResolvers(context);\n  initFlashMapManager(context);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"九大组件介绍\"><a href=\"#九大组件介绍\" class=\"headerlink\" title=\"九大组件介绍\"></a>九大组件介绍</h2><blockquote>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-special-bean-types%E5%AE%98%E6%96%B9%E8%BF%99%E9%87%8C%E5%88%97%E4%B8%BE%E4%BA%86%E5%85%AB%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%8CRequestToViewNameTranslator%E4%BB%8B%E7%BB%8D%E7%9B%B8%E5%AF%B9%E8%BE%83%E5%B0%91\">https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-special-bean-types官方这里列举了八大组件，RequestToViewNameTranslator介绍相对较少</a></p>\n<p>这里的组件除了 MultipartResolver，都有默认实现，也就是说如果我们要实现文件上传，就需要自己实现一个MultipartResolver</p>\n</blockquote>\n<p>前置概念：<code>Handler</code>、<code>HandlerMapping</code>和<code>HandlerAdapter</code></p>\n<p>Handler：处理器，实际上处理请求的就是Handler</p>\n<p>HandlerMapping：处理器映射器，查找Handler的，SpringMVC会接收很多request请求，如何确定哪一个请求是哪一个Handler，就是靠HandlerMapping</p>\n<p>HandlerAdapter：处理器适配器，灵活的调用Handler处理具体逻辑</p>\n<ul>\n<li><strong>HandlerMapping（处理器映射器）</strong></li>\n</ul>\n<p> 根据<code>request</code>查找请求对应的 <code>Handler</code> 和 <code>Interceptor</code></p>\n<ul>\n<li><strong>HandlerAdapter（处理器适配器）</strong></li>\n</ul>\n<p> 用来适配找到<code>Handler</code>对应的适配器，并进行执行</p>\n<ul>\n<li><strong>HandlerExceptionResolver（异常解析器 ）</strong></li>\n</ul>\n<p> 处理 <code>Handler</code> 产⽣的异常，根据异常设置<code>ModelAndView</code>，之后交给渲染⽅法进⾏渲染</p>\n<ul>\n<li><strong>ViewResolver（视图解析器）</strong></li>\n</ul>\n<p> 将 <code>String</code> 类型的视图名和 <code>Locale</code> 解析为 <code>View</code> 类型的视图</p>\n<ul>\n<li><strong>RequestToViewNameTranslator（请求视图名转换器）</strong></li>\n</ul>\n<p> 从请求中获取 <code>ViewName</code></p>\n<ul>\n<li><strong>LocaleResolver（区域化解析器）</strong></li>\n</ul>\n<p> 从请求中解析出 <code>Locale</code></p>\n<ul>\n<li><strong>ThemeResolver（主题解析器）</strong></li>\n</ul>\n<p> 从请求中解析出主题名，并获取主题具体的资源</p>\n<ul>\n<li><strong>MultipartResolver（分片解析器）</strong></li>\n</ul>\n<p> 封装普通的请求，使其拥有⽂件上传的功能</p>\n<ul>\n<li><strong>FlashMapManager（闪存管理器）</strong></li>\n</ul>\n<p> ⽤于重定向时的参数传递</p>\n<h2 id=\"SpringMVC的请求链路\"><a href=\"#SpringMVC的请求链路\" class=\"headerlink\" title=\"SpringMVC的请求链路\"></a>SpringMVC的请求链路</h2><blockquote>\n<p>SpringMVC的请求最基础原理是一个DispatcherServlet来处理请求，DispatcherServlet的最顶层也是一个Servlet，所以也是遵循Servlet规范来执行</p>\n</blockquote>\n<p>从<code>DispatcherServlet</code> 的Diagram可以看出，上三层分别是Servlet、GenericServlet、HttpServlet。这三个属于Servlet规范然后是HttpServletBean FrameworkServlet以及DispatcherServlet 后三个是属于Spring家族的</p>\n<p>当前端发送一个请求时候，执行到<code>Servlet.service()</code>—&gt;<code>GenericServlet.service()</code>—&gt;<code>HttpServlet.service()</code>执行到相应的doGet&#x2F;doPost—&gt;FrameworkServlet会重写doGet&#x2F;doPost，全部去执行<code>processRequest()</code>，留给子类的<code>doService()</code>—&gt;DispatcherServlet实现doService，最终调用到<code>doDispatch()</code></p>\n<p>所以，分析SpringMVC请求链路，从重分析<code>doDispatch</code>逻辑</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deprecation\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">HttpServletRequest</span> processedRequest <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">HandlerExecutionChain</span> mappedHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 文件上传的标识</span>\n\t<span class=\"token keyword\">boolean</span> multipartRequestParsed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 异步请求支持</span>\n\t<span class=\"token class-name\">WebAsyncManager</span> asyncManager <span class=\"token operator\">=</span> <span class=\"token class-name\">WebAsyncUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsyncManager</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Exception</span> dispatchException <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//检查是否文件上传,判断</span>\n\t\t\tprocessedRequest <span class=\"token operator\">=</span> <span class=\"token function\">checkMultipart</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmultipartRequestParsed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>processedRequest <span class=\"token operator\">!=</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Determine handler for the current request.</span>\n\t\t\t<span class=\"token comment\">// 使用HandlerMapping决定使用哪个Handler处理当前请求，会构造出 目标方法+拦截器链</span>\n\t\t\tmappedHandler <span class=\"token operator\">=</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedHandler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">noHandlerFound</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token comment\">// Determine handler adapter for the current request.</span>\n\t\t\t<span class=\"token comment\">// 使用HandlerAdapter 知道适配器</span>\n\t\t\t<span class=\"token class-name\">HandlerAdapter</span> ha <span class=\"token operator\">=</span> <span class=\"token function\">getHandlerAdapter</span><span class=\"token punctuation\">(</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// Process last-modified header, if supported by the handler.</span>\n\t\t\t<span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">boolean</span> isGet <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isGet <span class=\"token operator\">||</span> <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HEAD</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">long</span> lastModified <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">getLastModified</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletWebRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotModified</span><span class=\"token punctuation\">(</span>lastModified<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isGet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">// 处理拦截器链的 preHandle （前置）方法</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPreHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token comment\">// Actually invoke the handler.</span>\n\t\t\t<span class=\"token comment\">// 真正反射执行</span>\n\t\t\tmv <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t\t<span class=\"token function\">applyDefaultViewName</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 处理拦截器链的 preHandle （后置）方法</span>\n\t\t\tmappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPostHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tdispatchException <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// As of 4.3, we're processing Errors thrown from handler methods as well,</span>\n\t\t\t<span class=\"token comment\">// making them available for @ExceptionHandler methods and other scenarios.</span>\n\t\t\tdispatchException <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NestedServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handler dispatch failed\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">processDispatchResult</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">,</span> dispatchException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">triggerAfterCompletion</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">triggerAfterCompletion</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">NestedServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handler processing failed\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Instead of postHandle and afterCompletion</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyAfterConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Clean up any resources used by a multipart request.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>multipartRequestParsed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">cleanupMultipart</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>核心流程如上，这里面会涉及到HandlerMaping 的几种实现,以及HandlerAdapter的几种实现，下一章节详细分析</p>\n<p>这里拦截器概念引入。和以前的拦截器过滤器</p>\n<h3 id=\"过滤器、拦截器、监听器对比\"><a href=\"#过滤器、拦截器、监听器对比\" class=\"headerlink\" title=\"过滤器、拦截器、监听器对比\"></a>过滤器、拦截器、监听器对比</h3><ul>\n<li><p><strong>过滤器</strong></p>\n<p>Filter过滤器是Servlet容器层面的，过滤器是对数据进行过滤，预处理过程</p>\n</li>\n<li><p><strong>拦截器</strong></p>\n<p>Interceptor拦截器和Filter和Listener有本质上的不同，前面二者都是依赖于Servlet容器，而Interceptor则是依赖于Spring框架，是aop的一种表现，基于Java的动态代理实现的。</p>\n<p>实现步骤：</p>\n<ol>\n<li>声明拦截器的类：通过实现 HandlerInterceptor接口，实现preHandle、postHandle和afterCompletion方法。</li>\n<li>通过配置类配置拦截器：通过实现WebMvcConfigurer接口，实现addInterceptors方法。</li>\n</ol>\n</li>\n<li><p><strong>监听器</strong></p>\n<p>Listener监听器也是Servlet层面，可以用于监听Web应用中某些对象、信息的创建、销毁和修改等动作发生，然后做出相应的响应处理</p>\n<p>监听器分为3类：</p>\n<ol>\n<li>ServletContext：对应application，实现接口ServletContextListener。在整个Web服务中只有一个，在Web服务关闭时销毁。可用于做数据缓存，例如结合redis，在Web服务创建时从数据库拉取数据到缓存服务器。</li>\n<li>HttpSession：对应session会话，实现接口HttpSessionListener。在会话起始时创建，一端关闭会话后销毁。可用作获取在线用户数量。</li>\n<li>ServletRequest：对应request，实现接口ServletRequestListener。request对象是客户发送请求时创建的，用于封装请求数据，请求处理完毕后销毁。可用作封装用户信息。</li>\n</ol>\n</li>\n</ul>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"SpringMVC源码","path":"api/categories/SpringMVC源码.json"}],"tags":[]}