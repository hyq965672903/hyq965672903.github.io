{"title":"JVM与GC调优(四)-对象的生命周期和垃圾回收GC篇","slug":"JVM与GC调优-四-对象的生命周期和垃圾回收GC","date":"2023-03-12T14:45:15.000Z","updated":"2024-04-22T07:21:14.883Z","comments":true,"path":"api/articles/JVM与GC调优-四-对象的生命周期和垃圾回收GC.json","excerpt":"Java对象的生命周期，对象从创建过程，到内存中分配方式，如何分配以及何时进入老年代相关。JVM垃圾回收","covers":["http://file.hyqup.cn/img/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png"],"content":"<p>Java对象的生命周期，对象从创建过程，到内存中分配方式，如何分配以及何时进入老年代相关。JVM垃圾回收</p>\n<span id=\"more\"></span>\n\n<h1 id=\"对象的生命周期\"><a href=\"#对象的生命周期\" class=\"headerlink\" title=\"对象的生命周期\"></a>对象的生命周期</h1><h2 id=\"对象创建的流程\"><a href=\"#对象创建的流程\" class=\"headerlink\" title=\"对象创建的流程\"></a>对象创建的流程</h2><h3 id=\"创建流程\"><a href=\"#创建流程\" class=\"headerlink\" title=\"创建流程\"></a>创建流程</h3><p><img src=\"http://file.hyqup.cn/img/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png\" alt=\"对象创建过程\"></p>\n<h3 id=\"对象内存的分配方式\"><a href=\"#对象内存的分配方式\" class=\"headerlink\" title=\"对象内存的分配方式\"></a>对象内存的分配方式</h3><p>内存分配的方法有两种：不同垃圾收集器不一样</p>\n<ul>\n<li><p>指针碰撞(Bump the Pointer)</p>\n<blockquote>\n<p>内存地址是连续的（新生代），Serial 和ParNew 收集器</p>\n</blockquote>\n</li>\n<li><p>空闲列表(Free List)</p>\n<blockquote>\n<p>内存地址不连续（老年代），CMS 收集器和 Mark-Sweep 收集器</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"对象内存分配的安全问题\"><a href=\"#对象内存分配的安全问题\" class=\"headerlink\" title=\"对象内存分配的安全问题\"></a>对象内存分配的安全问题</h3><p>在并发情况下， 可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况</p>\n<p><strong>在JVM中有两种解决办法</strong></p>\n<ul>\n<li>CAS 是<strong>乐观锁</strong>的一种实现方式。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</li>\n<li>TLAB<strong>本地线程分配缓冲</strong>(Thread Local Allocation Buffer即TLAB)：为每一个线程预先分配一块内存</li>\n</ul>\n<h3 id=\"对象怎样才会进入老年代？\"><a href=\"#对象怎样才会进入老年代？\" class=\"headerlink\" title=\"对象怎样才会进入老年代？\"></a>对象怎样才会进入老年代？</h3><p>对象的分配对象情况如下</p>\n<ul>\n<li><p><strong>新生代</strong>：新对象大多数都默认进入新生代的Eden区。伊甸园（希腊神话）</p>\n</li>\n<li><p><strong>老年代</strong>（四种情况）：</p>\n<ul>\n<li><p><strong>存活年龄太大，默认超过15次【<code>-XX:MaxTenuringThreshold</code>】</strong></p>\n</li>\n<li><p><strong>动态年龄判断</strong>，MinorGC之后，发现Survivor区中的一批对象的总大小大于了这块Survivor区</p>\n<p>的50%，那么就会将此时大于等于这批对象年龄最大值的所有对象，直接进入老年代</p>\n</li>\n<li><p><strong>大对象直接进入老年代</strong>，前提是Serial和ParNew收集器</p>\n</li>\n<li><p>MinorGC后，存活对象太多无法放入Survivor</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>空间担保机制</strong></p>\n<blockquote>\n<p>当新生代无法分配内存的时候，我们想把新生代的<strong>老对象</strong>转移到老年代，然后把<strong>新对象</strong>放入腾空的新生代。此种机制我们称之为<strong>内存担保</strong>。</p>\n</blockquote>\n<h2 id=\"对象的内存布局\"><a href=\"#对象的内存布局\" class=\"headerlink\" title=\"对象的内存布局\"></a>对象的内存布局</h2><blockquote>\n<p>堆内存中，一个对象在内存中存储的布局可以分为三块区域</p>\n</blockquote>\n<ul>\n<li><p><strong>对象头（Header）</strong>Java对象头占8byte。如果是数组则占12byte。因为JVM里数组size需要使用</p>\n<p>4byte存储</p>\n<ul>\n<li><strong>标记字段</strong>MarkWord<ul>\n<li>用于存储对象自身的运行时数据，它是synchronized实现轻量级锁和偏向锁的关键</li>\n<li>默认存储：对象HashCode、GC分代年龄、锁状态等等信息</li>\n<li>锁标志位的变化，存储数据发生变化</li>\n</ul>\n</li>\n<li><strong>类型指针</strong>KlassPoint<ul>\n<li>是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例</li>\n<li>开启指针压缩存储空间4byte，不开启8byte</li>\n<li>JDK1.6+默认开启</li>\n</ul>\n</li>\n<li><strong>数组长度</strong><ul>\n<li>如果对象是数组，则记录数组长度，占4个byte，如果对象不是数组则不存在</li>\n</ul>\n</li>\n<li><strong>对齐填充</strong><ul>\n<li>保证数组的大小永远是8byte的整数倍</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>实例数据（</strong>Instance Data）</p>\n<ul>\n<li>生成对象的时候，对象的非静态成员变量也会存入堆空间</li>\n</ul>\n</li>\n<li><p><strong>对齐填充（</strong>Padding<strong>）</strong></p>\n<ul>\n<li>JVM内对象都采用8byte对齐，不够8byte的会自动补齐</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何访问一个对象\"><a href=\"#如何访问一个对象\" class=\"headerlink\" title=\"如何访问一个对象\"></a>如何访问一个对象</h2><ul>\n<li><strong>句柄</strong>：稳定，对象被移动只要修改句柄中的地址</li>\n<li><strong>直接指针</strong>：访问速度快，节省了一次指针定位的开销</li>\n</ul>\n<h1 id=\"JVM垃圾收集器\"><a href=\"#JVM垃圾收集器\" class=\"headerlink\" title=\"JVM垃圾收集器\"></a>JVM垃圾收集器</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>什么是垃圾？</strong></p>\n<blockquote>\n<p>在内存中，没有被引用的对象就是垃圾</p>\n</blockquote>\n<h2 id=\"如何找到这个垃圾？\"><a href=\"#如何找到这个垃圾？\" class=\"headerlink\" title=\"如何找到这个垃圾？\"></a>如何找到这个垃圾？</h2><p>主要是2种：<strong>引用计数法</strong>和<strong>根可达算法</strong></p>\n<ul>\n<li><p><strong>引用计数法（<code>Reference Counting</code>）</strong></p>\n<ul>\n<li><strong>引用计数算法不能解决循环引用问题</strong></li>\n</ul>\n</li>\n<li><p><strong>根可达算法（<code>GCRoots Tracing</code>）</strong></p>\n<ul>\n<li><p>通过一系列的名为<code>GCRoot</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的</p>\n<p>路径称为<strong>引用链（<code>Reference Chain</code>）</strong>，当一个对象到GCRoot没有任何引用链相连时，则证明此对象是不可用的，也就是不可达的</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>可作<code>GCRoots</code>的对象</strong></p>\n<ul>\n<li>虚拟机栈中，栈帧的本地变量表引用的对象</li>\n<li>方法区中，类静态属性引用的对象</li>\n<li>方法区中，常量引用的对象</li>\n<li>本地方法栈中，JNl引用的对象、</li>\n</ul>\n<h2 id=\"回收过程\"><a href=\"#回收过程\" class=\"headerlink\" title=\"回收过程\"></a>回收过程</h2><blockquote>\n<p>垃圾对象在死亡前至少经历两次标记</p>\n</blockquote>\n<p><strong>第一次标记</strong>：如果对象可达性分析后，发现没有与GC Roots相连接的引用链，那它将会被第一次标记</p>\n<p><strong>第二次标记</strong>：第一次标记后，接着会进行一次筛选。筛选条件：此对象是否有必要执行finalize() 方法。在 finalize() 方法中没有重新与引用链建立关联关系的，将被进行第二次标记</p>\n<h2 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h2><blockquote>\n<p>引用分为强引用（<code>StrongReference</code>）、软引用（<code>SoftReference</code>）、弱引用（<code>WeakReference</code>）、虚引用（<code>PhantomReference</code>）四种，这四种引用强度依次逐渐减弱</p>\n</blockquote>\n<h2 id=\"如何清除垃圾？\"><a href=\"#如何清除垃圾？\" class=\"headerlink\" title=\"如何清除垃圾？\"></a>如何清除垃圾？</h2><ul>\n<li><p><strong>Mark-Sweep</strong> <strong>标记清除算法</strong></p>\n</li>\n<li><p><strong>Copying</strong> <strong>拷贝算法</strong></p>\n</li>\n<li><p><strong>Mark-Compact</strong> <strong>标记压缩算法</strong></p>\n</li>\n</ul>\n<h3 id=\"标记清除算法（Mark-Sweep）\"><a href=\"#标记清除算法（Mark-Sweep）\" class=\"headerlink\" title=\"标记清除算法（Mark-Sweep）\"></a>标记清除算法（<code>Mark-Sweep</code>）</h3><p>最基本的算法，主要分为<strong>标记</strong>和<strong>清除</strong>2个阶段。首先<strong>标记出所有需要回收的对象</strong>，在<strong>标记完成后统一回收</strong></p>\n<p><strong>掉所有被标记的对象</strong></p>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><p><strong>效率不高</strong>，<strong>标记和清除</strong>过程的效率都不高</p>\n</li>\n<li><p><strong>空间碎片</strong>，会产生大量不连续的内存碎片，会导致大对象可能无法分配，提前触发GC</p>\n</li>\n</ul>\n<h3 id=\"拷贝算法（Copying）\"><a href=\"#拷贝算法（Copying）\" class=\"headerlink\" title=\"拷贝算法（Copying）\"></a>拷贝算法（<code>Copying</code>）</h3><blockquote>\n<p>现在商业虚拟机都是采用这种收集算法来回收新生代</p>\n</blockquote>\n<p>它将可用内存按容量划分为相等的两块，每次只使用其中的一块。当这一块的内存用完</p>\n<p>了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉</p>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>存在空间浪费</li>\n</ul>\n<h3 id=\"标记整理算法（Mark-Compact）\"><a href=\"#标记整理算法（Mark-Compact）\" class=\"headerlink\" title=\"标记整理算法（Mark-Compact）\"></a>标记整理算法（<code>Mark-Compact</code>）</h3><p>标记过程仍然与“标记-清除”算法一样，然后让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。<strong>没有空间浪费，没有内存碎片化问题</strong></p>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>性能较低，因为除了拷贝对象以外，还需要对象内存空间进行压缩，所以性能较低。</li>\n</ul>\n<h3 id=\"分代回收（Generational-Collection）\"><a href=\"#分代回收（Generational-Collection）\" class=\"headerlink\" title=\"分代回收（Generational Collection）\"></a>分代回收（<code>Generational Collection</code>）</h3><ul>\n<li><strong>新生代</strong>，每次垃圾回收都有大量对象失去，选择<strong>复制算法</strong></li>\n<li><strong>老年代</strong>，对象存活率高，无人进行分配担保，就必须采用<strong>标记清除</strong>或者<strong>标记整理</strong>算法</li>\n</ul>\n<h2 id=\"用什么清除垃圾\"><a href=\"#用什么清除垃圾\" class=\"headerlink\" title=\"用什么清除垃圾\"></a>用什么清除垃圾</h2><p>两大类，串行收集器和并行收集器。<strong>有 8 种不同的垃圾回收器</strong></p>\n<ul>\n<li><p>新生代回收器：<code>Serial</code>、<code>ParNew</code>、<code>Parallel Scavenge</code></p>\n</li>\n<li><p>老年代回收器：<code>Serial Old</code>、<code>Parallel Old</code>、<code>CMS</code></p>\n</li>\n<li><p>整堆回收器：<code>G1</code>、<code>ZGC</code></p>\n</li>\n</ul>\n<h3 id=\"串行收集器\"><a href=\"#串行收集器\" class=\"headerlink\" title=\"串行收集器\"></a>串行收集器</h3><h4 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a><code>Serial</code>收集器</h4><p><strong>配置参数</strong>：<code>-XX:+UseSerialGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><code>Serial</code>新生代收集器，单线程执行，使用复制算法</li>\n<li><code>Serial Old</code>老年代收集器，单线程执行，使用复制算法</li>\n<li>进行垃圾收集时，必须暂停用户线程（挂起，Safepoint）</li>\n</ul>\n<p><strong>Safepoint挂起线程的时机：</strong></p>\n<ul>\n<li>循环的末尾</li>\n<li>方法返回前</li>\n<li>调用方法的call之后</li>\n<li>抛出异常的位置</li>\n</ul>\n<h4 id=\"Parallel-Scavenge并行收集器\"><a href=\"#Parallel-Scavenge并行收集器\" class=\"headerlink\" title=\"Parallel Scavenge并行收集器\"></a><code>Parallel Scavenge</code>并行收集器</h4><p><strong>配置参数：</strong><code>-XX:+UseParallelGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>吞吐量优先收集器，垃圾收集需要暂停用户线程</li>\n<li>新生代使用并行回收收集器，采用<strong>复制算法</strong></li>\n<li>老年代使用<strong>串行</strong>收集器，采用<strong>标记-整理算法</strong></li>\n</ul>\n<h4 id=\"Parallel-Old收集器\"><a href=\"#Parallel-Old收集器\" class=\"headerlink\" title=\"Parallel Old收集器\"></a><code>Parallel Old</code>收集器</h4><p><strong>配置参数：</strong><code> -XX:+UseParallelOldGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>PS（Parallel Scavenge）收集器的老年代版本</li>\n<li>吞吐量优先收集器，垃圾收集需要暂停用户线程</li>\n<li>老年代使用<strong>并行</strong>收集器，采用<strong>标记-整理算法</strong></li>\n</ul>\n<h4 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a><code>ParNew</code>收集器</h4><p><strong>配置参数：</strong><code>-XX:+UseParNewGC</code>或者 <code>-XX:ParallelGCThreads=n</code> 设置并行收集器收集时使用的并行收集线程数。一般最好和计算机的CPU相当</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>新生代并行（<code>ParNew</code>），老年代串行（<code>Serial Old</code>）</li>\n<li>Serial收集器的多线程版本</li>\n<li>单核CPU不建议使用</li>\n</ul>\n<h4 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a><code>CMS</code>收集器</h4><p><strong>配置参数：</strong><code> -XX:+UseConcMarkSweepGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>低延迟：</strong>减少STW对用户体验的影响</li>\n<li>并发收集，可以同时执行用户线程</li>\n<li>不会等到堆填满再收集，到达阈值就开始收集</li>\n<li>采用<strong>标记-清除算法</strong>，所以会产生内存碎片</li>\n</ul>\n<h4 id=\"G1（Garbage-First）收集器（JDK1-8之后）\"><a href=\"#G1（Garbage-First）收集器（JDK1-8之后）\" class=\"headerlink\" title=\"G1（Garbage-First）收集器（JDK1.8之后）\"></a>G1（<code>Garbage-First</code>）收集器（JDK1.8之后）</h4><blockquote>\n<p>G1是一款面向服务端应用的垃圾收集器，<strong>大内存</strong>企业配置的垃圾收集器大多都是G1</p>\n</blockquote>\n<p><strong>配置参数：</strong><code> -XX:+UseG1GC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>吞吐量和低延时都行的整堆垃圾收集器</li>\n<li>G1最大堆内存支持64GB,最小堆内存2GB</li>\n<li>全局采用<strong>标记-整理算法</strong>收集，局部采用<strong>复制算法</strong>收集</li>\n<li>可预测的停顿</li>\n</ul>\n<h4 id=\"ZGC（Z-Garbage-Collector）\"><a href=\"#ZGC（Z-Garbage-Collector）\" class=\"headerlink\" title=\"ZGC（Z Garbage Collector）\"></a>ZGC（<code>Z Garbage Collector</code>）</h4><blockquote>\n<p>在 JDK11 中引入的一种可扩展的低延迟垃圾收集器，在 JDK15 中发布稳定版</p>\n</blockquote>\n<p><strong>配置参数：</strong><code> -XX:+UseZGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><p>并发</p>\n</li>\n<li><p>基于 region</p>\n</li>\n<li><p>压缩</p>\n</li>\n<li><p>NUMA 感知</p>\n</li>\n<li><p>使用彩色指针</p>\n</li>\n<li><p>使用负载屏障</p>\n</li>\n</ul>\n","more":"<h1 id=\"对象的生命周期\"><a href=\"#对象的生命周期\" class=\"headerlink\" title=\"对象的生命周期\"></a>对象的生命周期</h1><h2 id=\"对象创建的流程\"><a href=\"#对象创建的流程\" class=\"headerlink\" title=\"对象创建的流程\"></a>对象创建的流程</h2><h3 id=\"创建流程\"><a href=\"#创建流程\" class=\"headerlink\" title=\"创建流程\"></a>创建流程</h3><p><img src=\"http://file.hyqup.cn/img/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png\" alt=\"对象创建过程\"></p>\n<h3 id=\"对象内存的分配方式\"><a href=\"#对象内存的分配方式\" class=\"headerlink\" title=\"对象内存的分配方式\"></a>对象内存的分配方式</h3><p>内存分配的方法有两种：不同垃圾收集器不一样</p>\n<ul>\n<li><p>指针碰撞(Bump the Pointer)</p>\n<blockquote>\n<p>内存地址是连续的（新生代），Serial 和ParNew 收集器</p>\n</blockquote>\n</li>\n<li><p>空闲列表(Free List)</p>\n<blockquote>\n<p>内存地址不连续（老年代），CMS 收集器和 Mark-Sweep 收集器</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"对象内存分配的安全问题\"><a href=\"#对象内存分配的安全问题\" class=\"headerlink\" title=\"对象内存分配的安全问题\"></a>对象内存分配的安全问题</h3><p>在并发情况下， 可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况</p>\n<p><strong>在JVM中有两种解决办法</strong></p>\n<ul>\n<li>CAS 是<strong>乐观锁</strong>的一种实现方式。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</li>\n<li>TLAB<strong>本地线程分配缓冲</strong>(Thread Local Allocation Buffer即TLAB)：为每一个线程预先分配一块内存</li>\n</ul>\n<h3 id=\"对象怎样才会进入老年代？\"><a href=\"#对象怎样才会进入老年代？\" class=\"headerlink\" title=\"对象怎样才会进入老年代？\"></a>对象怎样才会进入老年代？</h3><p>对象的分配对象情况如下</p>\n<ul>\n<li><p><strong>新生代</strong>：新对象大多数都默认进入新生代的Eden区。伊甸园（希腊神话）</p>\n</li>\n<li><p><strong>老年代</strong>（四种情况）：</p>\n<ul>\n<li><p><strong>存活年龄太大，默认超过15次【<code>-XX:MaxTenuringThreshold</code>】</strong></p>\n</li>\n<li><p><strong>动态年龄判断</strong>，MinorGC之后，发现Survivor区中的一批对象的总大小大于了这块Survivor区</p>\n<p>的50%，那么就会将此时大于等于这批对象年龄最大值的所有对象，直接进入老年代</p>\n</li>\n<li><p><strong>大对象直接进入老年代</strong>，前提是Serial和ParNew收集器</p>\n</li>\n<li><p>MinorGC后，存活对象太多无法放入Survivor</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>空间担保机制</strong></p>\n<blockquote>\n<p>当新生代无法分配内存的时候，我们想把新生代的<strong>老对象</strong>转移到老年代，然后把<strong>新对象</strong>放入腾空的新生代。此种机制我们称之为<strong>内存担保</strong>。</p>\n</blockquote>\n<h2 id=\"对象的内存布局\"><a href=\"#对象的内存布局\" class=\"headerlink\" title=\"对象的内存布局\"></a>对象的内存布局</h2><blockquote>\n<p>堆内存中，一个对象在内存中存储的布局可以分为三块区域</p>\n</blockquote>\n<ul>\n<li><p><strong>对象头（Header）</strong>Java对象头占8byte。如果是数组则占12byte。因为JVM里数组size需要使用</p>\n<p>4byte存储</p>\n<ul>\n<li><strong>标记字段</strong>MarkWord<ul>\n<li>用于存储对象自身的运行时数据，它是synchronized实现轻量级锁和偏向锁的关键</li>\n<li>默认存储：对象HashCode、GC分代年龄、锁状态等等信息</li>\n<li>锁标志位的变化，存储数据发生变化</li>\n</ul>\n</li>\n<li><strong>类型指针</strong>KlassPoint<ul>\n<li>是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例</li>\n<li>开启指针压缩存储空间4byte，不开启8byte</li>\n<li>JDK1.6+默认开启</li>\n</ul>\n</li>\n<li><strong>数组长度</strong><ul>\n<li>如果对象是数组，则记录数组长度，占4个byte，如果对象不是数组则不存在</li>\n</ul>\n</li>\n<li><strong>对齐填充</strong><ul>\n<li>保证数组的大小永远是8byte的整数倍</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>实例数据（</strong>Instance Data）</p>\n<ul>\n<li>生成对象的时候，对象的非静态成员变量也会存入堆空间</li>\n</ul>\n</li>\n<li><p><strong>对齐填充（</strong>Padding<strong>）</strong></p>\n<ul>\n<li>JVM内对象都采用8byte对齐，不够8byte的会自动补齐</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何访问一个对象\"><a href=\"#如何访问一个对象\" class=\"headerlink\" title=\"如何访问一个对象\"></a>如何访问一个对象</h2><ul>\n<li><strong>句柄</strong>：稳定，对象被移动只要修改句柄中的地址</li>\n<li><strong>直接指针</strong>：访问速度快，节省了一次指针定位的开销</li>\n</ul>\n<h1 id=\"JVM垃圾收集器\"><a href=\"#JVM垃圾收集器\" class=\"headerlink\" title=\"JVM垃圾收集器\"></a>JVM垃圾收集器</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>什么是垃圾？</strong></p>\n<blockquote>\n<p>在内存中，没有被引用的对象就是垃圾</p>\n</blockquote>\n<h2 id=\"如何找到这个垃圾？\"><a href=\"#如何找到这个垃圾？\" class=\"headerlink\" title=\"如何找到这个垃圾？\"></a>如何找到这个垃圾？</h2><p>主要是2种：<strong>引用计数法</strong>和<strong>根可达算法</strong></p>\n<ul>\n<li><p><strong>引用计数法（<code>Reference Counting</code>）</strong></p>\n<ul>\n<li><strong>引用计数算法不能解决循环引用问题</strong></li>\n</ul>\n</li>\n<li><p><strong>根可达算法（<code>GCRoots Tracing</code>）</strong></p>\n<ul>\n<li><p>通过一系列的名为<code>GCRoot</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走过的</p>\n<p>路径称为<strong>引用链（<code>Reference Chain</code>）</strong>，当一个对象到GCRoot没有任何引用链相连时，则证明此对象是不可用的，也就是不可达的</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>可作<code>GCRoots</code>的对象</strong></p>\n<ul>\n<li>虚拟机栈中，栈帧的本地变量表引用的对象</li>\n<li>方法区中，类静态属性引用的对象</li>\n<li>方法区中，常量引用的对象</li>\n<li>本地方法栈中，JNl引用的对象、</li>\n</ul>\n<h2 id=\"回收过程\"><a href=\"#回收过程\" class=\"headerlink\" title=\"回收过程\"></a>回收过程</h2><blockquote>\n<p>垃圾对象在死亡前至少经历两次标记</p>\n</blockquote>\n<p><strong>第一次标记</strong>：如果对象可达性分析后，发现没有与GC Roots相连接的引用链，那它将会被第一次标记</p>\n<p><strong>第二次标记</strong>：第一次标记后，接着会进行一次筛选。筛选条件：此对象是否有必要执行finalize() 方法。在 finalize() 方法中没有重新与引用链建立关联关系的，将被进行第二次标记</p>\n<h2 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h2><blockquote>\n<p>引用分为强引用（<code>StrongReference</code>）、软引用（<code>SoftReference</code>）、弱引用（<code>WeakReference</code>）、虚引用（<code>PhantomReference</code>）四种，这四种引用强度依次逐渐减弱</p>\n</blockquote>\n<h2 id=\"如何清除垃圾？\"><a href=\"#如何清除垃圾？\" class=\"headerlink\" title=\"如何清除垃圾？\"></a>如何清除垃圾？</h2><ul>\n<li><p><strong>Mark-Sweep</strong> <strong>标记清除算法</strong></p>\n</li>\n<li><p><strong>Copying</strong> <strong>拷贝算法</strong></p>\n</li>\n<li><p><strong>Mark-Compact</strong> <strong>标记压缩算法</strong></p>\n</li>\n</ul>\n<h3 id=\"标记清除算法（Mark-Sweep）\"><a href=\"#标记清除算法（Mark-Sweep）\" class=\"headerlink\" title=\"标记清除算法（Mark-Sweep）\"></a>标记清除算法（<code>Mark-Sweep</code>）</h3><p>最基本的算法，主要分为<strong>标记</strong>和<strong>清除</strong>2个阶段。首先<strong>标记出所有需要回收的对象</strong>，在<strong>标记完成后统一回收</strong></p>\n<p><strong>掉所有被标记的对象</strong></p>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><p><strong>效率不高</strong>，<strong>标记和清除</strong>过程的效率都不高</p>\n</li>\n<li><p><strong>空间碎片</strong>，会产生大量不连续的内存碎片，会导致大对象可能无法分配，提前触发GC</p>\n</li>\n</ul>\n<h3 id=\"拷贝算法（Copying）\"><a href=\"#拷贝算法（Copying）\" class=\"headerlink\" title=\"拷贝算法（Copying）\"></a>拷贝算法（<code>Copying</code>）</h3><blockquote>\n<p>现在商业虚拟机都是采用这种收集算法来回收新生代</p>\n</blockquote>\n<p>它将可用内存按容量划分为相等的两块，每次只使用其中的一块。当这一块的内存用完</p>\n<p>了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉</p>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>存在空间浪费</li>\n</ul>\n<h3 id=\"标记整理算法（Mark-Compact）\"><a href=\"#标记整理算法（Mark-Compact）\" class=\"headerlink\" title=\"标记整理算法（Mark-Compact）\"></a>标记整理算法（<code>Mark-Compact</code>）</h3><p>标记过程仍然与“标记-清除”算法一样，然后让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。<strong>没有空间浪费，没有内存碎片化问题</strong></p>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>性能较低，因为除了拷贝对象以外，还需要对象内存空间进行压缩，所以性能较低。</li>\n</ul>\n<h3 id=\"分代回收（Generational-Collection）\"><a href=\"#分代回收（Generational-Collection）\" class=\"headerlink\" title=\"分代回收（Generational Collection）\"></a>分代回收（<code>Generational Collection</code>）</h3><ul>\n<li><strong>新生代</strong>，每次垃圾回收都有大量对象失去，选择<strong>复制算法</strong></li>\n<li><strong>老年代</strong>，对象存活率高，无人进行分配担保，就必须采用<strong>标记清除</strong>或者<strong>标记整理</strong>算法</li>\n</ul>\n<h2 id=\"用什么清除垃圾\"><a href=\"#用什么清除垃圾\" class=\"headerlink\" title=\"用什么清除垃圾\"></a>用什么清除垃圾</h2><p>两大类，串行收集器和并行收集器。<strong>有 8 种不同的垃圾回收器</strong></p>\n<ul>\n<li><p>新生代回收器：<code>Serial</code>、<code>ParNew</code>、<code>Parallel Scavenge</code></p>\n</li>\n<li><p>老年代回收器：<code>Serial Old</code>、<code>Parallel Old</code>、<code>CMS</code></p>\n</li>\n<li><p>整堆回收器：<code>G1</code>、<code>ZGC</code></p>\n</li>\n</ul>\n<h3 id=\"串行收集器\"><a href=\"#串行收集器\" class=\"headerlink\" title=\"串行收集器\"></a>串行收集器</h3><h4 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a><code>Serial</code>收集器</h4><p><strong>配置参数</strong>：<code>-XX:+UseSerialGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><code>Serial</code>新生代收集器，单线程执行，使用复制算法</li>\n<li><code>Serial Old</code>老年代收集器，单线程执行，使用复制算法</li>\n<li>进行垃圾收集时，必须暂停用户线程（挂起，Safepoint）</li>\n</ul>\n<p><strong>Safepoint挂起线程的时机：</strong></p>\n<ul>\n<li>循环的末尾</li>\n<li>方法返回前</li>\n<li>调用方法的call之后</li>\n<li>抛出异常的位置</li>\n</ul>\n<h4 id=\"Parallel-Scavenge并行收集器\"><a href=\"#Parallel-Scavenge并行收集器\" class=\"headerlink\" title=\"Parallel Scavenge并行收集器\"></a><code>Parallel Scavenge</code>并行收集器</h4><p><strong>配置参数：</strong><code>-XX:+UseParallelGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>吞吐量优先收集器，垃圾收集需要暂停用户线程</li>\n<li>新生代使用并行回收收集器，采用<strong>复制算法</strong></li>\n<li>老年代使用<strong>串行</strong>收集器，采用<strong>标记-整理算法</strong></li>\n</ul>\n<h4 id=\"Parallel-Old收集器\"><a href=\"#Parallel-Old收集器\" class=\"headerlink\" title=\"Parallel Old收集器\"></a><code>Parallel Old</code>收集器</h4><p><strong>配置参数：</strong><code> -XX:+UseParallelOldGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>PS（Parallel Scavenge）收集器的老年代版本</li>\n<li>吞吐量优先收集器，垃圾收集需要暂停用户线程</li>\n<li>老年代使用<strong>并行</strong>收集器，采用<strong>标记-整理算法</strong></li>\n</ul>\n<h4 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a><code>ParNew</code>收集器</h4><p><strong>配置参数：</strong><code>-XX:+UseParNewGC</code>或者 <code>-XX:ParallelGCThreads=n</code> 设置并行收集器收集时使用的并行收集线程数。一般最好和计算机的CPU相当</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>新生代并行（<code>ParNew</code>），老年代串行（<code>Serial Old</code>）</li>\n<li>Serial收集器的多线程版本</li>\n<li>单核CPU不建议使用</li>\n</ul>\n<h4 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a><code>CMS</code>收集器</h4><p><strong>配置参数：</strong><code> -XX:+UseConcMarkSweepGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>低延迟：</strong>减少STW对用户体验的影响</li>\n<li>并发收集，可以同时执行用户线程</li>\n<li>不会等到堆填满再收集，到达阈值就开始收集</li>\n<li>采用<strong>标记-清除算法</strong>，所以会产生内存碎片</li>\n</ul>\n<h4 id=\"G1（Garbage-First）收集器（JDK1-8之后）\"><a href=\"#G1（Garbage-First）收集器（JDK1-8之后）\" class=\"headerlink\" title=\"G1（Garbage-First）收集器（JDK1.8之后）\"></a>G1（<code>Garbage-First</code>）收集器（JDK1.8之后）</h4><blockquote>\n<p>G1是一款面向服务端应用的垃圾收集器，<strong>大内存</strong>企业配置的垃圾收集器大多都是G1</p>\n</blockquote>\n<p><strong>配置参数：</strong><code> -XX:+UseG1GC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>吞吐量和低延时都行的整堆垃圾收集器</li>\n<li>G1最大堆内存支持64GB,最小堆内存2GB</li>\n<li>全局采用<strong>标记-整理算法</strong>收集，局部采用<strong>复制算法</strong>收集</li>\n<li>可预测的停顿</li>\n</ul>\n<h4 id=\"ZGC（Z-Garbage-Collector）\"><a href=\"#ZGC（Z-Garbage-Collector）\" class=\"headerlink\" title=\"ZGC（Z Garbage Collector）\"></a>ZGC（<code>Z Garbage Collector</code>）</h4><blockquote>\n<p>在 JDK11 中引入的一种可扩展的低延迟垃圾收集器，在 JDK15 中发布稳定版</p>\n</blockquote>\n<p><strong>配置参数：</strong><code> -XX:+UseZGC</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li><p>并发</p>\n</li>\n<li><p>基于 region</p>\n</li>\n<li><p>压缩</p>\n</li>\n<li><p>NUMA 感知</p>\n</li>\n<li><p>使用彩色指针</p>\n</li>\n<li><p>使用负载屏障</p>\n</li>\n</ul>","categories":[],"tags":[]}