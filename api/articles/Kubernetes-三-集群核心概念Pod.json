{"title":"Kubernetes(三)-集群核心概念Pod","slug":"Kubernetes-三-集群核心概念Pod","date":"2023-06-26T07:39:40.000Z","updated":"2024-04-22T07:21:14.887Z","comments":true,"path":"api/articles/Kubernetes-三-集群核心概念Pod.json","excerpt":"Pod的介绍、创建、调度及生命周期","covers":null,"content":"<p>Pod的介绍、创建、调度及生命周期</p>\n<span id=\"more\"></span>\n\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>Pod(豌豆荚) 是Kubernetes集群管理（创建、部署）与调度的最小计算单元，表示处于运行状态的一组容器</li>\n<li>Pod不是进程，而是容器运行的环境。</li>\n<li>一个Pod可以封装<strong>一个容器或多个容器(主容器或sidecar边车容器)</strong></li>\n<li>一个pod内的多个容器之间共享部分命名空间，例如：Net Namespace,UTS Namespace,IPC Namespace及存储资源</li>\n<li>pod内的IP不是固定的，集群外不能直接访问pod</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li><h6 id=\"静态Pod\"><a href=\"#静态Pod\" class=\"headerlink\" title=\"静态Pod\"></a>静态Pod</h6><p>也称之为“无控制器管理的自主式pod”，直接由特定节点上的 <code>kubelet</code> 守护进程管理， 不需要API 服务器看到它们</p>\n</li>\n<li><h6 id=\"控制器管理的pod\"><a href=\"#控制器管理的pod\" class=\"headerlink\" title=\"控制器管理的pod\"></a>控制器管理的pod</h6></li>\n</ul>\n<p>​\t\t控制器可以控制pod的副本数，扩容与裁剪，版本更新与回滚等</p>\n<h3 id=\"查看pod\"><a href=\"#查看pod\" class=\"headerlink\" title=\"查看pod\"></a>查看pod</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看pod</span>\nkubectl get pod\n<span class=\"token comment\">#查看命名空间下的pod</span>\nkubectl get pod <span class=\"token parameter variable\">-n</span> kube-system<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"pod的YAML资源清单格式\"><a href=\"#pod的YAML资源清单格式\" class=\"headerlink\" title=\"pod的YAML资源清单格式\"></a>pod的YAML资源清单格式</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># yaml格式的pod定义文件完整内容：</span>\napiVersion: v1       <span class=\"token comment\">#必选，api版本号，例如v1</span>\nkind: Pod       \t<span class=\"token comment\">#必选，Pod</span>\nmetadata:       \t<span class=\"token comment\">#必选，元数据</span>\n  name: string       <span class=\"token comment\">#必选，Pod名称</span>\n  namespace: string    <span class=\"token comment\">#Pod所属的命名空间,默认在default的namespace</span>\n  labels:     \t\t <span class=\"token comment\"># 自定义标签</span>\n    name: string     <span class=\"token comment\">#自定义标签名字</span>\n  annotations:        <span class=\"token comment\">#自定义注释列表</span>\n    name: string\nspec:         <span class=\"token comment\">#必选，Pod中容器的详细定义(期望)</span>\n  containers:      <span class=\"token comment\">#必选，Pod中容器列表</span>\n  - name: string     <span class=\"token comment\">#必选，容器名称</span>\n    image: string    <span class=\"token comment\">#必选，容器的镜像名称</span>\n    imagePullPolicy: <span class=\"token punctuation\">[</span>Always <span class=\"token operator\">|</span> Never <span class=\"token operator\">|</span> IfNotPresent<span class=\"token punctuation\">]</span> <span class=\"token comment\">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span>\n    command: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>    <span class=\"token comment\">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span>\n    args: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>     <span class=\"token comment\">#容器的启动命令参数列表</span>\n    workingDir: string     <span class=\"token comment\">#容器的工作目录</span>\n    volumeMounts:    <span class=\"token comment\">#挂载到容器内部的存储卷配置</span>\n    - name: string     <span class=\"token comment\">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span>\n      mountPath: string    <span class=\"token comment\">#存储卷在容器内mount的绝对路径，应少于512字符</span>\n      readOnly: boolean    <span class=\"token comment\">#是否为只读模式</span>\n    ports:       <span class=\"token comment\">#需要暴露的端口库号列表</span>\n    - name: string     <span class=\"token comment\">#端口号名称</span>\n      containerPort: int   <span class=\"token comment\">#容器需要监听的端口号</span>\n      hostPort: int    <span class=\"token comment\">#容器所在主机需要监听的端口号，默认与Container相同</span>\n      protocol: string     <span class=\"token comment\">#端口协议，支持TCP和UDP，默认TCP</span>\n    env:       <span class=\"token comment\">#容器运行前需设置的环境变量列表</span>\n    - name: string     <span class=\"token comment\">#环境变量名称</span>\n      value: string    <span class=\"token comment\">#环境变量的值</span>\n    resources:       <span class=\"token comment\">#资源限制和请求的设置</span>\n      limits:      <span class=\"token comment\">#资源限制的设置</span>\n        cpu: string    <span class=\"token comment\">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span>\n        memory: string     <span class=\"token comment\">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span>\n      requests:      <span class=\"token comment\">#资源请求的设置</span>\n        cpu: string    <span class=\"token comment\">#Cpu请求，容器启动的初始可用数量</span>\n        memory: string     <span class=\"token comment\">#内存清求，容器启动的初始可用数量</span>\n    livenessProbe:     <span class=\"token comment\">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span>\n      exec:      <span class=\"token comment\">#对Pod容器内检查方式设置为exec方式</span>\n        command: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>  <span class=\"token comment\">#exec方式需要制定的命令或脚本</span>\n      httpGet:       <span class=\"token comment\">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span>\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     <span class=\"token comment\">#对Pod内个容器健康检查方式设置为tcpSocket方式</span>\n         port: number\n       initialDelaySeconds: <span class=\"token number\">0</span>  <span class=\"token comment\">#容器启动完成后首次探测的时间，单位为秒</span>\n       timeoutSeconds: <span class=\"token number\">0</span>   <span class=\"token comment\">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span>\n       periodSeconds: <span class=\"token number\">0</span>    <span class=\"token comment\">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span>\n       successThreshold: <span class=\"token number\">0</span>\n       failureThreshold: <span class=\"token number\">0</span>\n       securityContext:\n         privileged:false\n    restartPolicy: <span class=\"token punctuation\">[</span>Always <span class=\"token operator\">|</span> Never <span class=\"token operator\">|</span> OnFailure<span class=\"token punctuation\">]</span> <span class=\"token comment\"># Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span>\n    nodeSelector: obeject  <span class=\"token comment\"># 设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span>\n    imagePullSecrets:    <span class=\"token comment\">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span>\n    - name: string\n    hostNetwork: <span class=\"token boolean\">false</span>     <span class=\"token comment\">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span>\n    volumes:       <span class=\"token comment\">#在该pod上定义共享存储卷列表</span>\n    - name: string     <span class=\"token comment\">#共享存储卷名称 （volumes类型有很多种）</span>\n      emptyDir: <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>     <span class=\"token comment\">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span>\n      hostPath: string     <span class=\"token comment\">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span>\n        path: string     <span class=\"token comment\">#Pod所在宿主机的目录，将被用于同期中mount的目录</span>\n      secret:      <span class=\"token comment\">#类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span>\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     <span class=\"token comment\">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span>\n        name: string\n        items:\n        - key: string\n          path: string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>注：如果不清楚某个参数的写法，可使用 kubectl explain 命令完成</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl explain pod\nkubectl explain pod.spec<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></div></figure>\n\n<h2 id=\"pod调度\"><a href=\"#pod调度\" class=\"headerlink\" title=\"pod调度\"></a>pod调度</h2><blockquote>\n<p>以使用约束把pod调度到指定的node节点</p>\n</blockquote>\n<h3 id=\"调度约束方法\"><a href=\"#调度约束方法\" class=\"headerlink\" title=\"调度约束方法\"></a>调度约束方法</h3><ul>\n<li>nodeName 用于将pod调度到指定的node名称上</li>\n<li>nodeSelector 用于将pod调度到匹配Label的node上</li>\n</ul>\n<p><strong>第一种</strong>：spec.nodeName 将容器调度到指定节点上</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim pod-nodename.yml</span>\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-nodename\nspec:\n  nodeName: k8s-worker1                    <span class=\"token comment\"># 通过nodeName调度到k8s-worker1节点</span>\n  containers:\n  - name: nginx\n    image: nginx:1.15-alpine<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p><strong>第二种</strong>：spec.nodeSelector nodeSelector节点选择器调度到指定节点上去</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim pod-nodeselector.yml</span>\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-nodeselect\nspec:\n  nodeSelector:                         <span class=\"token comment\"># nodeSelector节点选择器</span>\n    bussiness: game                     <span class=\"token comment\"># 指定调度到标签为bussiness=game的节点</span>\n  containers:\n  - name: nginx\n    image: nginx:1.15-alpine<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h3 id=\"pod生命周期\"><a href=\"#pod生命周期\" class=\"headerlink\" title=\"pod生命周期\"></a>pod生命周期</h3><ul>\n<li>有些pod(比如运行httpd服务),正常情况下会一直运行中,但如果手动删除它,此pod会终止</li>\n<li>也有些pod(比如执行计算任务)，任务计算完后就会自动终止</li>\n</ul>\n<p>上面两种场景中,pod从创建到终止的过程就是pod的生命周期。</p>\n<h4 id=\"容器启动\"><a href=\"#容器启动\" class=\"headerlink\" title=\"容器启动\"></a>容器启动</h4><p>启动后钩子<code>post-start</code>执行后执行做<strong>健康检查</strong></p>\n<ul>\n<li><p>第一个健康检查叫存活状态检查(<code>liveness probe</code> )，用来检查主容器<strong>存活状态</strong>的</p>\n</li>\n<li><p>第二个健康检查叫准备就绪检查(<code>readiness probe</code>)，用来检查主容器是否<strong>启动就绪</strong></p>\n</li>\n</ul>\n<h4 id=\"容器重启策略\"><a href=\"#容器重启策略\" class=\"headerlink\" title=\"容器重启策略\"></a>容器重启策略</h4><ul>\n<li><p><strong>Always</strong>：表示容器挂了总是重启，这是默认策略 </p>\n</li>\n<li><p><strong>OnFailures</strong>：表示容器状态为错误时才重启，也就是容器正常终止时不重启 </p>\n</li>\n<li><p><strong>Never</strong>：表示容器挂了不予重启 </p>\n</li>\n<li><p>对于Always这种策略，容器只要挂了，就会立即重启，这样是很耗费资源的。所以Always重启策略是这么做的：第一次容器挂了立即重启，如果再挂了就要延时10s重启，第三次挂了就等20s重启…… 依次类推</p>\n</li>\n</ul>\n<h3 id=\"HealthCheck健康检查\"><a href=\"#HealthCheck健康检查\" class=\"headerlink\" title=\"HealthCheck健康检查\"></a>HealthCheck健康检查</h3><p>当Pod启动时，容器可能会因为某种错误(服务未启动或端口不正确)而无法访问等。</p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Liveness Probe(存活状态探测)</td>\n<td>指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\">重启策略</a>决定未来。如果容器不提供存活探针， 则默认状态为 <code>Success</code>。</td>\n</tr>\n<tr>\n<td>readiness Probe(就绪型探测)</td>\n<td>指示容器是否准备好为请求提供服务。如果就绪态探测失败， 端点控制器将从与 Pod 匹配的所有服务的端点列表中删除该 Pod 的 IP 地址。 初始延迟之前的就绪态的状态值默认为 <code>Failure</code>。 如果容器不提供就绪态探针，则默认状态为 <code>Success</code>。注：检查后不健康，将容器设置为Notready;如果使用service来访问,流量不会转发给此种状态的pod</td>\n</tr>\n<tr>\n<td>startup Probe</td>\n<td>指示容器中的应用是否已经启动。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，<code>kubelet</code> 将杀死容器，而容器依其 <a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\">重启策略</a>进行重启。 如果容器没有提供启动探测，则默认状态为 <code>Success</code>。</td>\n</tr>\n</tbody></table>\n<h4 id=\"Probe探测方式\"><a href=\"#Probe探测方式\" class=\"headerlink\" title=\"Probe探测方式\"></a>Probe探测方式</h4><table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Exec</td>\n<td>执行命令</td>\n</tr>\n<tr>\n<td>HTTPGet</td>\n<td>http请求某一个URL路径</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>tcp连接某一个端口</td>\n</tr>\n<tr>\n<td>gRPC</td>\n<td>使用 <a href=\"https://grpc.io/\">gRPC</a> 执行一个远程过程调用。 目标应该实现 <a href=\"https://grpc.io/grpc/core/md_doc_health-checking.html\">gRPC健康检查</a>。 如果响应的状态是 “SERVING”，则认为诊断成功。 gRPC 探针是一个 alpha 特性，只有在你启用了 “GRPCContainerProbe” <a href=\"https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gate/\">特性门控</a>时才能使用。</td>\n</tr>\n</tbody></table>\n<h4 id=\"liveness-exec案例\"><a href=\"#liveness-exec案例\" class=\"headerlink\" title=\"liveness-exec案例\"></a>liveness-exec案例</h4><p>1、准备资源清单文件pod-liveness-exec.yml</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness<span class=\"token punctuation\">-</span>exec\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> /bin/sh\n    <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>c\n    <span class=\"token punctuation\">-</span> touch /tmp/healthy; sleep 30; rm <span class=\"token punctuation\">-</span>rf /tmp/healthy; sleep 600\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> cat\n        <span class=\"token punctuation\">-</span> /tmp/healthy\n      <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> \t\t\t\t<span class=\"token comment\"># pod启动延迟5秒后探测</span>\n      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> \t\t\t\t\t\t<span class=\"token comment\"># 每5秒探测1次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>2、应用yaml文件</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-liveness-exec.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h4 id=\"liveness-httpget案例\"><a href=\"#liveness-httpget案例\" class=\"headerlink\" title=\"liveness-httpget案例\"></a>liveness-httpget案例</h4><p>1、准备资源清单文件pod-liveness-httpget.yml</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness<span class=\"token punctuation\">-</span>httpget\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.15<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\t\t\t\t\t\t\t    <span class=\"token comment\"># 指定容器端口，这一段不写也行，端口由镜像决定 </span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\t\t\t\t\t\t<span class=\"token comment\"># 自定义名称，不需要与下面的port: http对应</span>\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\t\t\t\t\t<span class=\"token comment\"># 类似dockerfile里的expose 80</span>\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>                          <span class=\"token comment\"># 使用httpGet方式</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> http                      <span class=\"token comment\"># http协议,也可以直接写80端口</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /index.html               <span class=\"token comment\"># 探测家目录下的index.html</span>\n      <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>            <span class=\"token comment\"># 延迟3秒开始探测</span>\n      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>                  <span class=\"token comment\"># 每隔5s钟探测一次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>2、应用YAML文件</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-liveness-httpget.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h4 id=\"liveness-tcp案例\"><a href=\"#liveness-tcp案例\" class=\"headerlink\" title=\"liveness-tcp案例\"></a>liveness-tcp案例</h4><p>1、准备资源文件pod-liveness-tcp.yml</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness<span class=\"token punctuation\">-</span>tcp\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.15<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">tcpSocket</span><span class=\"token punctuation\">:</span>                        <span class=\"token comment\"># 使用tcp连接方式</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>                        <span class=\"token comment\"># 连接80端口进行探测</span>\n      <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>2、应用YAML文件</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-liveness-tcp.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h4 id=\"readiness案例\"><a href=\"#readiness案例\" class=\"headerlink\" title=\"readiness案例\"></a>readiness案例</h4><p>1、准备资源配置文件pod-readiness-httpget.yml</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim pod-readiness-httpget.yml</span>\napiVersion: v1\nkind: Pod\nmetadata:\n  name: readiness-httpget\n  namespace: default\nspec:\n  containers:\n  - name: readiness\n    image: nginx:1.15-alpine\n    imagePullPolicy: IfNotPresent\n    ports:\n    - name: http\n      containerPort: <span class=\"token number\">80</span>\n    readinessProbe:                     <span class=\"token comment\"># 这里由liveness换成了readiness</span>\n      httpGet:\n        port: http\n        path: /index.html\n      initialDelaySeconds: <span class=\"token number\">3</span>\n      periodSeconds: <span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>2、应用YAML文件</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-readiness-httpget.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h3 id=\"post-start\"><a href=\"#post-start\" class=\"headerlink\" title=\"post-start\"></a>post-start</h3><blockquote>\n<p>容器启动后执行的命令</p>\n</blockquote>\n<p>1、准备资源清单文件pod-poststart.yml</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: poststart\n  namespace: default\nspec:\n  containers:\n  - name: poststart\n    image: nginx:1.15-alpine\n    imagePullPolicy: IfNotPresent\n    lifecycle:                                       <span class=\"token comment\"># 生命周期事件</span>\n      postStart:\n        exec:\n          command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"mkdir\"</span>,<span class=\"token string\">\"-p\"</span>,<span class=\"token string\">\"/usr/share/nginx/html/haha\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>2、应用资源文件</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-poststart.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>3、查看是否创建成功</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> poststart -- <span class=\"token function\">ls</span> /usr/share/nginx/html <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h3 id=\"pre-stop\"><a href=\"#pre-stop\" class=\"headerlink\" title=\"pre-stop\"></a>pre-stop</h3><blockquote>\n<p>容器终止前执行的命令</p>\n</blockquote>\n<p>1、准备资源清单文件prestop.yml</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: prestop\n  namespace: default\nspec:\n  containers:\n  - name: prestop\n    image: nginx:1.15-alpine\n    imagePullPolicy: IfNotPresent\n    lifecycle:                                       <span class=\"token comment\"># 生命周期事件</span>\n      preStop:                                       <span class=\"token comment\"># preStop</span>\n        exec:\n          command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span>,<span class=\"token string\">\"-c\"</span>,<span class=\"token string\">\"sleep 60000000\"</span><span class=\"token punctuation\">]</span>     <span class=\"token comment\"># 容器终止前sleep 60000000秒</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>2、应用资源文件</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> prestop.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>3、删除验证</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl delete <span class=\"token parameter variable\">-f</span> prestop.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>Pod(豌豆荚) 是Kubernetes集群管理（创建、部署）与调度的最小计算单元，表示处于运行状态的一组容器</li>\n<li>Pod不是进程，而是容器运行的环境。</li>\n<li>一个Pod可以封装<strong>一个容器或多个容器(主容器或sidecar边车容器)</strong></li>\n<li>一个pod内的多个容器之间共享部分命名空间，例如：Net Namespace,UTS Namespace,IPC Namespace及存储资源</li>\n<li>pod内的IP不是固定的，集群外不能直接访问pod</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li><h6 id=\"静态Pod\"><a href=\"#静态Pod\" class=\"headerlink\" title=\"静态Pod\"></a>静态Pod</h6><p>也称之为“无控制器管理的自主式pod”，直接由特定节点上的 <code>kubelet</code> 守护进程管理， 不需要API 服务器看到它们</p>\n</li>\n<li><h6 id=\"控制器管理的pod\"><a href=\"#控制器管理的pod\" class=\"headerlink\" title=\"控制器管理的pod\"></a>控制器管理的pod</h6></li>\n</ul>\n<p>​\t\t控制器可以控制pod的副本数，扩容与裁剪，版本更新与回滚等</p>\n<h3 id=\"查看pod\"><a href=\"#查看pod\" class=\"headerlink\" title=\"查看pod\"></a>查看pod</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看pod</span>\nkubectl get pod\n<span class=\"token comment\">#查看命名空间下的pod</span>\nkubectl get pod <span class=\"token parameter variable\">-n</span> kube-system<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"pod的YAML资源清单格式\"><a href=\"#pod的YAML资源清单格式\" class=\"headerlink\" title=\"pod的YAML资源清单格式\"></a>pod的YAML资源清单格式</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># yaml格式的pod定义文件完整内容：</span>\napiVersion: v1       <span class=\"token comment\">#必选，api版本号，例如v1</span>\nkind: Pod       \t<span class=\"token comment\">#必选，Pod</span>\nmetadata:       \t<span class=\"token comment\">#必选，元数据</span>\n  name: string       <span class=\"token comment\">#必选，Pod名称</span>\n  namespace: string    <span class=\"token comment\">#Pod所属的命名空间,默认在default的namespace</span>\n  labels:     \t\t <span class=\"token comment\"># 自定义标签</span>\n    name: string     <span class=\"token comment\">#自定义标签名字</span>\n  annotations:        <span class=\"token comment\">#自定义注释列表</span>\n    name: string\nspec:         <span class=\"token comment\">#必选，Pod中容器的详细定义(期望)</span>\n  containers:      <span class=\"token comment\">#必选，Pod中容器列表</span>\n  - name: string     <span class=\"token comment\">#必选，容器名称</span>\n    image: string    <span class=\"token comment\">#必选，容器的镜像名称</span>\n    imagePullPolicy: <span class=\"token punctuation\">[</span>Always <span class=\"token operator\">|</span> Never <span class=\"token operator\">|</span> IfNotPresent<span class=\"token punctuation\">]</span> <span class=\"token comment\">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span>\n    command: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>    <span class=\"token comment\">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span>\n    args: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>     <span class=\"token comment\">#容器的启动命令参数列表</span>\n    workingDir: string     <span class=\"token comment\">#容器的工作目录</span>\n    volumeMounts:    <span class=\"token comment\">#挂载到容器内部的存储卷配置</span>\n    - name: string     <span class=\"token comment\">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span>\n      mountPath: string    <span class=\"token comment\">#存储卷在容器内mount的绝对路径，应少于512字符</span>\n      readOnly: boolean    <span class=\"token comment\">#是否为只读模式</span>\n    ports:       <span class=\"token comment\">#需要暴露的端口库号列表</span>\n    - name: string     <span class=\"token comment\">#端口号名称</span>\n      containerPort: int   <span class=\"token comment\">#容器需要监听的端口号</span>\n      hostPort: int    <span class=\"token comment\">#容器所在主机需要监听的端口号，默认与Container相同</span>\n      protocol: string     <span class=\"token comment\">#端口协议，支持TCP和UDP，默认TCP</span>\n    env:       <span class=\"token comment\">#容器运行前需设置的环境变量列表</span>\n    - name: string     <span class=\"token comment\">#环境变量名称</span>\n      value: string    <span class=\"token comment\">#环境变量的值</span>\n    resources:       <span class=\"token comment\">#资源限制和请求的设置</span>\n      limits:      <span class=\"token comment\">#资源限制的设置</span>\n        cpu: string    <span class=\"token comment\">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span>\n        memory: string     <span class=\"token comment\">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span>\n      requests:      <span class=\"token comment\">#资源请求的设置</span>\n        cpu: string    <span class=\"token comment\">#Cpu请求，容器启动的初始可用数量</span>\n        memory: string     <span class=\"token comment\">#内存清求，容器启动的初始可用数量</span>\n    livenessProbe:     <span class=\"token comment\">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span>\n      exec:      <span class=\"token comment\">#对Pod容器内检查方式设置为exec方式</span>\n        command: <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>  <span class=\"token comment\">#exec方式需要制定的命令或脚本</span>\n      httpGet:       <span class=\"token comment\">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span>\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     <span class=\"token comment\">#对Pod内个容器健康检查方式设置为tcpSocket方式</span>\n         port: number\n       initialDelaySeconds: <span class=\"token number\">0</span>  <span class=\"token comment\">#容器启动完成后首次探测的时间，单位为秒</span>\n       timeoutSeconds: <span class=\"token number\">0</span>   <span class=\"token comment\">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span>\n       periodSeconds: <span class=\"token number\">0</span>    <span class=\"token comment\">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span>\n       successThreshold: <span class=\"token number\">0</span>\n       failureThreshold: <span class=\"token number\">0</span>\n       securityContext:\n         privileged:false\n    restartPolicy: <span class=\"token punctuation\">[</span>Always <span class=\"token operator\">|</span> Never <span class=\"token operator\">|</span> OnFailure<span class=\"token punctuation\">]</span> <span class=\"token comment\"># Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span>\n    nodeSelector: obeject  <span class=\"token comment\"># 设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span>\n    imagePullSecrets:    <span class=\"token comment\">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span>\n    - name: string\n    hostNetwork: <span class=\"token boolean\">false</span>     <span class=\"token comment\">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span>\n    volumes:       <span class=\"token comment\">#在该pod上定义共享存储卷列表</span>\n    - name: string     <span class=\"token comment\">#共享存储卷名称 （volumes类型有很多种）</span>\n      emptyDir: <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>     <span class=\"token comment\">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span>\n      hostPath: string     <span class=\"token comment\">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span>\n        path: string     <span class=\"token comment\">#Pod所在宿主机的目录，将被用于同期中mount的目录</span>\n      secret:      <span class=\"token comment\">#类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span>\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     <span class=\"token comment\">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span>\n        name: string\n        items:\n        - key: string\n          path: string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注：如果不清楚某个参数的写法，可使用 kubectl explain 命令完成</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl explain pod\nkubectl explain pod.spec<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"pod调度\"><a href=\"#pod调度\" class=\"headerlink\" title=\"pod调度\"></a>pod调度</h2><blockquote>\n<p>以使用约束把pod调度到指定的node节点</p>\n</blockquote>\n<h3 id=\"调度约束方法\"><a href=\"#调度约束方法\" class=\"headerlink\" title=\"调度约束方法\"></a>调度约束方法</h3><ul>\n<li>nodeName 用于将pod调度到指定的node名称上</li>\n<li>nodeSelector 用于将pod调度到匹配Label的node上</li>\n</ul>\n<p><strong>第一种</strong>：spec.nodeName 将容器调度到指定节点上</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim pod-nodename.yml</span>\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-nodename\nspec:\n  nodeName: k8s-worker1                    <span class=\"token comment\"># 通过nodeName调度到k8s-worker1节点</span>\n  containers:\n  - name: nginx\n    image: nginx:1.15-alpine<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>第二种</strong>：spec.nodeSelector nodeSelector节点选择器调度到指定节点上去</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim pod-nodeselector.yml</span>\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-nodeselect\nspec:\n  nodeSelector:                         <span class=\"token comment\"># nodeSelector节点选择器</span>\n    bussiness: game                     <span class=\"token comment\"># 指定调度到标签为bussiness=game的节点</span>\n  containers:\n  - name: nginx\n    image: nginx:1.15-alpine<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h3 id=\"pod生命周期\"><a href=\"#pod生命周期\" class=\"headerlink\" title=\"pod生命周期\"></a>pod生命周期</h3><ul>\n<li>有些pod(比如运行httpd服务),正常情况下会一直运行中,但如果手动删除它,此pod会终止</li>\n<li>也有些pod(比如执行计算任务)，任务计算完后就会自动终止</li>\n</ul>\n<p>上面两种场景中,pod从创建到终止的过程就是pod的生命周期。</p>\n<h4 id=\"容器启动\"><a href=\"#容器启动\" class=\"headerlink\" title=\"容器启动\"></a>容器启动</h4><p>启动后钩子<code>post-start</code>执行后执行做<strong>健康检查</strong></p>\n<ul>\n<li><p>第一个健康检查叫存活状态检查(<code>liveness probe</code> )，用来检查主容器<strong>存活状态</strong>的</p>\n</li>\n<li><p>第二个健康检查叫准备就绪检查(<code>readiness probe</code>)，用来检查主容器是否<strong>启动就绪</strong></p>\n</li>\n</ul>\n<h4 id=\"容器重启策略\"><a href=\"#容器重启策略\" class=\"headerlink\" title=\"容器重启策略\"></a>容器重启策略</h4><ul>\n<li><p><strong>Always</strong>：表示容器挂了总是重启，这是默认策略 </p>\n</li>\n<li><p><strong>OnFailures</strong>：表示容器状态为错误时才重启，也就是容器正常终止时不重启 </p>\n</li>\n<li><p><strong>Never</strong>：表示容器挂了不予重启 </p>\n</li>\n<li><p>对于Always这种策略，容器只要挂了，就会立即重启，这样是很耗费资源的。所以Always重启策略是这么做的：第一次容器挂了立即重启，如果再挂了就要延时10s重启，第三次挂了就等20s重启…… 依次类推</p>\n</li>\n</ul>\n<h3 id=\"HealthCheck健康检查\"><a href=\"#HealthCheck健康检查\" class=\"headerlink\" title=\"HealthCheck健康检查\"></a>HealthCheck健康检查</h3><p>当Pod启动时，容器可能会因为某种错误(服务未启动或端口不正确)而无法访问等。</p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Liveness Probe(存活状态探测)</td>\n<td>指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其<a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\">重启策略</a>决定未来。如果容器不提供存活探针， 则默认状态为 <code>Success</code>。</td>\n</tr>\n<tr>\n<td>readiness Probe(就绪型探测)</td>\n<td>指示容器是否准备好为请求提供服务。如果就绪态探测失败， 端点控制器将从与 Pod 匹配的所有服务的端点列表中删除该 Pod 的 IP 地址。 初始延迟之前的就绪态的状态值默认为 <code>Failure</code>。 如果容器不提供就绪态探针，则默认状态为 <code>Success</code>。注：检查后不健康，将容器设置为Notready;如果使用service来访问,流量不会转发给此种状态的pod</td>\n</tr>\n<tr>\n<td>startup Probe</td>\n<td>指示容器中的应用是否已经启动。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，<code>kubelet</code> 将杀死容器，而容器依其 <a href=\"https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\">重启策略</a>进行重启。 如果容器没有提供启动探测，则默认状态为 <code>Success</code>。</td>\n</tr>\n</tbody></table>\n<h4 id=\"Probe探测方式\"><a href=\"#Probe探测方式\" class=\"headerlink\" title=\"Probe探测方式\"></a>Probe探测方式</h4><table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Exec</td>\n<td>执行命令</td>\n</tr>\n<tr>\n<td>HTTPGet</td>\n<td>http请求某一个URL路径</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>tcp连接某一个端口</td>\n</tr>\n<tr>\n<td>gRPC</td>\n<td>使用 <a href=\"https://grpc.io/\">gRPC</a> 执行一个远程过程调用。 目标应该实现 <a href=\"https://grpc.io/grpc/core/md_doc_health-checking.html\">gRPC健康检查</a>。 如果响应的状态是 “SERVING”，则认为诊断成功。 gRPC 探针是一个 alpha 特性，只有在你启用了 “GRPCContainerProbe” <a href=\"https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gate/\">特性门控</a>时才能使用。</td>\n</tr>\n</tbody></table>\n<h4 id=\"liveness-exec案例\"><a href=\"#liveness-exec案例\" class=\"headerlink\" title=\"liveness-exec案例\"></a>liveness-exec案例</h4><p>1、准备资源清单文件pod-liveness-exec.yml</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness<span class=\"token punctuation\">-</span>exec\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> busybox\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> /bin/sh\n    <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>c\n    <span class=\"token punctuation\">-</span> touch /tmp/healthy; sleep 30; rm <span class=\"token punctuation\">-</span>rf /tmp/healthy; sleep 600\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">exec</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> cat\n        <span class=\"token punctuation\">-</span> /tmp/healthy\n      <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> \t\t\t\t<span class=\"token comment\"># pod启动延迟5秒后探测</span>\n      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> \t\t\t\t\t\t<span class=\"token comment\"># 每5秒探测1次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、应用yaml文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-liveness-exec.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"liveness-httpget案例\"><a href=\"#liveness-httpget案例\" class=\"headerlink\" title=\"liveness-httpget案例\"></a>liveness-httpget案例</h4><p>1、准备资源清单文件pod-liveness-httpget.yml</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness<span class=\"token punctuation\">-</span>httpget\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.15<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\t\t\t\t\t\t\t    <span class=\"token comment\"># 指定容器端口，这一段不写也行，端口由镜像决定 </span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\t\t\t\t\t\t<span class=\"token comment\"># 自定义名称，不需要与下面的port: http对应</span>\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\t\t\t\t\t<span class=\"token comment\"># 类似dockerfile里的expose 80</span>\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>                          <span class=\"token comment\"># 使用httpGet方式</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> http                      <span class=\"token comment\"># http协议,也可以直接写80端口</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /index.html               <span class=\"token comment\"># 探测家目录下的index.html</span>\n      <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>            <span class=\"token comment\"># 延迟3秒开始探测</span>\n      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>                  <span class=\"token comment\"># 每隔5s钟探测一次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、应用YAML文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-liveness-httpget.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"liveness-tcp案例\"><a href=\"#liveness-tcp案例\" class=\"headerlink\" title=\"liveness-tcp案例\"></a>liveness-tcp案例</h4><p>1、准备资源文件pod-liveness-tcp.yml</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness<span class=\"token punctuation\">-</span>tcp\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> liveness\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.15<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">tcpSocket</span><span class=\"token punctuation\">:</span>                        <span class=\"token comment\"># 使用tcp连接方式</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>                        <span class=\"token comment\"># 连接80端口进行探测</span>\n      <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、应用YAML文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-liveness-tcp.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"readiness案例\"><a href=\"#readiness案例\" class=\"headerlink\" title=\"readiness案例\"></a>readiness案例</h4><p>1、准备资源配置文件pod-readiness-httpget.yml</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@k8s-master1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim pod-readiness-httpget.yml</span>\napiVersion: v1\nkind: Pod\nmetadata:\n  name: readiness-httpget\n  namespace: default\nspec:\n  containers:\n  - name: readiness\n    image: nginx:1.15-alpine\n    imagePullPolicy: IfNotPresent\n    ports:\n    - name: http\n      containerPort: <span class=\"token number\">80</span>\n    readinessProbe:                     <span class=\"token comment\"># 这里由liveness换成了readiness</span>\n      httpGet:\n        port: http\n        path: /index.html\n      initialDelaySeconds: <span class=\"token number\">3</span>\n      periodSeconds: <span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、应用YAML文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-readiness-httpget.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"post-start\"><a href=\"#post-start\" class=\"headerlink\" title=\"post-start\"></a>post-start</h3><blockquote>\n<p>容器启动后执行的命令</p>\n</blockquote>\n<p>1、准备资源清单文件pod-poststart.yml</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: poststart\n  namespace: default\nspec:\n  containers:\n  - name: poststart\n    image: nginx:1.15-alpine\n    imagePullPolicy: IfNotPresent\n    lifecycle:                                       <span class=\"token comment\"># 生命周期事件</span>\n      postStart:\n        exec:\n          command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"mkdir\"</span>,<span class=\"token string\">\"-p\"</span>,<span class=\"token string\">\"/usr/share/nginx/html/haha\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、应用资源文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> pod-poststart.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、查看是否创建成功</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> poststart -- <span class=\"token function\">ls</span> /usr/share/nginx/html <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"pre-stop\"><a href=\"#pre-stop\" class=\"headerlink\" title=\"pre-stop\"></a>pre-stop</h3><blockquote>\n<p>容器终止前执行的命令</p>\n</blockquote>\n<p>1、准备资源清单文件prestop.yml</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: prestop\n  namespace: default\nspec:\n  containers:\n  - name: prestop\n    image: nginx:1.15-alpine\n    imagePullPolicy: IfNotPresent\n    lifecycle:                                       <span class=\"token comment\"># 生命周期事件</span>\n      preStop:                                       <span class=\"token comment\"># preStop</span>\n        exec:\n          command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span>,<span class=\"token string\">\"-c\"</span>,<span class=\"token string\">\"sleep 60000000\"</span><span class=\"token punctuation\">]</span>     <span class=\"token comment\"># 容器终止前sleep 60000000秒</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2、应用资源文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> prestop.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、删除验证</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl delete <span class=\"token parameter variable\">-f</span> prestop.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","categories":[],"tags":[]}