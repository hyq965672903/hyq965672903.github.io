{"title":"剑指源码-spring(四)-后置处理器干预生命周期","slug":"剑指源码-spring-四-后置处理器干预生命周期","date":"2022-04-25T12:27:38.000Z","updated":"2024-04-22T07:21:14.907Z","comments":true,"path":"api/articles/剑指源码-spring-四-后置处理器干预生命周期.json","excerpt":" 通过源码了解到整个生命周期中，有三种类型的 生命周期增强器 BeanFactoryPostProcessor（Bean工厂增强），BeanPostProcessor（Bean后置处理器）以及InitializingBean（初始化Bean增强），本章节分析这些增强器是如何干预生命周期的","covers":["http://hyqup-blog-upyun.test.upcdn.net/img/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%A2%9E%E5%BC%BA%E5%99%A8.drawio.png"],"content":"<p> 通过源码了解到整个生命周期中，有三种类型的 <strong>生命周期增强器</strong> BeanFactoryPostProcessor（Bean工厂增强），BeanPostProcessor（Bean后置处理器）以及InitializingBean（初始化Bean增强），本章节分析这些增强器是如何干预生命周期的</p>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>🎉BeanFactoryPostProcessor：后置增强工厂</p>\n<p>🎨BeanPostProcessor: 后置增强组件,实现类很多，在于改变原有对象</p>\n<p>✨InitializingBean： 组件初始化之后进行后续增强，与BeanPostProcessor不用的是，InitializingBean在于额外处理，因为这里不会传入当前对象的任何额外信息</p>\n<p> 实际工作面试中，考察对Spring的了解程度，其本质上是对多少种处理器了解</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>我们这里去实现了许多的PostProcessor，依次打入断点还是源头打入断点调试堆栈信息</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猫被创建了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyBeanPostProcessor  构造器执行.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanPostProcessor.postProcessBeforeInitialization .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanPostProcessor.postProcessAfterInitialization .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInitializingBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyInitializingBean.afterPropertiesSet .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInstantiationAwareBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyInstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyInstantiationAwareBeanPostProcessor  构造器执行.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyInstantiationAwareBeanPostProcessor.postProcessAfterInstantiation .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">PropertyValues</span> <span class=\"token function\">postProcessProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyValues</span> pvs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyInstantiationAwareBeanPostProcessor.postProcessProperties .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMergedBeanDefinitionPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyMergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyMergedBeanDefinitionPostProcessor  构造器执行.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyMergedBeanDefinitionPostProcessor.postProcessBeforeInitialization .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyMergedBeanDefinitionPostProcessor.postProcessAfterInitialization .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessMergedBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootBeanDefinition</span> beanDefinition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyMergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resetBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyMergedBeanDefinitionPostProcessor.resetBeanDefinition .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySmartInstantiationAwareBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">predictBeanType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MySmartInstantiationAwareBeanPostProcessor.predictBeanType .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">determineCandidateConstructors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MySmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getEarlyBeanReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MySmartInstantiationAwareBeanPostProcessor.getEarlyBeanReference .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanDefinitionRegistryPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanDefinitionRegistryPostProcessor postProcessBeanFactory .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanDefinitionRegistryPostProcessor postProcessBeanDefinitionRegistry .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanFactoryPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanFactoryPostProcessor postProcessBeanFactory .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>使用 ComponentScan 来扫描注解@Componment</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.hyqup.spring\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainConfig</span> <span class=\"token punctuation\">&#123;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnnotationMainTest</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Cat</span> bean <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h1 id=\"堆栈分析\"><a href=\"#堆栈分析\" class=\"headerlink\" title=\"堆栈分析\"></a>堆栈分析</h1><h2 id=\"类型一：BeanFactoryPostProcessor类型的工厂后置处理器\"><a href=\"#类型一：BeanFactoryPostProcessor类型的工厂后置处理器\" class=\"headerlink\" title=\"类型一：BeanFactoryPostProcessor类型的工厂后置处理器\"></a>类型一：BeanFactoryPostProcessor类型的工厂后置处理器</h2><h3 id=\"BeanFactoryPostProcessor-代码入口\"><a href=\"#BeanFactoryPostProcessor-代码入口\" class=\"headerlink\" title=\"BeanFactoryPostProcessor 代码入口\"></a>BeanFactoryPostProcessor 代码入口</h3><h4 id=\"AnnotationConfigApplicationContext-refresh（）\"><a href=\"#AnnotationConfigApplicationContext-refresh（）\" class=\"headerlink\" title=\"AnnotationConfigApplicationContext refresh（）\"></a>AnnotationConfigApplicationContext refresh（）</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalStateException</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>startupShutdownMonitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">StartupStep</span> contextRefresh <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationStartup<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring.context.refresh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Prepare this context for refreshing.</span>\n      <span class=\"token function\">prepareRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Tell the subclass to refresh the internal bean factory.</span>\n      <span class=\"token comment\">//告诉子类刷新内部 bean 工厂。</span>\n      <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token function\">obtainFreshBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Prepare the bean factory for use in this context.</span>\n      <span class=\"token function\">prepareBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// Allows post-processing of the bean factory in context subclasses.</span>\n         <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token class-name\">StartupStep</span> beanPostProcess <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationStartup<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring.context.beans.post-process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">// Invoke factory processors registered as beans in the context.</span>\n         <span class=\"token comment\">// 执行所有的 BeanFactoryPostProcessor，理由BeanFactory后置增强器对工厂进行修改或增强</span>\n         <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Register bean processors that intercept bean creation.</span>\n         <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         beanPostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Initialize message source for this context.</span>\n         <span class=\"token function\">initMessageSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Initialize event multicaster for this context.</span>\n         <span class=\"token function\">initApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Initialize other special beans in specific context subclasses.</span>\n         <span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Check for listener beans and register them.</span>\n         <span class=\"token function\">registerListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Instantiate all remaining (non-lazy-init) singletons.</span>\n         <span class=\"token comment\">// 完成Bean 工厂的初始化</span>\n         <span class=\"token function\">finishBeanFactoryInitialization</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Last step: publish corresponding event.</span>\n         <span class=\"token function\">finishRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeansException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isWarnEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception encountered during context initialization - \"</span> <span class=\"token operator\">+</span>\n                  <span class=\"token string\">\"cancelling refresh attempt: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n\n         <span class=\"token comment\">// Destroy already created singletons to avoid dangling resources.</span>\n         <span class=\"token function\">destroyBeans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Reset 'active' flag.</span>\n         <span class=\"token function\">cancelRefresh</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Propagate exception to caller.</span>\n         <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// Reset common introspection caches in Spring's core, since we</span>\n         <span class=\"token comment\">// might not ever need metadata for singleton beans anymore...</span>\n         <span class=\"token function\">resetCommonCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         contextRefresh<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>invokeBeanFactoryPostProcessors 为BeanFactoryPostProcessors核心入口方法，发生在BeanFactory创建之后</p>\n<h3 id=\"BeanFactoryPostProcessor注册\"><a href=\"#BeanFactoryPostProcessor注册\" class=\"headerlink\" title=\"BeanFactoryPostProcessor注册\"></a>BeanFactoryPostProcessor注册</h3><h4 id=\"refresh-中的-invokeBeanFactoryPostProcessors-方法就是执行所有BeanFactory-后置增强器\"><a href=\"#refresh-中的-invokeBeanFactoryPostProcessors-方法就是执行所有BeanFactory-后置增强器\" class=\"headerlink\" title=\"refresh() 中的 invokeBeanFactoryPostProcessors 方法就是执行所有BeanFactory 后置增强器\"></a>refresh() 中的 invokeBeanFactoryPostProcessors 方法就是执行所有BeanFactory 后置增强器</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">PostProcessorRegistrationDelegate</span><span class=\"token punctuation\">.</span><span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> <span class=\"token function\">getBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span>\n   <span class=\"token comment\">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">NativeDetector</span><span class=\"token punctuation\">.</span><span class=\"token function\">inNativeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getTempClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOAD_TIME_WEAVER_BEAN_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadTimeWeaverAwareProcessor</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setTempClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ContextTypeMatchClassLoader</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"BeanFactoryPostProcessor执行\"><a href=\"#BeanFactoryPostProcessor执行\" class=\"headerlink\" title=\"BeanFactoryPostProcessor执行\"></a>BeanFactoryPostProcessor执行</h3><h4 id=\"执行invokeBeanFactoryPostProcessors-核心逻辑\"><a href=\"#执行invokeBeanFactoryPostProcessors-核心逻辑\" class=\"headerlink\" title=\"执行invokeBeanFactoryPostProcessors 核心逻辑\"></a>执行invokeBeanFactoryPostProcessors 核心逻辑</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>\n      <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> beanFactoryPostProcessors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token comment\">// WARNING: Although it may appear that the body of this method can be easily</span>\n   <span class=\"token comment\">// refactored to avoid the use of multiple loops and multiple lists, the use</span>\n   <span class=\"token comment\">// of multiple lists and multiple passes over the names of processors is</span>\n   <span class=\"token comment\">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span>\n   <span class=\"token comment\">// and Ordered processors. Specifically, we must NOT cause processors to be</span>\n   <span class=\"token comment\">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span>\n   <span class=\"token comment\">// in the wrong order.</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token comment\">// Before submitting a pull request (PR) to change this method, please review the</span>\n   <span class=\"token comment\">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span>\n   <span class=\"token comment\">// to ensure that your proposal does not result in a breaking change:</span>\n   <span class=\"token comment\">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span>\n\n   <span class=\"token comment\">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span>\n   <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> processedBeans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">BeanDefinitionRegistry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">BeanDefinitionRegistry</span> registry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span><span class=\"token punctuation\">)</span> beanFactory<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> regularPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">></span></span> registryProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanFactoryPostProcessor</span> postProcessor <span class=\"token operator\">:</span> beanFactoryPostProcessors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postProcessor <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> registryProcessor <span class=\"token operator\">=</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">)</span> postProcessor<span class=\"token punctuation\">;</span>\n            registryProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            registryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>registryProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            regularPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>postProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>\n      <span class=\"token comment\">// uninitialized to let the bean factory post-processors apply to them!</span>\n      <span class=\"token comment\">// Separate between BeanDefinitionRegistryPostProcessors that implement</span>\n      <span class=\"token comment\">// PriorityOrdered, Ordered, and the rest.</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">></span></span> currentRegistryProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span>\n\n      <span class=\"token comment\">//首先，调用实现 PriorityOrdered 的 BeanDefinitionRegistryPostProcessor</span>\n      <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postProcessorNames <span class=\"token operator\">=</span>\n            beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// 判断是否实现了顺序接口，数字越小，优先级越高</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 从容器中获取这个组件，并放到该集合，getBean 没有则会去创建</span>\n            currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      registryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 执行 当前接口的postProcessBeanDefinitionRegistry</span>\n      <span class=\"token function\">invokeBeanDefinitionRegistryPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> registry<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationStartup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span>\n      postProcessorNames <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      registryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">invokeBeanDefinitionRegistryPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> registry<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationStartup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span>\n      <span class=\"token keyword\">boolean</span> reiterate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reiterate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         reiterate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n         postProcessorNames <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               reiterate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         registryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">invokeBeanDefinitionRegistryPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> registry<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationStartup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span>\n      <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>registryProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>regularPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Invoke factory processors registered with the context instance.</span>\n      <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>beanFactoryPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>\n   <span class=\"token comment\">// uninitialized to let the bean factory post-processors apply to them!</span>\n   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postProcessorNames <span class=\"token operator\">=</span>\n         beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span>\n   <span class=\"token comment\">// Ordered, and the rest.</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> priorityOrderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> orderedPostProcessorNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> nonOrderedPostProcessorNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// skip - already processed in first phase above</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         priorityOrderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         orderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n         nonOrderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>priorityOrderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>priorityOrderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> orderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>orderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> postProcessorName <span class=\"token operator\">:</span> orderedPostProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      orderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>postProcessorName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>orderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>orderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Finally, invoke all other BeanFactoryPostProcessors.</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> nonOrderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>nonOrderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> postProcessorName <span class=\"token operator\">:</span> nonOrderedPostProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      nonOrderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>postProcessorName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>nonOrderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Clear cached merged bean definitions since the post-processors might have</span>\n   <span class=\"token comment\">// modified the original metadata, e.g. replacing placeholders in values...</span>\n   beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">clearMetadataCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>这里首先会判断 是否实现BeanDefinitionRegistry 接口。</p>\n<p>里面分三种 </p>\n<p>1、实现 PriorityOrdered 顺序优先级最高</p>\n<p>2、Ordered顺序，低于PriorityOrdered </p>\n<p>3、普通未实现顺序接口</p>\n<p>按照这样的顺序去调用 invokeBeanFactoryPostProcessors ，就是接口的根方法</p>\n<p>顺序都是数字越小，优先级越高</p>\n<p>invokeBeanFactoryPostProcessors 中会循环调用相关接口的方法</p>\n<h3 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h3><h4 id=\"ConfigurationClassPostProcessor\"><a href=\"#ConfigurationClassPostProcessor\" class=\"headerlink\" title=\"ConfigurationClassPostProcessor\"></a>ConfigurationClassPostProcessor</h4><p>就是通过实现BeanDefinitionRegistryPostProcessor，扫描配置类及其相关注解，如@Componment @componmentScan 来将这些信息封装为BeanDefinition以供后续创建bean的定义信息</p>\n<h2 id=\"类型二：BeanPostProcessor类型为Bean的后置处理器增强\"><a href=\"#类型二：BeanPostProcessor类型为Bean的后置处理器增强\" class=\"headerlink\" title=\"类型二：BeanPostProcessor类型为Bean的后置处理器增强\"></a>类型二：BeanPostProcessor类型为Bean的后置处理器增强</h2><h3 id=\"BeanPostProcessor的注册\"><a href=\"#BeanPostProcessor的注册\" class=\"headerlink\" title=\"BeanPostProcessor的注册\"></a>BeanPostProcessor的注册</h3><p>refresh（）方法中的registerBeanPostProcessors（beanFactory） 入口</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>\n      <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AbstractApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token comment\">// WARNING: Although it may appear that the body of this method can be easily</span>\n   <span class=\"token comment\">// refactored to avoid the use of multiple loops and multiple lists, the use</span>\n   <span class=\"token comment\">// of multiple lists and multiple passes over the names of processors is</span>\n   <span class=\"token comment\">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span>\n   <span class=\"token comment\">// and Ordered processors. Specifically, we must NOT cause processors to be</span>\n   <span class=\"token comment\">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span>\n   <span class=\"token comment\">// in the wrong order.</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token comment\">// Before submitting a pull request (PR) to change this method, please review the</span>\n   <span class=\"token comment\">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span>\n   <span class=\"token comment\">// to ensure that your proposal does not result in a breaking change:</span>\n   <span class=\"token comment\">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span>\n\n   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postProcessorNames <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Register BeanPostProcessorChecker that logs an info message when</span>\n   <span class=\"token comment\">// a bean is created during BeanPostProcessor instantiation, i.e. when</span>\n   <span class=\"token comment\">// a bean is not eligible for getting processed by all BeanPostProcessors.</span>\n   <span class=\"token keyword\">int</span> beanProcessorTargetCount <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanPostProcessorCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> postProcessorNames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanPostProcessorChecker</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> beanProcessorTargetCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Separate between BeanPostProcessors that implement PriorityOrdered,</span>\n   <span class=\"token comment\">// Ordered, and the rest.</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> priorityOrderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> internalPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> orderedPostProcessorNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> nonOrderedPostProcessorNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 获取所有实现 PriorityOrdered</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">BeanPostProcessor</span> pp <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         priorityOrderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">//  内部的</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            internalPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         orderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n         nonOrderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// First, register the BeanPostProcessors that implement PriorityOrdered.</span>\n\n   <span class=\"token comment\">//首先，注册实现 PriorityOrdered 的 BeanPostProcessor。</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>priorityOrderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> priorityOrderedPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Next, register the BeanPostProcessors that implement Ordered.</span>\n   <span class=\"token comment\">// 接下来，注册实现 Ordered 的 BeanPostProcessor。</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> orderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>orderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> orderedPostProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">BeanPostProcessor</span> pp <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      orderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         internalPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>orderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> orderedPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Now, register all regular BeanPostProcessors.</span>\n   <span class=\"token comment\">// 现在，注册所有常规的 BeanPostProcessor。 getBean</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> nonOrderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>nonOrderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> nonOrderedPostProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">BeanPostProcessor</span> pp <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nonOrderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         internalPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> nonOrderedPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Finally, re-register all internal BeanPostProcessors.</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>internalPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> internalPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span>\n   <span class=\"token comment\">// moving it to the end of the processor chain (for picking up proxies etc).</span>\n   beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationListenerDetector</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>流程如上，和BeanFactoryPostProcessor 大致逻辑类似整个流程完成注册</p>\n<h3 id=\"BeanPostProcessor执行\"><a href=\"#BeanPostProcessor执行\" class=\"headerlink\" title=\"BeanPostProcessor执行\"></a>BeanPostProcessor执行</h3><blockquote>\n<p>由于各种类型的BeanPostProcessor在Bean的生命周期干扰的时机不同，所以执行的时机也是不同的，这里我们会分别针对各个子类BeanPostProcessor接口代码分析干扰的时机</p>\n</blockquote>\n<h4 id=\"SmartInstantiationAwareBeanPostProcessor\"><a href=\"#SmartInstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"SmartInstantiationAwareBeanPostProcessor\"></a>SmartInstantiationAwareBeanPostProcessor</h4><h4 id=\"InstantiationAwareBeanPostProcessor\"><a href=\"#InstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"InstantiationAwareBeanPostProcessor\"></a>InstantiationAwareBeanPostProcessor</h4><h4 id=\"MergedBeanDefinitionPostProcessor\"><a href=\"#MergedBeanDefinitionPostProcessor\" class=\"headerlink\" title=\"MergedBeanDefinitionPostProcessor\"></a>MergedBeanDefinitionPostProcessor</h4><h2 id=\"类型三：InitializingBean-完成bean-初始化后的操作\"><a href=\"#类型三：InitializingBean-完成bean-初始化后的操作\" class=\"headerlink\" title=\"类型三：InitializingBean 完成bean 初始化后的操作\"></a>类型三：InitializingBean 完成bean 初始化后的操作</h2><p>堆栈方法追踪：getBean-&gt;doGetBean-&gt;getSingleton-&gt;createBean-&gt;doCreateBean-&gt;initializeBean-&gt;invokeInitMethods  </p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeInitMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token keyword\">boolean</span> isInitializingBean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInitializingBean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isExternallyManagedInitMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterPropertiesSet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invoking afterPropertiesSet() on bean with name '\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedExceptionAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">)</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getAccessControlContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedActionException</span> pae<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> pae<span class=\"token punctuation\">.</span><span class=\"token function\">getException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">)</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">NullBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> initMethodName <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getInitMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasLength</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>isInitializingBean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"afterPropertiesSet\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isExternallyManagedInitMethod</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">invokeCustomInitMethod</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>bean 完成之后会执行InitializingBean.afterPropertiesSet</p>\n<h2 id=\"整个生命周期流程后置处理器干扰图\"><a href=\"#整个生命周期流程后置处理器干扰图\" class=\"headerlink\" title=\"整个生命周期流程后置处理器干扰图\"></a>整个生命周期流程后置处理器干扰图</h2><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%A2%9E%E5%BC%BA%E5%99%A8.drawio.png\"></p>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>🎉BeanFactoryPostProcessor：后置增强工厂</p>\n<p>🎨BeanPostProcessor: 后置增强组件,实现类很多，在于改变原有对象</p>\n<p>✨InitializingBean： 组件初始化之后进行后续增强，与BeanPostProcessor不用的是，InitializingBean在于额外处理，因为这里不会传入当前对象的任何额外信息</p>\n<p> 实际工作面试中，考察对Spring的了解程度，其本质上是对多少种处理器了解</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>我们这里去实现了许多的PostProcessor，依次打入断点还是源头打入断点调试堆栈信息</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猫被创建了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyBeanPostProcessor  构造器执行.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanPostProcessor.postProcessBeforeInitialization .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanPostProcessor.postProcessAfterInitialization .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInitializingBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyInitializingBean.afterPropertiesSet .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInstantiationAwareBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InstantiationAwareBeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyInstantiationAwareBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyInstantiationAwareBeanPostProcessor  构造器执行.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postProcessAfterInstantiation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyInstantiationAwareBeanPostProcessor.postProcessAfterInstantiation .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">PropertyValues</span> <span class=\"token function\">postProcessProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyValues</span> pvs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyInstantiationAwareBeanPostProcessor.postProcessProperties .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMergedBeanDefinitionPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyMergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyMergedBeanDefinitionPostProcessor  构造器执行.....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyMergedBeanDefinitionPostProcessor.postProcessBeforeInitialization .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyMergedBeanDefinitionPostProcessor.postProcessAfterInitialization .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessMergedBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootBeanDefinition</span> beanDefinition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyMergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resetBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyMergedBeanDefinitionPostProcessor.resetBeanDefinition .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySmartInstantiationAwareBeanPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SmartInstantiationAwareBeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">predictBeanType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MySmartInstantiationAwareBeanPostProcessor.predictBeanType .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">determineCandidateConstructors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> beanClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MySmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getEarlyBeanReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MySmartInstantiationAwareBeanPostProcessor.getEarlyBeanReference .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanDefinitionRegistryPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanDefinitionRegistryPostProcessor postProcessBeanFactory .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanDefinitionRegistryPostProcessor postProcessBeanDefinitionRegistry .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanFactoryPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行 MyBeanFactoryPostProcessor postProcessBeanFactory .....................\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 ComponentScan 来扫描注解@Componment</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.hyqup.spring\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainConfig</span> <span class=\"token punctuation\">&#123;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnnotationMainTest</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Cat</span> bean <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"堆栈分析\"><a href=\"#堆栈分析\" class=\"headerlink\" title=\"堆栈分析\"></a>堆栈分析</h1><h2 id=\"类型一：BeanFactoryPostProcessor类型的工厂后置处理器\"><a href=\"#类型一：BeanFactoryPostProcessor类型的工厂后置处理器\" class=\"headerlink\" title=\"类型一：BeanFactoryPostProcessor类型的工厂后置处理器\"></a>类型一：BeanFactoryPostProcessor类型的工厂后置处理器</h2><h3 id=\"BeanFactoryPostProcessor-代码入口\"><a href=\"#BeanFactoryPostProcessor-代码入口\" class=\"headerlink\" title=\"BeanFactoryPostProcessor 代码入口\"></a>BeanFactoryPostProcessor 代码入口</h3><h4 id=\"AnnotationConfigApplicationContext-refresh（）\"><a href=\"#AnnotationConfigApplicationContext-refresh（）\" class=\"headerlink\" title=\"AnnotationConfigApplicationContext refresh（）\"></a>AnnotationConfigApplicationContext refresh（）</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalStateException</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>startupShutdownMonitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">StartupStep</span> contextRefresh <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationStartup<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring.context.refresh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Prepare this context for refreshing.</span>\n      <span class=\"token function\">prepareRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Tell the subclass to refresh the internal bean factory.</span>\n      <span class=\"token comment\">//告诉子类刷新内部 bean 工厂。</span>\n      <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token function\">obtainFreshBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Prepare the bean factory for use in this context.</span>\n      <span class=\"token function\">prepareBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// Allows post-processing of the bean factory in context subclasses.</span>\n         <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token class-name\">StartupStep</span> beanPostProcess <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationStartup<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring.context.beans.post-process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">// Invoke factory processors registered as beans in the context.</span>\n         <span class=\"token comment\">// 执行所有的 BeanFactoryPostProcessor，理由BeanFactory后置增强器对工厂进行修改或增强</span>\n         <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Register bean processors that intercept bean creation.</span>\n         <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         beanPostProcess<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Initialize message source for this context.</span>\n         <span class=\"token function\">initMessageSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Initialize event multicaster for this context.</span>\n         <span class=\"token function\">initApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Initialize other special beans in specific context subclasses.</span>\n         <span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Check for listener beans and register them.</span>\n         <span class=\"token function\">registerListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Instantiate all remaining (non-lazy-init) singletons.</span>\n         <span class=\"token comment\">// 完成Bean 工厂的初始化</span>\n         <span class=\"token function\">finishBeanFactoryInitialization</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Last step: publish corresponding event.</span>\n         <span class=\"token function\">finishRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeansException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isWarnEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception encountered during context initialization - \"</span> <span class=\"token operator\">+</span>\n                  <span class=\"token string\">\"cancelling refresh attempt: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n\n         <span class=\"token comment\">// Destroy already created singletons to avoid dangling resources.</span>\n         <span class=\"token function\">destroyBeans</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Reset 'active' flag.</span>\n         <span class=\"token function\">cancelRefresh</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token comment\">// Propagate exception to caller.</span>\n         <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// Reset common introspection caches in Spring's core, since we</span>\n         <span class=\"token comment\">// might not ever need metadata for singleton beans anymore...</span>\n         <span class=\"token function\">resetCommonCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         contextRefresh<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>invokeBeanFactoryPostProcessors 为BeanFactoryPostProcessors核心入口方法，发生在BeanFactory创建之后</p>\n<h3 id=\"BeanFactoryPostProcessor注册\"><a href=\"#BeanFactoryPostProcessor注册\" class=\"headerlink\" title=\"BeanFactoryPostProcessor注册\"></a>BeanFactoryPostProcessor注册</h3><h4 id=\"refresh-中的-invokeBeanFactoryPostProcessors-方法就是执行所有BeanFactory-后置增强器\"><a href=\"#refresh-中的-invokeBeanFactoryPostProcessors-方法就是执行所有BeanFactory-后置增强器\" class=\"headerlink\" title=\"refresh() 中的 invokeBeanFactoryPostProcessors 方法就是执行所有BeanFactory 后置增强器\"></a>refresh() 中的 invokeBeanFactoryPostProcessors 方法就是执行所有BeanFactory 后置增强器</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">PostProcessorRegistrationDelegate</span><span class=\"token punctuation\">.</span><span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> <span class=\"token function\">getBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span>\n   <span class=\"token comment\">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">NativeDetector</span><span class=\"token punctuation\">.</span><span class=\"token function\">inNativeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getTempClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOAD_TIME_WEAVER_BEAN_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadTimeWeaverAwareProcessor</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setTempClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ContextTypeMatchClassLoader</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"BeanFactoryPostProcessor执行\"><a href=\"#BeanFactoryPostProcessor执行\" class=\"headerlink\" title=\"BeanFactoryPostProcessor执行\"></a>BeanFactoryPostProcessor执行</h3><h4 id=\"执行invokeBeanFactoryPostProcessors-核心逻辑\"><a href=\"#执行invokeBeanFactoryPostProcessors-核心逻辑\" class=\"headerlink\" title=\"执行invokeBeanFactoryPostProcessors 核心逻辑\"></a>执行invokeBeanFactoryPostProcessors 核心逻辑</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>\n      <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> beanFactoryPostProcessors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token comment\">// WARNING: Although it may appear that the body of this method can be easily</span>\n   <span class=\"token comment\">// refactored to avoid the use of multiple loops and multiple lists, the use</span>\n   <span class=\"token comment\">// of multiple lists and multiple passes over the names of processors is</span>\n   <span class=\"token comment\">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span>\n   <span class=\"token comment\">// and Ordered processors. Specifically, we must NOT cause processors to be</span>\n   <span class=\"token comment\">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span>\n   <span class=\"token comment\">// in the wrong order.</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token comment\">// Before submitting a pull request (PR) to change this method, please review the</span>\n   <span class=\"token comment\">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span>\n   <span class=\"token comment\">// to ensure that your proposal does not result in a breaking change:</span>\n   <span class=\"token comment\">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span>\n\n   <span class=\"token comment\">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span>\n   <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> processedBeans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">BeanDefinitionRegistry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">BeanDefinitionRegistry</span> registry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span><span class=\"token punctuation\">)</span> beanFactory<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> regularPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">></span></span> registryProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanFactoryPostProcessor</span> postProcessor <span class=\"token operator\">:</span> beanFactoryPostProcessors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postProcessor <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span> registryProcessor <span class=\"token operator\">=</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">)</span> postProcessor<span class=\"token punctuation\">;</span>\n            registryProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">postProcessBeanDefinitionRegistry</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            registryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>registryProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            regularPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>postProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>\n      <span class=\"token comment\">// uninitialized to let the bean factory post-processors apply to them!</span>\n      <span class=\"token comment\">// Separate between BeanDefinitionRegistryPostProcessors that implement</span>\n      <span class=\"token comment\">// PriorityOrdered, Ordered, and the rest.</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">></span></span> currentRegistryProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span>\n\n      <span class=\"token comment\">//首先，调用实现 PriorityOrdered 的 BeanDefinitionRegistryPostProcessor</span>\n      <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postProcessorNames <span class=\"token operator\">=</span>\n            beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// 判断是否实现了顺序接口，数字越小，优先级越高</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 从容器中获取这个组件，并放到该集合，getBean 没有则会去创建</span>\n            currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      registryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 执行 当前接口的postProcessBeanDefinitionRegistry</span>\n      <span class=\"token function\">invokeBeanDefinitionRegistryPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> registry<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationStartup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span>\n      postProcessorNames <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      registryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">invokeBeanDefinitionRegistryPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> registry<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationStartup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span>\n      <span class=\"token keyword\">boolean</span> reiterate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reiterate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         reiterate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n         postProcessorNames <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               reiterate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         registryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">invokeBeanDefinitionRegistryPostProcessors</span><span class=\"token punctuation\">(</span>currentRegistryProcessors<span class=\"token punctuation\">,</span> registry<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationStartup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         currentRegistryProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span>\n      <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>registryProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>regularPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Invoke factory processors registered with the context instance.</span>\n      <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>beanFactoryPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>\n   <span class=\"token comment\">// uninitialized to let the bean factory post-processors apply to them!</span>\n   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postProcessorNames <span class=\"token operator\">=</span>\n         beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span>\n   <span class=\"token comment\">// Ordered, and the rest.</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> priorityOrderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> orderedPostProcessorNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> nonOrderedPostProcessorNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>processedBeans<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// skip - already processed in first phase above</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         priorityOrderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         orderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n         nonOrderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>priorityOrderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>priorityOrderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> orderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>orderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> postProcessorName <span class=\"token operator\">:</span> orderedPostProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      orderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>postProcessorName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>orderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>orderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Finally, invoke all other BeanFactoryPostProcessors.</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">></span></span> nonOrderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>nonOrderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> postProcessorName <span class=\"token operator\">:</span> nonOrderedPostProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      nonOrderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>postProcessorName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>nonOrderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Clear cached merged bean definitions since the post-processors might have</span>\n   <span class=\"token comment\">// modified the original metadata, e.g. replacing placeholders in values...</span>\n   beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">clearMetadataCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里首先会判断 是否实现BeanDefinitionRegistry 接口。</p>\n<p>里面分三种 </p>\n<p>1、实现 PriorityOrdered 顺序优先级最高</p>\n<p>2、Ordered顺序，低于PriorityOrdered </p>\n<p>3、普通未实现顺序接口</p>\n<p>按照这样的顺序去调用 invokeBeanFactoryPostProcessors ，就是接口的根方法</p>\n<p>顺序都是数字越小，优先级越高</p>\n<p>invokeBeanFactoryPostProcessors 中会循环调用相关接口的方法</p>\n<h3 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h3><h4 id=\"ConfigurationClassPostProcessor\"><a href=\"#ConfigurationClassPostProcessor\" class=\"headerlink\" title=\"ConfigurationClassPostProcessor\"></a>ConfigurationClassPostProcessor</h4><p>就是通过实现BeanDefinitionRegistryPostProcessor，扫描配置类及其相关注解，如@Componment @componmentScan 来将这些信息封装为BeanDefinition以供后续创建bean的定义信息</p>\n<h2 id=\"类型二：BeanPostProcessor类型为Bean的后置处理器增强\"><a href=\"#类型二：BeanPostProcessor类型为Bean的后置处理器增强\" class=\"headerlink\" title=\"类型二：BeanPostProcessor类型为Bean的后置处理器增强\"></a>类型二：BeanPostProcessor类型为Bean的后置处理器增强</h2><h3 id=\"BeanPostProcessor的注册\"><a href=\"#BeanPostProcessor的注册\" class=\"headerlink\" title=\"BeanPostProcessor的注册\"></a>BeanPostProcessor的注册</h3><p>refresh（）方法中的registerBeanPostProcessors（beanFactory） 入口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>\n      <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AbstractApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token comment\">// WARNING: Although it may appear that the body of this method can be easily</span>\n   <span class=\"token comment\">// refactored to avoid the use of multiple loops and multiple lists, the use</span>\n   <span class=\"token comment\">// of multiple lists and multiple passes over the names of processors is</span>\n   <span class=\"token comment\">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span>\n   <span class=\"token comment\">// and Ordered processors. Specifically, we must NOT cause processors to be</span>\n   <span class=\"token comment\">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span>\n   <span class=\"token comment\">// in the wrong order.</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token comment\">// Before submitting a pull request (PR) to change this method, please review the</span>\n   <span class=\"token comment\">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span>\n   <span class=\"token comment\">// to ensure that your proposal does not result in a breaking change:</span>\n   <span class=\"token comment\">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span>\n\n   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postProcessorNames <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Register BeanPostProcessorChecker that logs an info message when</span>\n   <span class=\"token comment\">// a bean is created during BeanPostProcessor instantiation, i.e. when</span>\n   <span class=\"token comment\">// a bean is not eligible for getting processed by all BeanPostProcessors.</span>\n   <span class=\"token keyword\">int</span> beanProcessorTargetCount <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanPostProcessorCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> postProcessorNames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanPostProcessorChecker</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> beanProcessorTargetCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Separate between BeanPostProcessors that implement PriorityOrdered,</span>\n   <span class=\"token comment\">// Ordered, and the rest.</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> priorityOrderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> internalPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> orderedPostProcessorNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> nonOrderedPostProcessorNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> postProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 获取所有实现 PriorityOrdered</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">BeanPostProcessor</span> pp <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         priorityOrderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">//  内部的</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            internalPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         orderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n         nonOrderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// First, register the BeanPostProcessors that implement PriorityOrdered.</span>\n\n   <span class=\"token comment\">//首先，注册实现 PriorityOrdered 的 BeanPostProcessor。</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>priorityOrderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> priorityOrderedPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Next, register the BeanPostProcessors that implement Ordered.</span>\n   <span class=\"token comment\">// 接下来，注册实现 Ordered 的 BeanPostProcessor。</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> orderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>orderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> orderedPostProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">BeanPostProcessor</span> pp <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      orderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         internalPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>orderedPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> orderedPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Now, register all regular BeanPostProcessors.</span>\n   <span class=\"token comment\">// 现在，注册所有常规的 BeanPostProcessor。 getBean</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">></span></span> nonOrderedPostProcessors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>nonOrderedPostProcessorNames<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> ppName <span class=\"token operator\">:</span> nonOrderedPostProcessorNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">BeanPostProcessor</span> pp <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>ppName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nonOrderedPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MergedBeanDefinitionPostProcessor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         internalPostProcessors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> nonOrderedPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Finally, re-register all internal BeanPostProcessors.</span>\n   <span class=\"token function\">sortPostProcessors</span><span class=\"token punctuation\">(</span>internalPostProcessors<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> internalPostProcessors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span>\n   <span class=\"token comment\">// moving it to the end of the processor chain (for picking up proxies etc).</span>\n   beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">addBeanPostProcessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationListenerDetector</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>流程如上，和BeanFactoryPostProcessor 大致逻辑类似整个流程完成注册</p>\n<h3 id=\"BeanPostProcessor执行\"><a href=\"#BeanPostProcessor执行\" class=\"headerlink\" title=\"BeanPostProcessor执行\"></a>BeanPostProcessor执行</h3><blockquote>\n<p>由于各种类型的BeanPostProcessor在Bean的生命周期干扰的时机不同，所以执行的时机也是不同的，这里我们会分别针对各个子类BeanPostProcessor接口代码分析干扰的时机</p>\n</blockquote>\n<h4 id=\"SmartInstantiationAwareBeanPostProcessor\"><a href=\"#SmartInstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"SmartInstantiationAwareBeanPostProcessor\"></a>SmartInstantiationAwareBeanPostProcessor</h4><h4 id=\"InstantiationAwareBeanPostProcessor\"><a href=\"#InstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"InstantiationAwareBeanPostProcessor\"></a>InstantiationAwareBeanPostProcessor</h4><h4 id=\"MergedBeanDefinitionPostProcessor\"><a href=\"#MergedBeanDefinitionPostProcessor\" class=\"headerlink\" title=\"MergedBeanDefinitionPostProcessor\"></a>MergedBeanDefinitionPostProcessor</h4><h2 id=\"类型三：InitializingBean-完成bean-初始化后的操作\"><a href=\"#类型三：InitializingBean-完成bean-初始化后的操作\" class=\"headerlink\" title=\"类型三：InitializingBean 完成bean 初始化后的操作\"></a>类型三：InitializingBean 完成bean 初始化后的操作</h2><p>堆栈方法追踪：getBean-&gt;doGetBean-&gt;getSingleton-&gt;createBean-&gt;doCreateBean-&gt;initializeBean-&gt;invokeInitMethods  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeInitMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RootBeanDefinition</span> mbd<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token keyword\">boolean</span> isInitializingBean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bean <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInitializingBean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isExternallyManagedInitMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterPropertiesSet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invoking afterPropertiesSet() on bean with name '\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedExceptionAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">)</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getAccessControlContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PrivilegedActionException</span> pae<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> pae<span class=\"token punctuation\">.</span><span class=\"token function\">getException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InitializingBean</span><span class=\"token punctuation\">)</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mbd <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">NullBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> initMethodName <span class=\"token operator\">=</span> mbd<span class=\"token punctuation\">.</span><span class=\"token function\">getInitMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasLength</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>isInitializingBean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"afterPropertiesSet\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token operator\">!</span>mbd<span class=\"token punctuation\">.</span><span class=\"token function\">isExternallyManagedInitMethod</span><span class=\"token punctuation\">(</span>initMethodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">invokeCustomInitMethod</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">,</span> mbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>bean 完成之后会执行InitializingBean.afterPropertiesSet</p>\n<h2 id=\"整个生命周期流程后置处理器干扰图\"><a href=\"#整个生命周期流程后置处理器干扰图\" class=\"headerlink\" title=\"整个生命周期流程后置处理器干扰图\"></a>整个生命周期流程后置处理器干扰图</h2><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%A2%9E%E5%BC%BA%E5%99%A8.drawio.png\"></p>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"Spring源码","path":"api/categories/Spring源码.json"}],"tags":[{"name":"BeanPostProcessor","path":"api/tags/BeanPostProcessor.json"},{"name":"BeanFactoryPostProcessor","path":"api/tags/BeanFactoryPostProcessor.json"}]}