{"title":"剑指源码-springmvc-(三)-HandlerMapping和HandlerAdapter细节","slug":"剑指源码-springmvc-三-HandlerMapping和HandlerAdapter细节","date":"2022-05-19T14:48:06.000Z","updated":"2024-04-22T07:21:14.911Z","comments":true,"path":"api/articles/剑指源码-springmvc-三-HandlerMapping和HandlerAdapter细节.json","excerpt":"HandlerMapping的几种实现与HandlerAdapter几种原理及其内部细节剖析","covers":null,"content":"<p>HandlerMapping的几种实现与HandlerAdapter几种原理及其内部细节剖析</p>\n<span id=\"more\"></span>\n\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><blockquote>\n<p>HandlerMapping和HandlerAdapter初始化流程基本一致</p>\n</blockquote>\n<p>1、DispatcherServlet创建对象后，Tomcat调用初始化回调钩子initServletBean()</p>\n<p>2、容器启动完成后，Spring发送事件，执行到DispatcherServlet.onRefresh()</p>\n<p>3、onRefresh执行九大组件的初始化</p>\n<p>HandlerMapping初始化流程（RequestMappingHandlerMapping为例）</p>\n<ul>\n<li>创建配置中的HandlerMapping对象3种</li>\n<li>启动createBean使用IOC创建容器</li>\n<li>基于Spring的原理，实现了InitializingBean,容器启动后续执行afterPropertiesSet</li>\n<li>拿到子容器（Web容器）的所有组件，扫描@Controller或者@RequestMapping</li>\n<li>将分析到的信息放于HandlerMapping的registry对象中，以便后续使用</li>\n</ul>\n<h2 id=\"HandlerMapping的实现类\"><a href=\"#HandlerMapping的实现类\" class=\"headerlink\" title=\"HandlerMapping的实现类\"></a>HandlerMapping的实现类</h2><ul>\n<li><p><strong>BeanNameUrlHandlerMapping</strong>  以bean的名字作为url路径，进行映射</p>\n</li>\n<li><p><strong>SimpleUrlHandlerMapping</strong> 手动配置url与handler的映射</p>\n</li>\n<li><p><strong>RequestMappingHandlerMapping</strong> 使用注解的形式来标识url与handler的映射,平时这种使用最多，重点分析</p>\n</li>\n<li><p><strong>RouterFunctionMapping</strong>  支持函数式以及webFlux相关的功能</p>\n</li>\n</ul>\n<h3 id=\"BeanNameUrlHandlerMapping\"><a href=\"#BeanNameUrlHandlerMapping\" class=\"headerlink\" title=\"BeanNameUrlHandlerMapping\"></a><strong>BeanNameUrlHandlerMapping</strong></h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanNameUrlHandlerMapping</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDetectingUrlHandlerMapping</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token comment\">/**\n    * Checks name and aliases of the given bean for URLs, starting with \"/\".\n    */</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">determineUrlsForHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> urls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         urls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> aliases <span class=\"token operator\">=</span> <span class=\"token function\">obtainApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> alias <span class=\"token operator\">:</span> aliases<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>alias<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            urls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>alias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStringArray</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>该实现类可以把IOC容器中name以”&#x2F;“ 开头的Bean注册为handler,</p>\n<h3 id=\"SimpleUrlHandlerMapping\"><a href=\"#SimpleUrlHandlerMapping\" class=\"headerlink\" title=\"SimpleUrlHandlerMapping\"></a>SimpleUrlHandlerMapping</h3><p>手动配置url与handler的映射,初始化的时候就注册进去了</p>\n<h3 id=\"RequestMappingHandlerMapping\"><a href=\"#RequestMappingHandlerMapping\" class=\"headerlink\" title=\"RequestMappingHandlerMapping\"></a>RequestMappingHandlerMapping</h3><p>这是最常用的HandlerMapping实现，通过它，我们可以使用注解的形式来标识url与handler的映射：</p>\n<p> AbstractHandlerMethodMapping.initHandlerMethods然后执行到 processCandidateBean-&gt;detectHandlerMethods再到交由子类实现getMappingForMethod</p>\n<p>RequestMappingHandlerMapping中getMappingForMethod</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">RequestMappingInfo</span> <span class=\"token function\">createRequestMappingInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotatedElement</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">RequestMapping</span> requestMapping <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotatedElementUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findMergedAnnotation</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">RequestCondition</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> condition <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>element <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Class</span> <span class=\"token operator\">?</span>\n         <span class=\"token function\">getCustomTypeCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">getCustomMethodCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>requestMapping <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">createRequestMappingInfo</span><span class=\"token punctuation\">(</span>requestMapping<span class=\"token punctuation\">,</span> condition<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>会去判断实现RequestMapping的方法实现，而加入RequestMappingInfo信息中</p>\n<h3 id=\"RouterFunctionMapping\"><a href=\"#RouterFunctionMapping\" class=\"headerlink\" title=\"RouterFunctionMapping\"></a>RouterFunctionMapping</h3><p>支持webflux相关</p>\n<h2 id=\"HandlerAdapter的实现类\"><a href=\"#HandlerAdapter的实现类\" class=\"headerlink\" title=\"HandlerAdapter的实现类\"></a>HandlerAdapter的实现类</h2><ul>\n<li><strong>HttpRequestHandlerAdapter</strong> 判断是否是实现HttpRequestHandler接口</li>\n<li><strong>SimpleControllerHandlerAdapter</strong>判断是否实现Controller接口</li>\n<li><strong>RequestMappingHandlerAdapter</strong> 判断是不是HandlerMethod，注解类型的都是这种</li>\n</ul>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HandlerAdapter</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">/**\n\t * 是否支持该处理器\n\t */</span>\n   <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * 执行处理器，返回 ModelAndView 结果\n\t */</span>\n   <span class=\"token annotation punctuation\">@Nullable</span>\n   <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * 返回请求的最新更新时间，如果不支持该操作，则返回 -1 即可\n\t */</span>\n   <span class=\"token annotation punctuation\">@Deprecated</span>\n   <span class=\"token keyword\">long</span> <span class=\"token function\">getLastModified</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"HttpRequestHandlerAdapter\"><a href=\"#HttpRequestHandlerAdapter\" class=\"headerlink\" title=\"HttpRequestHandlerAdapter\"></a>HttpRequestHandlerAdapter</h3><p>如果这个处理器实现了 <code>HttpRequestHandler</code> 接口，则使用 <code>HttpRequestHandlerAdapter</code> 调用该处理器的 <code>handleRequest(HttpServletRequest request, HttpServletResponse response)</code>方法去处理器请求</p>\n<h3 id=\"SimpleControllerHandlerAdapter\"><a href=\"#SimpleControllerHandlerAdapter\" class=\"headerlink\" title=\"SimpleControllerHandlerAdapter\"></a>SimpleControllerHandlerAdapter</h3><p>和 HttpRequestHandlerAdapter 差不多，如果这个处理器实现了 <code>Controoler</code> 接口，则使用 <code>HttpRequestHandlerAdapter</code> 调用该处理器的 <code>handleRequest(HttpServletRequest request, HttpServletResponse response)</code>方法去处理器请求，直接返回处理器执行后返回 <code>ModelAndView</code></p>\n<h3 id=\"RequestMappingHandlerAdapter\"><a href=\"#RequestMappingHandlerAdapter\" class=\"headerlink\" title=\"RequestMappingHandlerAdapter\"></a>RequestMappingHandlerAdapter</h3><p>实现 BeanFactoryAware、InitializingBean 接口，继承 AbstractHandlerMethodAdapter 抽象类，基于 <code>@RequestMapping</code> 注解的 HandlerMethod 处理器的 HandlerMethodAdapter 实现类</p>\n<p>几个主要的属性对象：</p>\n<ul>\n<li><code>HandlerMethodArgumentResolverComposite argumentResolvers</code>：参数处理器组合对象</li>\n<li><code>HandlerMethodReturnValueHandlerComposite returnValueHandlers</code>：返回值处理器组合对象</li>\n<li><code>List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters</code>：HTTP 消息转换器集合对象</li>\n<li><code>List&lt;Object&gt; requestResponseBodyAdvice</code>： RequestResponseAdvice 集合对象</li>\n</ul>\n<h4 id=\"InitializingBean对参数初始化\"><a href=\"#InitializingBean对参数初始化\" class=\"headerlink\" title=\"InitializingBean对参数初始化\"></a>InitializingBean对参数初始化</h4><blockquote>\n<p>这个时候会准备参数解析器和返回值处理器</p>\n</blockquote>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Do this first, it may add ResponseBody advice beans</span>\n\t<span class=\"token function\">initControllerAdviceCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HandlerMethodArgumentResolver</span><span class=\"token punctuation\">></span></span> resolvers <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultArgumentResolvers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerMethodArgumentResolverComposite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResolvers</span><span class=\"token punctuation\">(</span>resolvers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initBinderArgumentResolvers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HandlerMethodArgumentResolver</span><span class=\"token punctuation\">></span></span> resolvers <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultInitBinderArgumentResolvers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initBinderArgumentResolvers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerMethodArgumentResolverComposite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResolvers</span><span class=\"token punctuation\">(</span>resolvers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HandlerMethodReturnValueHandler</span><span class=\"token punctuation\">></span></span> handlers <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultReturnValueHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerMethodReturnValueHandlerComposite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHandlers</span><span class=\"token punctuation\">(</span>handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"参数解析器和返回值处理器的前置工作\"><a href=\"#参数解析器和返回值处理器的前置工作\" class=\"headerlink\" title=\"参数解析器和返回值处理器的前置工作\"></a>参数解析器和返回值处理器的前置工作</h4><p> RequestMappingHandlerAdapter.invokeHandlerMethod</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Nullable</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">invokeHandlerMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HandlerMethod</span> handlerMethod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token class-name\">ServletWebRequest</span> webRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletWebRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">WebDataBinderFactory</span> binderFactory <span class=\"token operator\">=</span> <span class=\"token function\">getDataBinderFactory</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">ModelFactory</span> modelFactory <span class=\"token operator\">=</span> <span class=\"token function\">getModelFactory</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">,</span> binderFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">/**\n\t\t\t * 用于组合执行期间所需要的一些组件\n\t\t\t */</span>\n\t\t\t<span class=\"token class-name\">ServletInvocableHandlerMethod</span> invocableMethod <span class=\"token operator\">=</span> <span class=\"token function\">createInvocableHandlerMethod</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setHandlerMethodArgumentResolvers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setHandlerMethodReturnValueHandlers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setDataBinderFactory</span><span class=\"token punctuation\">(</span>binderFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setParameterNameDiscoverer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parameterNameDiscoverer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">ModelAndViewContainer</span> mavContainer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndViewContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addAllAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestContextUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputFlashMap</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmodelFactory<span class=\"token punctuation\">.</span><span class=\"token function\">initModel</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> invocableMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setIgnoreDefaultModelOnRedirect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ignoreDefaultModelOnRedirect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">AsyncWebRequest</span> asyncWebRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">WebAsyncUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">createAsyncWebRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>asyncRequestTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">WebAsyncManager</span> asyncManager <span class=\"token operator\">=</span> <span class=\"token class-name\">WebAsyncUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsyncManager</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">setAsyncWebRequest</span><span class=\"token punctuation\">(</span>asyncWebRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">registerCallableInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callableInterceptors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">registerDeferredResultInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deferredResultInterceptors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">hasConcurrentResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConcurrentResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmavContainer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelAndViewContainer</span><span class=\"token punctuation\">)</span> asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConcurrentResultContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">clearConcurrentResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">LogFormatUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">traceDebug</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">,</span> traceOn <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token class-name\">String</span> formatted <span class=\"token operator\">=</span> <span class=\"token class-name\">LogFormatUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatValue</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>traceOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Resume with async result [\"</span> <span class=\"token operator\">+</span> formatted <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tinvocableMethod <span class=\"token operator\">=</span> invocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">wrapConcurrentResult</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">/**\n\t\t\t * 具体执行期间，会传入临时容器mavContainer\n\t\t\t */</span>\n\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invokeAndHandle</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">/**\n\t\t\t * 从mavContainer抽取ModelAndView\n\t\t\t */</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getModelAndView</span><span class=\"token punctuation\">(</span>mavContainer<span class=\"token punctuation\">,</span> modelFactory<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\twebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">requestCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>未来反射解析目标方法中的每一个值 argumentResolvers</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">if (this.argumentResolvers !&#x3D; null) &#123;\n   invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>返回值处理器，未来用于处理目标方法执行后的返回值，无论目标方法返回什么会转换为适配器所使用的ModelAndView</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">if (this.returnValueHandlers !&#x3D; null) &#123;\n    invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">ServletInvocableHandlerMethod invocableMethod &#x3D; createInvocableHandlerMethod(handlerMethod);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>把该有的组件组合到ServletInvocableHandlerMethod对象中去，最终使用ServletInvocableHandlerMethod进行invokeAndHandle，将数据最后封装到ModelAndViewContainer中去，最后再将ModelAndViewContainer（临时容器，每一次请求都是新new 的对象，同一次请求期间共享数据）抽取ModelAndView（数据和视图）。</p>\n<h4 id=\"参数解析器\"><a href=\"#参数解析器\" class=\"headerlink\" title=\"参数解析器\"></a>参数解析器</h4><blockquote>\n<p>27个参数解析器</p>\n</blockquote>\n<p> ServletInvocableHandlerMethod.invokeAndHandle–&gt;invokeForRequest–&gt;getMethodArgumentValues</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">protected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception &#123;\n\n\t\tMethodParameter[] parameters &#x3D; getMethodParameters();\n\t\tif (ObjectUtils.isEmpty(parameters)) &#123;\n\t\t\treturn EMPTY_ARGS;\n\t\t&#125;\n\n\t\tObject[] args &#x3D; new Object[parameters.length];\n\t\t&#x2F;**\n\t\t * 遍历所有的参数使用参数解析器去解析，首个参数解析器解析到了就跳过，执行下一个参数解析\n\t\t *&#x2F;\n\t\tfor (int i &#x3D; 0; i &lt; parameters.length; i++) &#123;\n\t\t\tMethodParameter parameter &#x3D; parameters[i];\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\targs[i] &#x3D; findProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] !&#x3D; null) &#123;\n\t\t\t\tcontinue;\n\t\t\t&#125;\n\t\t\t&#x2F;**\n\t\t\t * 这里判断采用门面以27种都去判断一遍\n\t\t\t *&#x2F;\n\t\t\tif (!this.resolvers.supportsParameter(parameter)) &#123;\n\t\t\t\tthrow new IllegalStateException(formatArgumentError(parameter, &quot;No suitable resolver&quot;));\n\t\t\t&#125;\n\t\t\ttry &#123;\n\t\t\t\t&#x2F;**\n\t\t\t\t * 支持了就开始解析\n\t\t\t\t *&#x2F;\n\t\t\t\targs[i] &#x3D; this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);\n\t\t\t&#125;\n\t\t\tcatch (Exception ex) &#123;\n\t\t\t\t&#x2F;&#x2F; Leave stack trace for later, exception may actually be resolved and handled...\n\t\t\t\tif (logger.isDebugEnabled()) &#123;\n\t\t\t\t\tString exMsg &#x3D; ex.getMessage();\n\t\t\t\t\tif (exMsg !&#x3D; null &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;\n\t\t\t\t\t\tlogger.debug(formatArgumentError(parameter, exMsg));\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t\tthrow ex;\n\t\t\t&#125;\n\t\t&#125;\n\t\treturn args;\n\t&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"返回值处理器\"><a href=\"#返回值处理器\" class=\"headerlink\" title=\"返回值处理器\"></a>返回值处理器</h4><blockquote>\n<p>15个返回值处理器</p>\n</blockquote>\n<p> ServletInvocableHandlerMethod.invokeAndHandle</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeAndHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletWebRequest</span> webRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> providedArgs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/**\n    * 目标方法的放射执行\n    */</span>\n   <span class=\"token class-name\">Object</span> returnValue <span class=\"token operator\">=</span> <span class=\"token function\">invokeForRequest</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> providedArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">setResponseStatus</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRequestNotModified</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">getResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">isRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">disableContentCachingIfNecessary</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResponseStatusReason</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No return value handlers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers<span class=\"token punctuation\">.</span><span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span>\n            returnValue<span class=\"token punctuation\">,</span> <span class=\"token function\">getReturnValueType</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatErrorForReturnValue</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>找到 returnValueHandlers 执行handleReturnValue</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span> returnValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/**\n    * 找到合适的返回值处理器\n    */</span>\n   <span class=\"token class-name\">HandlerMethodReturnValueHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token function\">selectHandler</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown return value type: \"</span> <span class=\"token operator\">+</span> returnType<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">/**\n    * 执行返回值处理器的处理方法\n    */</span>\n   handler<span class=\"token punctuation\">.</span><span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>逻辑依然是以先找到为准</p>\n<p>接下来执行后置的视图解析器相关业务流程</p>\n<h4 id=\"视图解析器\"><a href=\"#视图解析器\" class=\"headerlink\" title=\"视图解析器\"></a>视图解析器</h4><h5 id=\"核心接口\"><a href=\"#核心接口\" class=\"headerlink\" title=\"核心接口\"></a>核心接口</h5><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">&#123;</span>\n\n\n   <span class=\"token class-name\">String</span> <span class=\"token constant\">RESPONSE_STATUS_ATTRIBUTE</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".responseStatus\"</span><span class=\"token punctuation\">;</span>\n\n\n   <span class=\"token class-name\">String</span> <span class=\"token constant\">PATH_VARIABLES</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".pathVariables\"</span><span class=\"token punctuation\">;</span>\n\n\n   <span class=\"token class-name\">String</span> <span class=\"token constant\">SELECTED_CONTENT_TYPE</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".selectedContentType\"</span><span class=\"token punctuation\">;</span>\n\n\n\n   <span class=\"token annotation punctuation\">@Nullable</span>\n   <span class=\"token keyword\">default</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">void</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> model<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">public interface ViewResolver &#123;\n\n\n   @Nullable\n   View resolveViewName(String viewName, Locale locale) throws Exception;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>View 视图 </p>\n<p>ViewResolver  视图解析</p>\n<h5 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h5><p>  HandlerAdapter执行完成后会返回ModelAndView对象（里面包含viewName）</p>\n<p>所有ViewResolver去解析viewName，一得到就返回，得到View对象，最后调用VIew对象render渲染</p>\n","more":"<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><blockquote>\n<p>HandlerMapping和HandlerAdapter初始化流程基本一致</p>\n</blockquote>\n<p>1、DispatcherServlet创建对象后，Tomcat调用初始化回调钩子initServletBean()</p>\n<p>2、容器启动完成后，Spring发送事件，执行到DispatcherServlet.onRefresh()</p>\n<p>3、onRefresh执行九大组件的初始化</p>\n<p>HandlerMapping初始化流程（RequestMappingHandlerMapping为例）</p>\n<ul>\n<li>创建配置中的HandlerMapping对象3种</li>\n<li>启动createBean使用IOC创建容器</li>\n<li>基于Spring的原理，实现了InitializingBean,容器启动后续执行afterPropertiesSet</li>\n<li>拿到子容器（Web容器）的所有组件，扫描@Controller或者@RequestMapping</li>\n<li>将分析到的信息放于HandlerMapping的registry对象中，以便后续使用</li>\n</ul>\n<h2 id=\"HandlerMapping的实现类\"><a href=\"#HandlerMapping的实现类\" class=\"headerlink\" title=\"HandlerMapping的实现类\"></a>HandlerMapping的实现类</h2><ul>\n<li><p><strong>BeanNameUrlHandlerMapping</strong>  以bean的名字作为url路径，进行映射</p>\n</li>\n<li><p><strong>SimpleUrlHandlerMapping</strong> 手动配置url与handler的映射</p>\n</li>\n<li><p><strong>RequestMappingHandlerMapping</strong> 使用注解的形式来标识url与handler的映射,平时这种使用最多，重点分析</p>\n</li>\n<li><p><strong>RouterFunctionMapping</strong>  支持函数式以及webFlux相关的功能</p>\n</li>\n</ul>\n<h3 id=\"BeanNameUrlHandlerMapping\"><a href=\"#BeanNameUrlHandlerMapping\" class=\"headerlink\" title=\"BeanNameUrlHandlerMapping\"></a><strong>BeanNameUrlHandlerMapping</strong></h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanNameUrlHandlerMapping</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDetectingUrlHandlerMapping</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token comment\">/**\n    * Checks name and aliases of the given bean for URLs, starting with \"/\".\n    */</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">determineUrlsForHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> urls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         urls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> aliases <span class=\"token operator\">=</span> <span class=\"token function\">obtainApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> alias <span class=\"token operator\">:</span> aliases<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>alias<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            urls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>alias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStringArray</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该实现类可以把IOC容器中name以”&#x2F;“ 开头的Bean注册为handler,</p>\n<h3 id=\"SimpleUrlHandlerMapping\"><a href=\"#SimpleUrlHandlerMapping\" class=\"headerlink\" title=\"SimpleUrlHandlerMapping\"></a>SimpleUrlHandlerMapping</h3><p>手动配置url与handler的映射,初始化的时候就注册进去了</p>\n<h3 id=\"RequestMappingHandlerMapping\"><a href=\"#RequestMappingHandlerMapping\" class=\"headerlink\" title=\"RequestMappingHandlerMapping\"></a>RequestMappingHandlerMapping</h3><p>这是最常用的HandlerMapping实现，通过它，我们可以使用注解的形式来标识url与handler的映射：</p>\n<p> AbstractHandlerMethodMapping.initHandlerMethods然后执行到 processCandidateBean-&gt;detectHandlerMethods再到交由子类实现getMappingForMethod</p>\n<p>RequestMappingHandlerMapping中getMappingForMethod</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">RequestMappingInfo</span> <span class=\"token function\">createRequestMappingInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotatedElement</span> element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">RequestMapping</span> requestMapping <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotatedElementUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findMergedAnnotation</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">RequestCondition</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> condition <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>element <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Class</span> <span class=\"token operator\">?</span>\n         <span class=\"token function\">getCustomTypeCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">getCustomMethodCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>requestMapping <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">createRequestMappingInfo</span><span class=\"token punctuation\">(</span>requestMapping<span class=\"token punctuation\">,</span> condition<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>会去判断实现RequestMapping的方法实现，而加入RequestMappingInfo信息中</p>\n<h3 id=\"RouterFunctionMapping\"><a href=\"#RouterFunctionMapping\" class=\"headerlink\" title=\"RouterFunctionMapping\"></a>RouterFunctionMapping</h3><p>支持webflux相关</p>\n<h2 id=\"HandlerAdapter的实现类\"><a href=\"#HandlerAdapter的实现类\" class=\"headerlink\" title=\"HandlerAdapter的实现类\"></a>HandlerAdapter的实现类</h2><ul>\n<li><strong>HttpRequestHandlerAdapter</strong> 判断是否是实现HttpRequestHandler接口</li>\n<li><strong>SimpleControllerHandlerAdapter</strong>判断是否实现Controller接口</li>\n<li><strong>RequestMappingHandlerAdapter</strong> 判断是不是HandlerMethod，注解类型的都是这种</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HandlerAdapter</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">/**\n\t * 是否支持该处理器\n\t */</span>\n   <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * 执行处理器，返回 ModelAndView 结果\n\t */</span>\n   <span class=\"token annotation punctuation\">@Nullable</span>\n   <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * 返回请求的最新更新时间，如果不支持该操作，则返回 -1 即可\n\t */</span>\n   <span class=\"token annotation punctuation\">@Deprecated</span>\n   <span class=\"token keyword\">long</span> <span class=\"token function\">getLastModified</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"HttpRequestHandlerAdapter\"><a href=\"#HttpRequestHandlerAdapter\" class=\"headerlink\" title=\"HttpRequestHandlerAdapter\"></a>HttpRequestHandlerAdapter</h3><p>如果这个处理器实现了 <code>HttpRequestHandler</code> 接口，则使用 <code>HttpRequestHandlerAdapter</code> 调用该处理器的 <code>handleRequest(HttpServletRequest request, HttpServletResponse response)</code>方法去处理器请求</p>\n<h3 id=\"SimpleControllerHandlerAdapter\"><a href=\"#SimpleControllerHandlerAdapter\" class=\"headerlink\" title=\"SimpleControllerHandlerAdapter\"></a>SimpleControllerHandlerAdapter</h3><p>和 HttpRequestHandlerAdapter 差不多，如果这个处理器实现了 <code>Controoler</code> 接口，则使用 <code>HttpRequestHandlerAdapter</code> 调用该处理器的 <code>handleRequest(HttpServletRequest request, HttpServletResponse response)</code>方法去处理器请求，直接返回处理器执行后返回 <code>ModelAndView</code></p>\n<h3 id=\"RequestMappingHandlerAdapter\"><a href=\"#RequestMappingHandlerAdapter\" class=\"headerlink\" title=\"RequestMappingHandlerAdapter\"></a>RequestMappingHandlerAdapter</h3><p>实现 BeanFactoryAware、InitializingBean 接口，继承 AbstractHandlerMethodAdapter 抽象类，基于 <code>@RequestMapping</code> 注解的 HandlerMethod 处理器的 HandlerMethodAdapter 实现类</p>\n<p>几个主要的属性对象：</p>\n<ul>\n<li><code>HandlerMethodArgumentResolverComposite argumentResolvers</code>：参数处理器组合对象</li>\n<li><code>HandlerMethodReturnValueHandlerComposite returnValueHandlers</code>：返回值处理器组合对象</li>\n<li><code>List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters</code>：HTTP 消息转换器集合对象</li>\n<li><code>List&lt;Object&gt; requestResponseBodyAdvice</code>： RequestResponseAdvice 集合对象</li>\n</ul>\n<h4 id=\"InitializingBean对参数初始化\"><a href=\"#InitializingBean对参数初始化\" class=\"headerlink\" title=\"InitializingBean对参数初始化\"></a>InitializingBean对参数初始化</h4><blockquote>\n<p>这个时候会准备参数解析器和返回值处理器</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Do this first, it may add ResponseBody advice beans</span>\n\t<span class=\"token function\">initControllerAdviceCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HandlerMethodArgumentResolver</span><span class=\"token punctuation\">></span></span> resolvers <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultArgumentResolvers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerMethodArgumentResolverComposite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResolvers</span><span class=\"token punctuation\">(</span>resolvers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initBinderArgumentResolvers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HandlerMethodArgumentResolver</span><span class=\"token punctuation\">></span></span> resolvers <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultInitBinderArgumentResolvers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initBinderArgumentResolvers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerMethodArgumentResolverComposite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResolvers</span><span class=\"token punctuation\">(</span>resolvers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HandlerMethodReturnValueHandler</span><span class=\"token punctuation\">></span></span> handlers <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultReturnValueHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerMethodReturnValueHandlerComposite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHandlers</span><span class=\"token punctuation\">(</span>handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"参数解析器和返回值处理器的前置工作\"><a href=\"#参数解析器和返回值处理器的前置工作\" class=\"headerlink\" title=\"参数解析器和返回值处理器的前置工作\"></a>参数解析器和返回值处理器的前置工作</h4><p> RequestMappingHandlerAdapter.invokeHandlerMethod</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Nullable</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">invokeHandlerMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HandlerMethod</span> handlerMethod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token class-name\">ServletWebRequest</span> webRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletWebRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">WebDataBinderFactory</span> binderFactory <span class=\"token operator\">=</span> <span class=\"token function\">getDataBinderFactory</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">ModelFactory</span> modelFactory <span class=\"token operator\">=</span> <span class=\"token function\">getModelFactory</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">,</span> binderFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">/**\n\t\t\t * 用于组合执行期间所需要的一些组件\n\t\t\t */</span>\n\t\t\t<span class=\"token class-name\">ServletInvocableHandlerMethod</span> invocableMethod <span class=\"token operator\">=</span> <span class=\"token function\">createInvocableHandlerMethod</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setHandlerMethodArgumentResolvers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setHandlerMethodReturnValueHandlers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setDataBinderFactory</span><span class=\"token punctuation\">(</span>binderFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setParameterNameDiscoverer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parameterNameDiscoverer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">ModelAndViewContainer</span> mavContainer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndViewContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addAllAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestContextUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputFlashMap</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmodelFactory<span class=\"token punctuation\">.</span><span class=\"token function\">initModel</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> invocableMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setIgnoreDefaultModelOnRedirect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ignoreDefaultModelOnRedirect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">AsyncWebRequest</span> asyncWebRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">WebAsyncUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">createAsyncWebRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>asyncRequestTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\">WebAsyncManager</span> asyncManager <span class=\"token operator\">=</span> <span class=\"token class-name\">WebAsyncUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsyncManager</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">setAsyncWebRequest</span><span class=\"token punctuation\">(</span>asyncWebRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">registerCallableInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callableInterceptors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">registerDeferredResultInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deferredResultInterceptors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">hasConcurrentResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConcurrentResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmavContainer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelAndViewContainer</span><span class=\"token punctuation\">)</span> asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConcurrentResultContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tasyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">clearConcurrentResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\">LogFormatUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">traceDebug</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">,</span> traceOn <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token class-name\">String</span> formatted <span class=\"token operator\">=</span> <span class=\"token class-name\">LogFormatUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatValue</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>traceOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Resume with async result [\"</span> <span class=\"token operator\">+</span> formatted <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tinvocableMethod <span class=\"token operator\">=</span> invocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">wrapConcurrentResult</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">/**\n\t\t\t * 具体执行期间，会传入临时容器mavContainer\n\t\t\t */</span>\n\t\t\tinvocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invokeAndHandle</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">/**\n\t\t\t * 从mavContainer抽取ModelAndView\n\t\t\t */</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getModelAndView</span><span class=\"token punctuation\">(</span>mavContainer<span class=\"token punctuation\">,</span> modelFactory<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\twebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">requestCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>未来反射解析目标方法中的每一个值 argumentResolvers</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if (this.argumentResolvers !&#x3D; null) &#123;\n   invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>返回值处理器，未来用于处理目标方法执行后的返回值，无论目标方法返回什么会转换为适配器所使用的ModelAndView</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if (this.returnValueHandlers !&#x3D; null) &#123;\n    invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ServletInvocableHandlerMethod invocableMethod &#x3D; createInvocableHandlerMethod(handlerMethod);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>把该有的组件组合到ServletInvocableHandlerMethod对象中去，最终使用ServletInvocableHandlerMethod进行invokeAndHandle，将数据最后封装到ModelAndViewContainer中去，最后再将ModelAndViewContainer（临时容器，每一次请求都是新new 的对象，同一次请求期间共享数据）抽取ModelAndView（数据和视图）。</p>\n<h4 id=\"参数解析器\"><a href=\"#参数解析器\" class=\"headerlink\" title=\"参数解析器\"></a>参数解析器</h4><blockquote>\n<p>27个参数解析器</p>\n</blockquote>\n<p> ServletInvocableHandlerMethod.invokeAndHandle–&gt;invokeForRequest–&gt;getMethodArgumentValues</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">protected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception &#123;\n\n\t\tMethodParameter[] parameters &#x3D; getMethodParameters();\n\t\tif (ObjectUtils.isEmpty(parameters)) &#123;\n\t\t\treturn EMPTY_ARGS;\n\t\t&#125;\n\n\t\tObject[] args &#x3D; new Object[parameters.length];\n\t\t&#x2F;**\n\t\t * 遍历所有的参数使用参数解析器去解析，首个参数解析器解析到了就跳过，执行下一个参数解析\n\t\t *&#x2F;\n\t\tfor (int i &#x3D; 0; i &lt; parameters.length; i++) &#123;\n\t\t\tMethodParameter parameter &#x3D; parameters[i];\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\targs[i] &#x3D; findProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] !&#x3D; null) &#123;\n\t\t\t\tcontinue;\n\t\t\t&#125;\n\t\t\t&#x2F;**\n\t\t\t * 这里判断采用门面以27种都去判断一遍\n\t\t\t *&#x2F;\n\t\t\tif (!this.resolvers.supportsParameter(parameter)) &#123;\n\t\t\t\tthrow new IllegalStateException(formatArgumentError(parameter, &quot;No suitable resolver&quot;));\n\t\t\t&#125;\n\t\t\ttry &#123;\n\t\t\t\t&#x2F;**\n\t\t\t\t * 支持了就开始解析\n\t\t\t\t *&#x2F;\n\t\t\t\targs[i] &#x3D; this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);\n\t\t\t&#125;\n\t\t\tcatch (Exception ex) &#123;\n\t\t\t\t&#x2F;&#x2F; Leave stack trace for later, exception may actually be resolved and handled...\n\t\t\t\tif (logger.isDebugEnabled()) &#123;\n\t\t\t\t\tString exMsg &#x3D; ex.getMessage();\n\t\t\t\t\tif (exMsg !&#x3D; null &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;\n\t\t\t\t\t\tlogger.debug(formatArgumentError(parameter, exMsg));\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t\tthrow ex;\n\t\t\t&#125;\n\t\t&#125;\n\t\treturn args;\n\t&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"返回值处理器\"><a href=\"#返回值处理器\" class=\"headerlink\" title=\"返回值处理器\"></a>返回值处理器</h4><blockquote>\n<p>15个返回值处理器</p>\n</blockquote>\n<p> ServletInvocableHandlerMethod.invokeAndHandle</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeAndHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletWebRequest</span> webRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> providedArgs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/**\n    * 目标方法的放射执行\n    */</span>\n   <span class=\"token class-name\">Object</span> returnValue <span class=\"token operator\">=</span> <span class=\"token function\">invokeForRequest</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> providedArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">setResponseStatus</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRequestNotModified</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">getResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">isRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">disableContentCachingIfNecessary</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResponseStatusReason</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"No return value handlers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers<span class=\"token punctuation\">.</span><span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span>\n            returnValue<span class=\"token punctuation\">,</span> <span class=\"token function\">getReturnValueType</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         logger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatErrorForReturnValue</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>找到 returnValueHandlers 执行handleReturnValue</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span> returnValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/**\n    * 找到合适的返回值处理器\n    */</span>\n   <span class=\"token class-name\">HandlerMethodReturnValueHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token function\">selectHandler</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown return value type: \"</span> <span class=\"token operator\">+</span> returnType<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">/**\n    * 执行返回值处理器的处理方法\n    */</span>\n   handler<span class=\"token punctuation\">.</span><span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>逻辑依然是以先找到为准</p>\n<p>接下来执行后置的视图解析器相关业务流程</p>\n<h4 id=\"视图解析器\"><a href=\"#视图解析器\" class=\"headerlink\" title=\"视图解析器\"></a>视图解析器</h4><h5 id=\"核心接口\"><a href=\"#核心接口\" class=\"headerlink\" title=\"核心接口\"></a>核心接口</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">&#123;</span>\n\n\n   <span class=\"token class-name\">String</span> <span class=\"token constant\">RESPONSE_STATUS_ATTRIBUTE</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".responseStatus\"</span><span class=\"token punctuation\">;</span>\n\n\n   <span class=\"token class-name\">String</span> <span class=\"token constant\">PATH_VARIABLES</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".pathVariables\"</span><span class=\"token punctuation\">;</span>\n\n\n   <span class=\"token class-name\">String</span> <span class=\"token constant\">SELECTED_CONTENT_TYPE</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".selectedContentType\"</span><span class=\"token punctuation\">;</span>\n\n\n\n   <span class=\"token annotation punctuation\">@Nullable</span>\n   <span class=\"token keyword\">default</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">void</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> model<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public interface ViewResolver &#123;\n\n\n   @Nullable\n   View resolveViewName(String viewName, Locale locale) throws Exception;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>View 视图 </p>\n<p>ViewResolver  视图解析</p>\n<h5 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h5><p>  HandlerAdapter执行完成后会返回ModelAndView对象（里面包含viewName）</p>\n<p>所有ViewResolver去解析viewName，一得到就返回，得到View对象，最后调用VIew对象render渲染</p>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"SpringMVC源码","path":"api/categories/SpringMVC源码.json"}],"tags":[]}