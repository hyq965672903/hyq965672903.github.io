{"title":"剑指源码-spring(一)-序章","slug":"剑指源码-spring-一-序章","date":"2022-04-22T11:53:11.000Z","updated":"2024-04-22T07:21:14.899Z","comments":true,"path":"api/articles/剑指源码-spring-一-序章.json","excerpt":" 快速了解spring IOC容器的启动流程","covers":["http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423085321489.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423123042199.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423123220705.png","http://hyqup-blog-upyun.test.upcdn.net/img/Spring%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E5%9B%BE.jpg","/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-spring-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220423161153634.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423162300061.png"],"content":"<p> 快速了解spring IOC容器的启动流程</p>\n<span id=\"more\"></span>\n\n<p>这里以我们开发常用的注解形式</p>\n<ol>\n<li>创建AnnotationConfigApplicationContext 对象，这个对象继承于GenericApplicationContext，而GenericApplicationContext对象中有DefaultListableBeanFactory；</li>\n<li>创建 DefaultListableBeanFactory之后会解析和扫描注解上的所有bean信息封装成BeanDefinition信息，BeanDefinition中有Spring的所有bean的相关定义描述信息；</li>\n<li>先将bean进行实例化，然后根据BeanDefinition的信息，底层采用反射的信息进行创建具体的bean对象；</li>\n<li>将实例化后的bean对象放到一个Map中，后续应用就从Map中获取Bean对象，该Map也就是我们的IOC容器</li>\n</ol>\n<p>ps：其中有许多细节都没说，比如这里的Map 存在多个，解决了什么问题，创建的过程细节等等，接下来就开是进入源码解析的具体学习</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"源码版本\"><a href=\"#源码版本\" class=\"headerlink\" title=\"源码版本\"></a>源码版本</h2><p>  github地址  </p>\n<p><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.10\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.10</a></p>\n<p>源码分析地址</p>\n<p><a href=\"https://github.com/hyq965672903/sourcecode-learn-spring.git\">https://github.com/hyq965672903/sourcecode-learn-spring.git</a></p>\n<p>相关环境：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、操作系统：Windows10\n2、JDK 版本：Jdk11\n3、IDE 工具：IntelliJ IDEA 2021.2\n\tidea对应kotlin 编译版本 1.5.10\n4、项目构建工具：gradle-7.2\n5、spring 版本 5.3.10 \n\t当前spring kotlin 对应版本是1.5.30（根目录build.gradle中 搜 kotlin.jvm）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>ps ：要注意当前的idea kotlin 插件版本和当前源码对应的kotlin版本，因为编译需要kotlin ，所以可能报错</p>\n<h2 id=\"遇到的问题及解决方法\"><a href=\"#遇到的问题及解决方法\" class=\"headerlink\" title=\"遇到的问题及解决方法\"></a>遇到的问题及解决方法</h2><p>1、配置环境变量  GRADLE_USER_HOME</p>\n<p>类似于maven 的本地仓库地址 </p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423085321489.png\" alt=\"image-20220423085321489\"></p>\n<p>2、IDEA gradle 配置说明</p>\n<p>spring源码下gradle 文件夹-&gt;wrapper文件夹的gradle-wrapper.properties如下</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">distributionBase<span class=\"token operator\">=</span>GRADLE_USER_HOME\ndistributionPath<span class=\"token operator\">=</span>wrapper<span class=\"token operator\">/</span>dists\ndistributionUrl<span class=\"token operator\">=</span>https\\<span class=\"token punctuation\">:</span><span class=\"token interpolation-string\"><span class=\"token string\">//</span></span>services<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>org<span class=\"token interpolation-string\"><span class=\"token string\">/distributions/</span></span>gradle<span class=\"token operator\">-</span><span class=\"token number\">7.2</span><span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span>zip\nzipStoreBase<span class=\"token operator\">=</span>GRADLE_USER_HOME\nzipStorePath<span class=\"token operator\">=</span>wrapper<span class=\"token operator\">/</span>dists\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>IDEA需要配置一些东西来保证使用该wrapper 构建 如果不行 <strong><del>请删除 gradle user  home</del></strong></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423123042199.png\" alt=\"image-20220423123042199\"></p>\n<p>3、根目录build.gradle 加入阿里云镜像仓库</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423123220705.png\" alt=\"image-20220423123220705\"></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">maven <span class=\"token punctuation\">&#123;</span>\n            url <span class=\"token string\">'https://maven.aliyun.com/repository/central'</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h1 id=\"Spring框架的整体流程\"><a href=\"#Spring框架的整体流程\" class=\"headerlink\" title=\"Spring框架的整体流程\"></a>Spring框架的整体流程</h1><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/Spring%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E5%9B%BE.jpg\" alt=\"Spring架构原理图\"></p>\n<blockquote>\n<p>图源自于 雷丰阳-设计模式</p>\n</blockquote>\n<p>整体流程分三大块</p>\n<p>1、首先从各个环境读取bean定义信息，可以从本地xml,注解，或者网络、磁盘读取到文档信息Document</p>\n<p>2、通过BeanDefinitionRegistry将信息读取为BeanDefinition 放入DefaultListableBeanFactory的beanDefinitionMap对象中去</p>\n<p>3、通过BeanDefinition的Bean定义信息来创建我们所需要的对象，创建过程十分复杂</p>\n<h2 id=\"核心接口\"><a href=\"#核心接口\" class=\"headerlink\" title=\"核心接口\"></a>核心接口</h2><h3 id=\"基础接口\"><a href=\"#基础接口\" class=\"headerlink\" title=\"基础接口\"></a>基础接口</h3><ul>\n<li>Resource ResourceLoader </li>\n<li>BeanFactory</li>\n<li>BeanDefinition</li>\n<li>BeanDefinitionReader</li>\n<li>BeanDefinitionRegistry</li>\n<li>ApplicationContext</li>\n<li>Aware</li>\n</ul>\n<h3 id=\"生命周期-后置处理器\"><a href=\"#生命周期-后置处理器\" class=\"headerlink\" title=\"生命周期-后置处理器\"></a>生命周期-后置处理器</h3><ul>\n<li>BeanFactoryPostProcessor</li>\n<li>InitializingBean</li>\n<li>BeanPostProcessor</li>\n</ul>\n<p><img src=\"/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-spring-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220423161153634.png\" alt=\"image-20220423161153634\"></p>\n<p>日常开发使用注解开发比较多，其核心就是 <strong>AnnotationConfigApplicationContext</strong> 作为入口进行对象解析开始直接流程的</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423162300061.png\" alt=\"image-20220423162300061\"></p>\n<p>GenericApplicationContext ：<br>private final DefaultListableBeanFactory beanFactory; </p>\n<p>GenericApplicationContext 里面存在 DefaultListableBeanFactory  ，而DefaultListableBeanFactory  本质上又是一个档案馆，也就是第一大步骤获取到的bean定义信息等各种核心信息都会存到这里，后续IOC容器创建的bean信息来源基本上都来自于这里。</p>\n<p>上面的含义也就是  AnnotationConfigApplicationContext 组合了档案馆信息</p>\n","more":"<p>这里以我们开发常用的注解形式</p>\n<ol>\n<li>创建AnnotationConfigApplicationContext 对象，这个对象继承于GenericApplicationContext，而GenericApplicationContext对象中有DefaultListableBeanFactory；</li>\n<li>创建 DefaultListableBeanFactory之后会解析和扫描注解上的所有bean信息封装成BeanDefinition信息，BeanDefinition中有Spring的所有bean的相关定义描述信息；</li>\n<li>先将bean进行实例化，然后根据BeanDefinition的信息，底层采用反射的信息进行创建具体的bean对象；</li>\n<li>将实例化后的bean对象放到一个Map中，后续应用就从Map中获取Bean对象，该Map也就是我们的IOC容器</li>\n</ol>\n<p>ps：其中有许多细节都没说，比如这里的Map 存在多个，解决了什么问题，创建的过程细节等等，接下来就开是进入源码解析的具体学习</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"源码版本\"><a href=\"#源码版本\" class=\"headerlink\" title=\"源码版本\"></a>源码版本</h2><p>  github地址  </p>\n<p><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.10\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.10</a></p>\n<p>源码分析地址</p>\n<p><a href=\"https://github.com/hyq965672903/sourcecode-learn-spring.git\">https://github.com/hyq965672903/sourcecode-learn-spring.git</a></p>\n<p>相关环境：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、操作系统：Windows10\n2、JDK 版本：Jdk11\n3、IDE 工具：IntelliJ IDEA 2021.2\n\tidea对应kotlin 编译版本 1.5.10\n4、项目构建工具：gradle-7.2\n5、spring 版本 5.3.10 \n\t当前spring kotlin 对应版本是1.5.30（根目录build.gradle中 搜 kotlin.jvm）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ps ：要注意当前的idea kotlin 插件版本和当前源码对应的kotlin版本，因为编译需要kotlin ，所以可能报错</p>\n<h2 id=\"遇到的问题及解决方法\"><a href=\"#遇到的问题及解决方法\" class=\"headerlink\" title=\"遇到的问题及解决方法\"></a>遇到的问题及解决方法</h2><p>1、配置环境变量  GRADLE_USER_HOME</p>\n<p>类似于maven 的本地仓库地址 </p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423085321489.png\" alt=\"image-20220423085321489\"></p>\n<p>2、IDEA gradle 配置说明</p>\n<p>spring源码下gradle 文件夹-&gt;wrapper文件夹的gradle-wrapper.properties如下</p>\n<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">distributionBase<span class=\"token operator\">=</span>GRADLE_USER_HOME\ndistributionPath<span class=\"token operator\">=</span>wrapper<span class=\"token operator\">/</span>dists\ndistributionUrl<span class=\"token operator\">=</span>https\\<span class=\"token punctuation\">:</span><span class=\"token interpolation-string\"><span class=\"token string\">//</span></span>services<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>org<span class=\"token interpolation-string\"><span class=\"token string\">/distributions/</span></span>gradle<span class=\"token operator\">-</span><span class=\"token number\">7.2</span><span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span>zip\nzipStoreBase<span class=\"token operator\">=</span>GRADLE_USER_HOME\nzipStorePath<span class=\"token operator\">=</span>wrapper<span class=\"token operator\">/</span>dists\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>IDEA需要配置一些东西来保证使用该wrapper 构建 如果不行 <strong><del>请删除 gradle user  home</del></strong></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423123042199.png\" alt=\"image-20220423123042199\"></p>\n<p>3、根目录build.gradle 加入阿里云镜像仓库</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423123220705.png\" alt=\"image-20220423123220705\"></p>\n<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">maven <span class=\"token punctuation\">&#123;</span>\n            url <span class=\"token string\">'https://maven.aliyun.com/repository/central'</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Spring框架的整体流程\"><a href=\"#Spring框架的整体流程\" class=\"headerlink\" title=\"Spring框架的整体流程\"></a>Spring框架的整体流程</h1><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/Spring%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E5%9B%BE.jpg\" alt=\"Spring架构原理图\"></p>\n<blockquote>\n<p>图源自于 雷丰阳-设计模式</p>\n</blockquote>\n<p>整体流程分三大块</p>\n<p>1、首先从各个环境读取bean定义信息，可以从本地xml,注解，或者网络、磁盘读取到文档信息Document</p>\n<p>2、通过BeanDefinitionRegistry将信息读取为BeanDefinition 放入DefaultListableBeanFactory的beanDefinitionMap对象中去</p>\n<p>3、通过BeanDefinition的Bean定义信息来创建我们所需要的对象，创建过程十分复杂</p>\n<h2 id=\"核心接口\"><a href=\"#核心接口\" class=\"headerlink\" title=\"核心接口\"></a>核心接口</h2><h3 id=\"基础接口\"><a href=\"#基础接口\" class=\"headerlink\" title=\"基础接口\"></a>基础接口</h3><ul>\n<li>Resource ResourceLoader </li>\n<li>BeanFactory</li>\n<li>BeanDefinition</li>\n<li>BeanDefinitionReader</li>\n<li>BeanDefinitionRegistry</li>\n<li>ApplicationContext</li>\n<li>Aware</li>\n</ul>\n<h3 id=\"生命周期-后置处理器\"><a href=\"#生命周期-后置处理器\" class=\"headerlink\" title=\"生命周期-后置处理器\"></a>生命周期-后置处理器</h3><ul>\n<li>BeanFactoryPostProcessor</li>\n<li>InitializingBean</li>\n<li>BeanPostProcessor</li>\n</ul>\n<p><img src=\"/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-spring-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220423161153634.png\" alt=\"image-20220423161153634\"></p>\n<p>日常开发使用注解开发比较多，其核心就是 <strong>AnnotationConfigApplicationContext</strong> 作为入口进行对象解析开始直接流程的</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220423162300061.png\" alt=\"image-20220423162300061\"></p>\n<p>GenericApplicationContext ：<br>private final DefaultListableBeanFactory beanFactory; </p>\n<p>GenericApplicationContext 里面存在 DefaultListableBeanFactory  ，而DefaultListableBeanFactory  本质上又是一个档案馆，也就是第一大步骤获取到的bean定义信息等各种核心信息都会存到这里，后续IOC容器创建的bean信息来源基本上都来自于这里。</p>\n<p>上面的含义也就是  AnnotationConfigApplicationContext 组合了档案馆信息</p>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"Spring源码","path":"api/categories/Spring源码.json"}],"tags":[{"name":"BeanDefinition","path":"api/tags/BeanDefinition.json"}]}