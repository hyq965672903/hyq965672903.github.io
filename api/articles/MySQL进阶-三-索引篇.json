{"title":"MySQL进阶(三)-索引篇","slug":"MySQL进阶-三-索引篇","date":"2023-04-02T05:02:01.000Z","updated":"2024-04-22T07:21:14.891Z","comments":true,"path":"api/articles/MySQL进阶-三-索引篇.json","excerpt":"MySQL索引概念，常见索引，聚簇索引，辅助索引，组合索引，唯一性索引","covers":null,"content":"<p>MySQL索引概念，常见索引，聚簇索引，辅助索引，组合索引，唯一性索引</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>索引是数据库 <strong>高效获取数据</strong>的<strong>数据结构，</strong>加快查询速度，索引一般存储在表空间中，也就是磁盘里</p>\n</blockquote>\n<h2 id=\"优势与劣势\"><a href=\"#优势与劣势\" class=\"headerlink\" title=\"优势与劣势\"></a><strong>优势与劣势</strong></h2><p>优势：<strong>两降一升</strong>，降低磁盘IO频次、降低数据排序的成本，提高数据检索效率</p>\n<p>劣势：占用更多磁盘空间（<code>空间换时间</code>），降低更新效率</p>\n<h2 id=\"索引操作\"><a href=\"#索引操作\" class=\"headerlink\" title=\"索引操作\"></a>索引操作</h2><p><strong>删除索引</strong></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">INDEX</span> index_name <span class=\"token keyword\">ON</span> <span class=\"token keyword\">table</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p><strong>查看索引</strong></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">INDEX</span> <span class=\"token keyword\">FROM</span> table_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>常见可以创建 主键索引、唯一索引、普通索引、全文索引、前缀索引、组合索引</p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a><strong>索引的数据结构</strong></h2><h3 id=\"使用索引的基本需求\"><a href=\"#使用索引的基本需求\" class=\"headerlink\" title=\"使用索引的基本需求\"></a><strong>使用索引的基本需求</strong></h3><p>等值查询：根据某个值查找数据</p>\n<p>范围查询：根据某个范围区间查找数据</p>\n<p> 排序Order By</p>\n<p>分组Group By</p>\n<h3 id=\"可选的数据结构\"><a href=\"#可选的数据结构\" class=\"headerlink\" title=\"可选的数据结构\"></a><strong>可选的数据结构</strong></h3><p>Hash表，二叉树，平衡二叉查找树（红黑树是一个近似平衡二叉树），B树，B+树</p>\n<p><strong><code>Hash表</code></strong></p>\n<p>Hash表存储表数据Key可以存储索引列，Value可以存储行记录或者行磁盘地址。Hash表在等值查询时效率很高，时间复杂度为O(1)</p>\n<p> <strong><code>二叉查找树</code></strong></p>\n<p>每个节点最多有2个分叉，左子树和右子树数据顺序左小右大</p>\n<p>检索复杂度和<strong>树高</strong>相关：<strong>理想状态</strong>下效率可以达到O(logn)</p>\n<p><strong><code>红黑树</code></strong></p>\n<p>平衡二叉树是采用二分法思维，平衡二叉查找树除了具备二叉树的特点，最主要的特征是树的左右两个子树的层级<strong>最多相差</strong>1<strong>。在插入删除数据时通过</strong>左旋**&#x2F;**右旋操作保持二叉树的平衡，不会出现左子树很高、右子树很矮的情况</p>\n<p>缺点：</p>\n<p>数据量大时候，时间更长</p>\n<p>不支持范围查找</p>\n<p>数据量大的时候，索引磁盘占用较大</p>\n<p><strong><code>B树</code><strong>（</strong>改进二叉树，为多叉树</strong>）</p>\n<p>减少IO次数，减少树的高度。在<strong>每个节点尽可能多的存储</strong>数据<strong>。每个节点可以存储1000个索引（16k&#x2F;16&#x3D;1000），这样就将二叉树改造成了</strong>多叉树，通过增加树的叉树，将树从高瘦变为矮胖</p>\n<p>特点：</p>\n<ul>\n<li>B树的节点中存储着多个元素，每个节点内有多个分叉</li>\n<li>节点中的元素包含键值和数据，节点中的键值从大到小排列。也就是说，在所有的节点都储存数据</li>\n<li><strong>父节点当中的元素不会出现在子节点中</strong></li>\n<li><strong>所有的叶子结点都位于同一层，叶节点具有相同的深度，叶节点之间没有指针连接</strong></li>\n</ul>\n<p><strong><code>B+树</code><strong>（</strong>改进B树，非叶子节点不存储数据</strong>）</p>\n<blockquote>\n<p>B+树和B树最主要的区别在于<strong>非叶子节点是否存储数据</strong>的问题</p>\n</blockquote>\n<p>B+树只有<strong>叶子节点才会存储数据</strong>，<strong>非叶子节点只存储键值</strong>。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表</p>\n<p>特点：</p>\n<ul>\n<li><p>继承了B树的优点【多叉树的优点】</p>\n</li>\n<li><p>保证等值和范围查询的快速查找</p>\n</li>\n<li><p>MySQL的索引就采用了B+树的数据结构。</p>\n</li>\n</ul>\n<h2 id=\"存储引擎索引实现\"><a href=\"#存储引擎索引实现\" class=\"headerlink\" title=\"存储引擎索引实现\"></a>存储引擎索引实现</h2><h3 id=\"MyISAM索引\"><a href=\"#MyISAM索引\" class=\"headerlink\" title=\"MyISAM索引\"></a><strong><code>MyISAM索引</code></strong></h3><blockquote>\n<p>MyISAM数据文件和索引文件分开存储，索引B+Tree数据结构，其中叶子节点<strong>Key为索引列值</strong>，<strong>数据为所在行的磁盘地址</strong>，表索引存储在索引文件tablename.<code>MYI</code>中，数据文件存储在数据文tablename.<code>MYD</code>中</p>\n</blockquote>\n<h4 id=\"主键索引：\"><a href=\"#主键索引：\" class=\"headerlink\" title=\"主键索引：\"></a><strong>主键索引</strong>：</h4><p> MyISAM查询时会将索引节点缓存在MySQL缓存中，而数据的缓存依赖于操作OS Cache</p>\n<h4 id=\"辅助索引：\"><a href=\"#辅助索引：\" class=\"headerlink\" title=\"辅助索引：\"></a><strong>辅助索引</strong>：</h4><ul>\n<li>主键索引必须唯一，辅助索引可以重复</li>\n<li>由于辅助索引重复了，所以即便是等值查询，也需要按照范围查询的方式在辅助索引树上查询数据</li>\n</ul>\n<h3 id=\"InnoDB索引\"><a href=\"#InnoDB索引\" class=\"headerlink\" title=\"InnoDB索引\"></a><strong><code>InnoDB索引</code></strong></h3><p>每个InnoDB表都有一个<strong>聚簇索引</strong> ，也叫聚集索引。除了聚簇索引外的其他索引都叫辅助索引，聚簇索引是B+Tree数据结构，叶子节点存储数据行，非叶子节点存储主键值</p>\n<p>一般情况下主键索引就是<code>聚簇索引</code>，但也存在没有主键的情况，没有主键会采用<code>ROWID</code>构建聚簇索引</p>\n<p>InnoDB的表数据和索引默认存储在一个文件<code>tablename.ibd</code>中</p>\n<h4 id=\"主键索引：-1\"><a href=\"#主键索引：-1\" class=\"headerlink\" title=\"主键索引：\"></a><strong>主键索引</strong>：</h4><ul>\n<li>InnoDB要求表<strong>必须有主键索引</strong></li>\n<li>主键索引<strong>叶子节点存储数据行</strong>，<strong>辅助索引只会存储主键值</strong></li>\n<li>底层叶子节点按照顺序排序</li>\n</ul>\n<h4 id=\"辅助索引：-1\"><a href=\"#辅助索引：-1\" class=\"headerlink\" title=\"辅助索引：\"></a><strong>辅助索引：</strong></h4><ul>\n<li>InnoDB的辅助索引只会存储主键值而非磁盘地址（重点：MyISAM存储的就是磁盘地址）</li>\n<li>除聚簇索引之外的所有索引都称为辅助索引</li>\n<li>辅助索引查询记录必然经过主键索引：首先查辅助索引获取主键，根据主键在主键索引查询获得记录（回表操作）</li>\n<li>叶子节点按顺序排序</li>\n</ul>\n<h4 id=\"组合索引：\"><a href=\"#组合索引：\" class=\"headerlink\" title=\"组合索引：\"></a><strong>组合索引</strong>：</h4><p>​\t\t表t_multiple_index，id为主键列，创建了一个联合索引idx_abc(a,b,c)，构建的B+树索引结构如图所示。索引树中节点中的索引项按照（a，b，c）的顺序从大到小排列，先按照a列排序，a列相同时按照b列排序，b列相同按照c列排序。在最底层的叶子节点中，如果两个索引项的a，b，c三列都相同，索引项按照主键id排序</p>\n<p><strong>最左前缀匹配原则</strong></p>\n<p><strong>组合索引的最左前缀匹配原则：使用组合索引查询时，mysql会一直向右匹配直至遇到范围查询(<code>&gt;</code>、<code>&lt;</code>、<code>between</code>、<code>like</code>)就停止匹配</strong></p>\n<ul>\n<li>在组合索引树中，最底层的叶子节点按照第一列a列从左到右递增排列，但是b列和c列是无序的，b列只有在a列值相等的情况下小范围内递增有序，而c列只能在a，b两列相等的情况下小范围内递增有序</li>\n</ul>\n<p>能使用索引的情况</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">></span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">></span><span class=\"token number\">11</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">=</span><span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>没有用到索引的情况</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></div></figure>\n\n<p>总结：创建的**idx_abc(a,b,c)**索引，相当于创建了<code>(a)</code>、<code>（a,b）</code>、<code>（a,b,c）</code>三个索引</p>\n<p>注意事项：</p>\n<p>书写SQL条件的顺序，不一定是执行时候的where条件顺序。优化器会帮助我们优化成索引可以识别的形式</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token operator\">and</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#等价于下面的sql，优化器会按照索引的顺序优化</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"覆盖索引：\"><a href=\"#覆盖索引：\" class=\"headerlink\" title=\"覆盖索引：\"></a>覆盖索引：</h4><blockquote>\n<p>select中列数据如果可以直接在辅助索引树上全部获取，也就是说索引树已经“覆盖”了我们的查询需求，这时MySQL就不会白费力气的回表查询，这中现象就是<strong>覆盖索引</strong></p>\n</blockquote>\n<p>使用<code>explain</code>工具查看执行计划，可以看到extra中“<code>Using index</code>”，代表使用了覆盖索引</p>\n<h3 id=\"索引条件下推ICP\"><a href=\"#索引条件下推ICP\" class=\"headerlink\" title=\"索引条件下推ICP\"></a>索引条件下推ICP</h3><p>是MySQL5.6对使用索引从表中检索行的一种优化。ICP可以减少存储引擎必须访问基表的次数以及MySQL服务器必须访问存储引擎的次数。可用于 InnoDB 和 MyISAM 表，对于InnoDB表ICP仅用于辅助索引</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#optimizer_switch优化相关参数开关</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> VARIABLES <span class=\"token operator\">like</span> <span class=\"token string\">'optimizer_switch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#关闭ICP</span>\n<span class=\"token keyword\">SET</span> optimizer_switch <span class=\"token operator\">=</span> <span class=\"token string\">'index_condition_pushdown=off'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#开启ICP</span>\n<span class=\"token keyword\">SET</span> optimizer_switch <span class=\"token operator\">=</span> <span class=\"token string\">'index_condition_pushdown=on'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>不使用ICP，不满足最左前缀的索引条件的比较是在Server层进行的，非索引条件的比较是在Server层进行的</li>\n<li>使用ICP，所有的索引条件的比较是在存储引擎层进行的，非索引条件的比较是在Server层进行的</li>\n</ul>\n<p>减少回表次数及减少IO次数</p>\n<h4 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">></span><span class=\"token number\">15</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token string\">'5'</span> <span class=\"token operator\">and</span> d<span class=\"token operator\">=</span><span class=\"token string\">'pdf'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>abc组合索引</p>\n<p>这里b&gt;15阻断组合索引使用</p>\n<p><strong>没使用索引下推情况</strong></p>\n<p>从索引找出满足a&#x3D;13,b&gt;15的数据,然后再通过id 回表找出这部分数据，再到MySQL的server层进行数据过滤</p>\n<p><strong>使用索引下推情况</strong></p>\n<p>从索引找出满足a&#x3D;13,b&gt;15的数据，发现c其实也在组合索引中，这个时候会找出c&#x3D;’5’的数据主键Id，进行回表，再到MySQL的server层进行数据过滤</p>\n<h2 id=\"创建索引的原则\"><a href=\"#创建索引的原则\" class=\"headerlink\" title=\"创建索引的原则\"></a>创建索引的原则</h2><ul>\n<li><p>频繁出现在where 条件字段，order排序，group by分组字段</p>\n</li>\n<li><p>select 频繁查询的列，考虑是否需要创建联合索引（覆盖索引，不回表）</p>\n</li>\n<li><p>多表join关联查询，on字段两边的字段都要创建索引</p>\n</li>\n</ul>\n<h3 id=\"索引优化建议\"><a href=\"#索引优化建议\" class=\"headerlink\" title=\"索引优化建议\"></a><strong>索引优化建议</strong></h3><ol>\n<li><strong>表记录很少不需创建索引</strong></li>\n<li><strong>一个表的索引个数不能过多</strong></li>\n<li><strong>频繁更新的字段不建议作为索引</strong></li>\n<li><strong>区分度低的字段，不建议建索引</strong></li>\n<li><strong>在InnoDB存储引擎中，主键索引建议使用自增的长整型，避免使用很长的字段</strong></li>\n<li><strong>不建议用无序的值作为索引</strong></li>\n<li><strong>尽量创建组合索引，而不是单列索引</strong></li>\n</ol>\n","more":"<blockquote>\n<p>索引是数据库 <strong>高效获取数据</strong>的<strong>数据结构，</strong>加快查询速度，索引一般存储在表空间中，也就是磁盘里</p>\n</blockquote>\n<h2 id=\"优势与劣势\"><a href=\"#优势与劣势\" class=\"headerlink\" title=\"优势与劣势\"></a><strong>优势与劣势</strong></h2><p>优势：<strong>两降一升</strong>，降低磁盘IO频次、降低数据排序的成本，提高数据检索效率</p>\n<p>劣势：占用更多磁盘空间（<code>空间换时间</code>），降低更新效率</p>\n<h2 id=\"索引操作\"><a href=\"#索引操作\" class=\"headerlink\" title=\"索引操作\"></a>索引操作</h2><p><strong>删除索引</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">INDEX</span> index_name <span class=\"token keyword\">ON</span> <span class=\"token keyword\">table</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>查看索引</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">INDEX</span> <span class=\"token keyword\">FROM</span> table_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>常见可以创建 主键索引、唯一索引、普通索引、全文索引、前缀索引、组合索引</p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a><strong>索引的数据结构</strong></h2><h3 id=\"使用索引的基本需求\"><a href=\"#使用索引的基本需求\" class=\"headerlink\" title=\"使用索引的基本需求\"></a><strong>使用索引的基本需求</strong></h3><p>等值查询：根据某个值查找数据</p>\n<p>范围查询：根据某个范围区间查找数据</p>\n<p> 排序Order By</p>\n<p>分组Group By</p>\n<h3 id=\"可选的数据结构\"><a href=\"#可选的数据结构\" class=\"headerlink\" title=\"可选的数据结构\"></a><strong>可选的数据结构</strong></h3><p>Hash表，二叉树，平衡二叉查找树（红黑树是一个近似平衡二叉树），B树，B+树</p>\n<p><strong><code>Hash表</code></strong></p>\n<p>Hash表存储表数据Key可以存储索引列，Value可以存储行记录或者行磁盘地址。Hash表在等值查询时效率很高，时间复杂度为O(1)</p>\n<p> <strong><code>二叉查找树</code></strong></p>\n<p>每个节点最多有2个分叉，左子树和右子树数据顺序左小右大</p>\n<p>检索复杂度和<strong>树高</strong>相关：<strong>理想状态</strong>下效率可以达到O(logn)</p>\n<p><strong><code>红黑树</code></strong></p>\n<p>平衡二叉树是采用二分法思维，平衡二叉查找树除了具备二叉树的特点，最主要的特征是树的左右两个子树的层级<strong>最多相差</strong>1<strong>。在插入删除数据时通过</strong>左旋**&#x2F;**右旋操作保持二叉树的平衡，不会出现左子树很高、右子树很矮的情况</p>\n<p>缺点：</p>\n<p>数据量大时候，时间更长</p>\n<p>不支持范围查找</p>\n<p>数据量大的时候，索引磁盘占用较大</p>\n<p><strong><code>B树</code><strong>（</strong>改进二叉树，为多叉树</strong>）</p>\n<p>减少IO次数，减少树的高度。在<strong>每个节点尽可能多的存储</strong>数据<strong>。每个节点可以存储1000个索引（16k&#x2F;16&#x3D;1000），这样就将二叉树改造成了</strong>多叉树，通过增加树的叉树，将树从高瘦变为矮胖</p>\n<p>特点：</p>\n<ul>\n<li>B树的节点中存储着多个元素，每个节点内有多个分叉</li>\n<li>节点中的元素包含键值和数据，节点中的键值从大到小排列。也就是说，在所有的节点都储存数据</li>\n<li><strong>父节点当中的元素不会出现在子节点中</strong></li>\n<li><strong>所有的叶子结点都位于同一层，叶节点具有相同的深度，叶节点之间没有指针连接</strong></li>\n</ul>\n<p><strong><code>B+树</code><strong>（</strong>改进B树，非叶子节点不存储数据</strong>）</p>\n<blockquote>\n<p>B+树和B树最主要的区别在于<strong>非叶子节点是否存储数据</strong>的问题</p>\n</blockquote>\n<p>B+树只有<strong>叶子节点才会存储数据</strong>，<strong>非叶子节点只存储键值</strong>。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表</p>\n<p>特点：</p>\n<ul>\n<li><p>继承了B树的优点【多叉树的优点】</p>\n</li>\n<li><p>保证等值和范围查询的快速查找</p>\n</li>\n<li><p>MySQL的索引就采用了B+树的数据结构。</p>\n</li>\n</ul>\n<h2 id=\"存储引擎索引实现\"><a href=\"#存储引擎索引实现\" class=\"headerlink\" title=\"存储引擎索引实现\"></a>存储引擎索引实现</h2><h3 id=\"MyISAM索引\"><a href=\"#MyISAM索引\" class=\"headerlink\" title=\"MyISAM索引\"></a><strong><code>MyISAM索引</code></strong></h3><blockquote>\n<p>MyISAM数据文件和索引文件分开存储，索引B+Tree数据结构，其中叶子节点<strong>Key为索引列值</strong>，<strong>数据为所在行的磁盘地址</strong>，表索引存储在索引文件tablename.<code>MYI</code>中，数据文件存储在数据文tablename.<code>MYD</code>中</p>\n</blockquote>\n<h4 id=\"主键索引：\"><a href=\"#主键索引：\" class=\"headerlink\" title=\"主键索引：\"></a><strong>主键索引</strong>：</h4><p> MyISAM查询时会将索引节点缓存在MySQL缓存中，而数据的缓存依赖于操作OS Cache</p>\n<h4 id=\"辅助索引：\"><a href=\"#辅助索引：\" class=\"headerlink\" title=\"辅助索引：\"></a><strong>辅助索引</strong>：</h4><ul>\n<li>主键索引必须唯一，辅助索引可以重复</li>\n<li>由于辅助索引重复了，所以即便是等值查询，也需要按照范围查询的方式在辅助索引树上查询数据</li>\n</ul>\n<h3 id=\"InnoDB索引\"><a href=\"#InnoDB索引\" class=\"headerlink\" title=\"InnoDB索引\"></a><strong><code>InnoDB索引</code></strong></h3><p>每个InnoDB表都有一个<strong>聚簇索引</strong> ，也叫聚集索引。除了聚簇索引外的其他索引都叫辅助索引，聚簇索引是B+Tree数据结构，叶子节点存储数据行，非叶子节点存储主键值</p>\n<p>一般情况下主键索引就是<code>聚簇索引</code>，但也存在没有主键的情况，没有主键会采用<code>ROWID</code>构建聚簇索引</p>\n<p>InnoDB的表数据和索引默认存储在一个文件<code>tablename.ibd</code>中</p>\n<h4 id=\"主键索引：-1\"><a href=\"#主键索引：-1\" class=\"headerlink\" title=\"主键索引：\"></a><strong>主键索引</strong>：</h4><ul>\n<li>InnoDB要求表<strong>必须有主键索引</strong></li>\n<li>主键索引<strong>叶子节点存储数据行</strong>，<strong>辅助索引只会存储主键值</strong></li>\n<li>底层叶子节点按照顺序排序</li>\n</ul>\n<h4 id=\"辅助索引：-1\"><a href=\"#辅助索引：-1\" class=\"headerlink\" title=\"辅助索引：\"></a><strong>辅助索引：</strong></h4><ul>\n<li>InnoDB的辅助索引只会存储主键值而非磁盘地址（重点：MyISAM存储的就是磁盘地址）</li>\n<li>除聚簇索引之外的所有索引都称为辅助索引</li>\n<li>辅助索引查询记录必然经过主键索引：首先查辅助索引获取主键，根据主键在主键索引查询获得记录（回表操作）</li>\n<li>叶子节点按顺序排序</li>\n</ul>\n<h4 id=\"组合索引：\"><a href=\"#组合索引：\" class=\"headerlink\" title=\"组合索引：\"></a><strong>组合索引</strong>：</h4><p>​\t\t表t_multiple_index，id为主键列，创建了一个联合索引idx_abc(a,b,c)，构建的B+树索引结构如图所示。索引树中节点中的索引项按照（a，b，c）的顺序从大到小排列，先按照a列排序，a列相同时按照b列排序，b列相同按照c列排序。在最底层的叶子节点中，如果两个索引项的a，b，c三列都相同，索引项按照主键id排序</p>\n<p><strong>最左前缀匹配原则</strong></p>\n<p><strong>组合索引的最左前缀匹配原则：使用组合索引查询时，mysql会一直向右匹配直至遇到范围查询(<code>&gt;</code>、<code>&lt;</code>、<code>between</code>、<code>like</code>)就停止匹配</strong></p>\n<ul>\n<li>在组合索引树中，最底层的叶子节点按照第一列a列从左到右递增排列，但是b列和c列是无序的，b列只有在a列值相等的情况下小范围内递增有序，而c列只能在a，b两列相等的情况下小范围内递增有序</li>\n</ul>\n<p>能使用索引的情况</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">></span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">></span><span class=\"token number\">11</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">=</span><span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>没有用到索引的情况</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>总结：创建的**idx_abc(a,b,c)**索引，相当于创建了<code>(a)</code>、<code>（a,b）</code>、<code>（a,b,c）</code>三个索引</p>\n<p>注意事项：</p>\n<p>书写SQL条件的顺序，不一定是执行时候的where条件顺序。优化器会帮助我们优化成索引可以识别的形式</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token operator\">and</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#等价于下面的sql，优化器会按照索引的顺序优化</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">=</span><span class=\"token number\">16</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"覆盖索引：\"><a href=\"#覆盖索引：\" class=\"headerlink\" title=\"覆盖索引：\"></a>覆盖索引：</h4><blockquote>\n<p>select中列数据如果可以直接在辅助索引树上全部获取，也就是说索引树已经“覆盖”了我们的查询需求，这时MySQL就不会白费力气的回表查询，这中现象就是<strong>覆盖索引</strong></p>\n</blockquote>\n<p>使用<code>explain</code>工具查看执行计划，可以看到extra中“<code>Using index</code>”，代表使用了覆盖索引</p>\n<h3 id=\"索引条件下推ICP\"><a href=\"#索引条件下推ICP\" class=\"headerlink\" title=\"索引条件下推ICP\"></a>索引条件下推ICP</h3><p>是MySQL5.6对使用索引从表中检索行的一种优化。ICP可以减少存储引擎必须访问基表的次数以及MySQL服务器必须访问存储引擎的次数。可用于 InnoDB 和 MyISAM 表，对于InnoDB表ICP仅用于辅助索引</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#optimizer_switch优化相关参数开关</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> VARIABLES <span class=\"token operator\">like</span> <span class=\"token string\">'optimizer_switch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#关闭ICP</span>\n<span class=\"token keyword\">SET</span> optimizer_switch <span class=\"token operator\">=</span> <span class=\"token string\">'index_condition_pushdown=off'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#开启ICP</span>\n<span class=\"token keyword\">SET</span> optimizer_switch <span class=\"token operator\">=</span> <span class=\"token string\">'index_condition_pushdown=on'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>不使用ICP，不满足最左前缀的索引条件的比较是在Server层进行的，非索引条件的比较是在Server层进行的</li>\n<li>使用ICP，所有的索引条件的比较是在存储引擎层进行的，非索引条件的比较是在Server层进行的</li>\n</ul>\n<p>减少回表次数及减少IO次数</p>\n<h4 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_multiple_index <span class=\"token keyword\">where</span> a<span class=\"token operator\">=</span><span class=\"token number\">13</span> <span class=\"token operator\">and</span> b<span class=\"token operator\">></span><span class=\"token number\">15</span> <span class=\"token operator\">and</span> c<span class=\"token operator\">=</span><span class=\"token string\">'5'</span> <span class=\"token operator\">and</span> d<span class=\"token operator\">=</span><span class=\"token string\">'pdf'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>abc组合索引</p>\n<p>这里b&gt;15阻断组合索引使用</p>\n<p><strong>没使用索引下推情况</strong></p>\n<p>从索引找出满足a&#x3D;13,b&gt;15的数据,然后再通过id 回表找出这部分数据，再到MySQL的server层进行数据过滤</p>\n<p><strong>使用索引下推情况</strong></p>\n<p>从索引找出满足a&#x3D;13,b&gt;15的数据，发现c其实也在组合索引中，这个时候会找出c&#x3D;’5’的数据主键Id，进行回表，再到MySQL的server层进行数据过滤</p>\n<h2 id=\"创建索引的原则\"><a href=\"#创建索引的原则\" class=\"headerlink\" title=\"创建索引的原则\"></a>创建索引的原则</h2><ul>\n<li><p>频繁出现在where 条件字段，order排序，group by分组字段</p>\n</li>\n<li><p>select 频繁查询的列，考虑是否需要创建联合索引（覆盖索引，不回表）</p>\n</li>\n<li><p>多表join关联查询，on字段两边的字段都要创建索引</p>\n</li>\n</ul>\n<h3 id=\"索引优化建议\"><a href=\"#索引优化建议\" class=\"headerlink\" title=\"索引优化建议\"></a><strong>索引优化建议</strong></h3><ol>\n<li><strong>表记录很少不需创建索引</strong></li>\n<li><strong>一个表的索引个数不能过多</strong></li>\n<li><strong>频繁更新的字段不建议作为索引</strong></li>\n<li><strong>区分度低的字段，不建议建索引</strong></li>\n<li><strong>在InnoDB存储引擎中，主键索引建议使用自增的长整型，避免使用很长的字段</strong></li>\n<li><strong>不建议用无序的值作为索引</strong></li>\n<li><strong>尽量创建组合索引，而不是单列索引</strong></li>\n</ol>","categories":[],"tags":[]}