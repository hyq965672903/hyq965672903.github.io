{"title":"JUC(七)-ThreadLocal详解","slug":"JUC-七-ThreadLocal详解","date":"2022-06-28T06:46:38.000Z","updated":"2024-04-22T07:21:14.875Z","comments":true,"path":"api/articles/JUC-七-ThreadLocal详解.json","excerpt":"学习并掌握ThreadLocal的使用，使用场景，原理。以及相关的强、软、弱、虚引用，ThreadLocal内存泄露问题剖析以及解决办法","covers":["http://hyqup-blog-upyun.test.upcdn.net/img/SouthEast.jpeg"],"content":"<p>学习并掌握ThreadLocal的使用，使用场景，原理。以及相关的强、软、弱、虚引用，ThreadLocal内存泄露问题剖析以及解决办法</p>\n<span id=\"more\"></span>\n\n<h2 id=\"ThreadLocal简介\"><a href=\"#ThreadLocal简介\" class=\"headerlink\" title=\"ThreadLocal简介\"></a>ThreadLocal简介</h2><p>ThreadLocal又叫做线程局部变量，ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p>\n<p>　<strong>内存溢出（memory overflow）</strong>：是指不能申请到足够的内存进行使用，就会发生内存溢出，比如出现的OOM（Out Of Memory）</p>\n<p>　<strong>内存泄漏（memory lack）</strong>：内存泄露是指在程序中已经动态分配的堆内存由于某种原因未释放或者无法释放（已经没有用处了，但是没有释放），造成系统内存的浪费，这种现象叫“内存泄露”。</p>\n<p>　　当内存泄露到达一定规模后，造成系统能申请的内存较少，甚至无法申请内存，最终导致内存溢出，所以内存泄露是导致内存溢出的一个原因。</p>\n<h2 id=\"如何创建\"><a href=\"#如何创建\" class=\"headerlink\" title=\"如何创建\"></a>如何创建</h2><p>泛型可以是任意，这里以String 为例</p>\n<p>第一种(伪代码)：set方法,<code>当前线程赋值值，当前线程取值</code></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">private static final ThreadLocal&lt;String&gt; threadLocal &#x3D; new ThreadLocal&lt;String&gt;()&#123;&#125;;\n\n&#x2F;&#x2F; 在方法中调用set赋值\nthreadLocal.set(&quot;xxx&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>第二种（伪代码）：使用withInitial，<code>统一初始化所有线程的ThreadLocal的值</code></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h2 id=\"Thread、ThreadLocal和ThreadLocalMap三者之间的关系\"><a href=\"#Thread、ThreadLocal和ThreadLocalMap三者之间的关系\" class=\"headerlink\" title=\"Thread、ThreadLocal和ThreadLocalMap三者之间的关系\"></a>Thread、ThreadLocal和ThreadLocalMap三者之间的关系</h2><ul>\n<li>Thread</li>\n</ul>\n<p>​\t\t线程类，在这个类中存在一个<code>threadLocals</code>变量</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">ThreadLocal.ThreadLocalMap threadLocals &#x3D; null;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<ul>\n<li>ThreadLocal</li>\n</ul>\n<p>​\t\t此类提供了一个简单的<code>set</code>,<code>get</code>,<code>remove</code>方法，用于设置，获取或移除 绑定到线程本地变量中的值。里面存一个<strong>匿名静态内部类</strong>ThreadLocalMap</p>\n<ul>\n<li>ThreadLocalMap</li>\n</ul>\n<p>​\t\t这是在ThreadLocal中定义的一个类，可以简单的将它理解成一个Map，不过它的key是<code>WeakReference弱引用</code>类型，这样当这个值没有在别的地方引用时，在发生垃圾回收时，这个map的<code>key</code>会被自动回收，不过它的值不会被自动回收。</p>\n<h3 id=\"总结关系：\"><a href=\"#总结关系：\" class=\"headerlink\" title=\"总结关系：\"></a><strong>总结关系：</strong></h3><p>Thread存在ThreadLocalMap对象(<code>直接关系</code>)</p>\n<p>ThreadLocal里有ThreadLocalMap匿名内部类（<code>直接关系</code>）</p>\n<p>ThreadLocal进行方法操作的时候会从Thread里面的ThreadLocalMap拿取当前ThreadLocalMap,然后操作该Map(<code>间接关系</code>)</p>\n<h2 id=\"源码分析-get和set\"><a href=\"#源码分析-get和set\" class=\"headerlink\" title=\"源码分析 get和set\"></a>源码分析 get和set</h2><h3 id=\"get实现\"><a href=\"#get实现\" class=\"headerlink\" title=\"get实现\"></a>get实现</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">public T get() &#123;\n    &#x2F;&#x2F; 获取当前线程\n    Thread t &#x3D; Thread.currentThread();\n    &#x2F;&#x2F; 获取这个线程自身绑定的 ThreadLocalMap 对象\n    ThreadLocalMap map &#x3D; getMap(t);\n    if (map !&#x3D; null) &#123;\n        &#x2F;&#x2F; this是ThreadLocal对象，获取Map中的Entry对象\n        ThreadLocalMap.Entry e &#x3D; map.getEntry(this);\n        if (e !&#x3D; null) &#123;\n            @SuppressWarnings(&quot;unchecked&quot;)\n            &#x2F;&#x2F; 获取具体的值\n            T result &#x3D; (T)e.value;\n            return result;\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 设置初始值\n    return setInitialValue();\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"set实现\"><a href=\"#set实现\" class=\"headerlink\" title=\"set实现\"></a>set实现</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取当前线程</span>\n    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取绑定到这个线程自身的 ThreadLocalMap，这个ThreadLocalMap是从Thread类的`threadLocals`变量中获取的</span>\n    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 向map中设置值，key为 ThreadLocal 对象的实例。</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 如果map不存在，则创建出来。</span>\n        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<ol>\n<li>获取当前线程<code>Thread</code></li>\n<li>获取当前线程的 <code>ThreadLocalMap</code> 对象。</li>\n<li>向<code>ThreadLocalMap</code>中设置值，key为<code>ThreadLocal</code>对象，值为具体的值。</li>\n</ol>\n<h2 id=\"强引用、软引用、弱引用和虚引用是什么？\"><a href=\"#强引用、软引用、弱引用和虚引用是什么？\" class=\"headerlink\" title=\"强引用、软引用、弱引用和虚引用是什么？\"></a>强引用、软引用、弱引用和虚引用是什么？</h2><blockquote>\n<p>强度由高到低依次为：强引用 -&gt; 软引用 -&gt; 弱引用 -&gt; 虚引用</p>\n</blockquote>\n<ul>\n<li><p>强引用(StrongReference)</p>\n<p><strong>强引用</strong>是使用最普遍的引用。如果一个对象具有强引用，那<strong>垃圾回收器</strong>绝不会回收它</p>\n<p>如:Object strongReference &#x3D; new Object();</p>\n</li>\n</ul>\n<p>​\t\t当<strong>内存空间不足</strong>时，<code>Java</code>虚拟机宁愿抛出<code>OutOfMemoryError</code>错误，使程序<strong>异常终止</strong>，也不会靠随意<strong>回收</strong>具有<strong>强引用</strong>的<strong>对象</strong>来解决内存不足的问题。显式地设置<code>strongReference</code>对象为<code>null</code>，或让其<strong>超出</strong>对象的<strong>生命周期</strong>范围，则<code>gc</code>认为该对象<strong>不存在引用</strong>，这时就可以回收这个对象。具体什么时候收集这要取决于<code>GC</code>算法</p>\n<ul>\n<li>软引用(SoftReference)</li>\n</ul>\n<p>​\t\t如果一个对象只具有<strong>软引用</strong>，则<strong>内存空间充足</strong>时，<strong>垃圾回收器</strong>就<strong>不会</strong>回收它；如果<strong>内存空间不足</strong>了，就会<strong>回收</strong>这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p>\n<ul>\n<li><p>弱引用(WeakReference)</p>\n<p>在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有<strong>弱引用</strong>的对象，不管当前<strong>内存空间足够与否</strong>，都会<strong>回收</strong>它的内存。</p>\n</li>\n<li><p>虚引用(PhantomReference)</p>\n<p><strong>虚引用</strong>顾名思义，就是<strong>形同虚设</strong>。与其他几种引用都不同，<strong>虚引用</strong>并<strong>不会</strong>决定对象的<strong>生命周期</strong>。如果一个对象<strong>仅持有虚引用</strong>，那么它就和<strong>没有任何引用</strong>一样，在任何时候都可能被垃圾回收器回收。</p>\n</li>\n</ul>\n<p>ThreadLocal内部类 ThreadLocalMap采用<strong>弱引用</strong></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** The value associated with this ThreadLocal. */</span>\n    <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h2 id=\"ThreadLocal为什么会内存泄露？\"><a href=\"#ThreadLocal为什么会内存泄露？\" class=\"headerlink\" title=\"ThreadLocal为什么会内存泄露？\"></a>ThreadLocal为什么会内存泄露？</h2><p>在ThreadLocal的生命周期中，都存在这些引用。看下图: 实线代表强引用，虚线代表弱引用</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/SouthEast.jpeg\" alt=\"这里写图片描述\"></p>\n<center>（图片来自网络）</center>\n\n<p>每个Thread 维护一个 ThreadLocalMap 映射表，这个映射表Entry的 key 是 ThreadLocal实例本身，value 是真正需要存储的 Object</p>\n<p>ThreadLocalMap 是使用 ThreadLocal 的<code>弱引用</code>作为 Key 的，如果一个ThreadLocal没有外部强引用来引用它,弱引用的对象<code>ThreadLocal</code>在 GC 时会被<strong>回收</strong>,这时，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，这个时候如果当前线程再迟迟不结束（比如我们使用<strong>线程池复用线程</strong>），所以存在着内存泄露，因为这里只有线程结束后，存在线程栈中的Current Thread、Map value才会全部被GC回收</p>\n<p>ThreadLocalMap的设计中已经考虑到这种情况,在ThreadLocal的get(),set(),remove()的时候都会清除线程ThreadLocalMap里所有key为null的value</p>\n<p>ThreadLocalMap设计上已经考虑比较多，但是都是<strong>被动措施</strong></p>\n<blockquote>\n<p>分配使用了ThreadLocal又不再调用get(),set(),remove()方法，那么就会导致内存泄漏，因为这块内存一直存在。</p>\n</blockquote>\n<h2 id=\"为什么使用弱引用，OOM是否是弱引用的锅？\"><a href=\"#为什么使用弱引用，OOM是否是弱引用的锅？\" class=\"headerlink\" title=\"为什么使用弱引用，OOM是否是弱引用的锅？\"></a>为什么使用弱引用，OOM是否是弱引用的锅？</h2><p>分两种情况</p>\n<ul>\n<li><p>key 使用强引用：引用的ThreadLocal的对象被回收了，但是ThreadLocalMap还持有ThreadLocal的强引用，如果没有手动删除，ThreadLocal不会被回收，导致Entry内存泄漏。</p>\n</li>\n<li><p>key 使用弱引用：引用的ThreadLocal的对象被回收了，由于ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal也会被回收。value在下一次ThreadLocalMap调用set、get、remove的时候会被清除。</p>\n</li>\n</ul>\n<p>综上所述，Entryd的key无论使用弱引用还是强引用。本质上value还是强引用，所以还是会造成内存泄露，从而引发内存溢出</p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><p>每次使用完ThreadLocal，都调用它的<code>remove()</code>方法，清除数据。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>ThreadLocal 适用于每个线程需要自己独立的实例且该实例需要在多个方法中被使用，也即变量在线程间隔离而在方法或类间共享的场景</p>\n","more":"<h2 id=\"ThreadLocal简介\"><a href=\"#ThreadLocal简介\" class=\"headerlink\" title=\"ThreadLocal简介\"></a>ThreadLocal简介</h2><p>ThreadLocal又叫做线程局部变量，ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p>\n<p>　<strong>内存溢出（memory overflow）</strong>：是指不能申请到足够的内存进行使用，就会发生内存溢出，比如出现的OOM（Out Of Memory）</p>\n<p>　<strong>内存泄漏（memory lack）</strong>：内存泄露是指在程序中已经动态分配的堆内存由于某种原因未释放或者无法释放（已经没有用处了，但是没有释放），造成系统内存的浪费，这种现象叫“内存泄露”。</p>\n<p>　　当内存泄露到达一定规模后，造成系统能申请的内存较少，甚至无法申请内存，最终导致内存溢出，所以内存泄露是导致内存溢出的一个原因。</p>\n<h2 id=\"如何创建\"><a href=\"#如何创建\" class=\"headerlink\" title=\"如何创建\"></a>如何创建</h2><p>泛型可以是任意，这里以String 为例</p>\n<p>第一种(伪代码)：set方法,<code>当前线程赋值值，当前线程取值</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">private static final ThreadLocal&lt;String&gt; threadLocal &#x3D; new ThreadLocal&lt;String&gt;()&#123;&#125;;\n\n&#x2F;&#x2F; 在方法中调用set赋值\nthreadLocal.set(&quot;xxx&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第二种（伪代码）：使用withInitial，<code>统一初始化所有线程的ThreadLocal的值</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">.</span><span class=\"token function\">withInitial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Thread、ThreadLocal和ThreadLocalMap三者之间的关系\"><a href=\"#Thread、ThreadLocal和ThreadLocalMap三者之间的关系\" class=\"headerlink\" title=\"Thread、ThreadLocal和ThreadLocalMap三者之间的关系\"></a>Thread、ThreadLocal和ThreadLocalMap三者之间的关系</h2><ul>\n<li>Thread</li>\n</ul>\n<p>​\t\t线程类，在这个类中存在一个<code>threadLocals</code>变量</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ThreadLocal.ThreadLocalMap threadLocals &#x3D; null;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>ThreadLocal</li>\n</ul>\n<p>​\t\t此类提供了一个简单的<code>set</code>,<code>get</code>,<code>remove</code>方法，用于设置，获取或移除 绑定到线程本地变量中的值。里面存一个<strong>匿名静态内部类</strong>ThreadLocalMap</p>\n<ul>\n<li>ThreadLocalMap</li>\n</ul>\n<p>​\t\t这是在ThreadLocal中定义的一个类，可以简单的将它理解成一个Map，不过它的key是<code>WeakReference弱引用</code>类型，这样当这个值没有在别的地方引用时，在发生垃圾回收时，这个map的<code>key</code>会被自动回收，不过它的值不会被自动回收。</p>\n<h3 id=\"总结关系：\"><a href=\"#总结关系：\" class=\"headerlink\" title=\"总结关系：\"></a><strong>总结关系：</strong></h3><p>Thread存在ThreadLocalMap对象(<code>直接关系</code>)</p>\n<p>ThreadLocal里有ThreadLocalMap匿名内部类（<code>直接关系</code>）</p>\n<p>ThreadLocal进行方法操作的时候会从Thread里面的ThreadLocalMap拿取当前ThreadLocalMap,然后操作该Map(<code>间接关系</code>)</p>\n<h2 id=\"源码分析-get和set\"><a href=\"#源码分析-get和set\" class=\"headerlink\" title=\"源码分析 get和set\"></a>源码分析 get和set</h2><h3 id=\"get实现\"><a href=\"#get实现\" class=\"headerlink\" title=\"get实现\"></a>get实现</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">public T get() &#123;\n    &#x2F;&#x2F; 获取当前线程\n    Thread t &#x3D; Thread.currentThread();\n    &#x2F;&#x2F; 获取这个线程自身绑定的 ThreadLocalMap 对象\n    ThreadLocalMap map &#x3D; getMap(t);\n    if (map !&#x3D; null) &#123;\n        &#x2F;&#x2F; this是ThreadLocal对象，获取Map中的Entry对象\n        ThreadLocalMap.Entry e &#x3D; map.getEntry(this);\n        if (e !&#x3D; null) &#123;\n            @SuppressWarnings(&quot;unchecked&quot;)\n            &#x2F;&#x2F; 获取具体的值\n            T result &#x3D; (T)e.value;\n            return result;\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 设置初始值\n    return setInitialValue();\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"set实现\"><a href=\"#set实现\" class=\"headerlink\" title=\"set实现\"></a>set实现</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取当前线程</span>\n    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 获取绑定到这个线程自身的 ThreadLocalMap，这个ThreadLocalMap是从Thread类的`threadLocals`变量中获取的</span>\n    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 向map中设置值，key为 ThreadLocal 对象的实例。</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 如果map不存在，则创建出来。</span>\n        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>获取当前线程<code>Thread</code></li>\n<li>获取当前线程的 <code>ThreadLocalMap</code> 对象。</li>\n<li>向<code>ThreadLocalMap</code>中设置值，key为<code>ThreadLocal</code>对象，值为具体的值。</li>\n</ol>\n<h2 id=\"强引用、软引用、弱引用和虚引用是什么？\"><a href=\"#强引用、软引用、弱引用和虚引用是什么？\" class=\"headerlink\" title=\"强引用、软引用、弱引用和虚引用是什么？\"></a>强引用、软引用、弱引用和虚引用是什么？</h2><blockquote>\n<p>强度由高到低依次为：强引用 -&gt; 软引用 -&gt; 弱引用 -&gt; 虚引用</p>\n</blockquote>\n<ul>\n<li><p>强引用(StrongReference)</p>\n<p><strong>强引用</strong>是使用最普遍的引用。如果一个对象具有强引用，那<strong>垃圾回收器</strong>绝不会回收它</p>\n<p>如:Object strongReference &#x3D; new Object();</p>\n</li>\n</ul>\n<p>​\t\t当<strong>内存空间不足</strong>时，<code>Java</code>虚拟机宁愿抛出<code>OutOfMemoryError</code>错误，使程序<strong>异常终止</strong>，也不会靠随意<strong>回收</strong>具有<strong>强引用</strong>的<strong>对象</strong>来解决内存不足的问题。显式地设置<code>strongReference</code>对象为<code>null</code>，或让其<strong>超出</strong>对象的<strong>生命周期</strong>范围，则<code>gc</code>认为该对象<strong>不存在引用</strong>，这时就可以回收这个对象。具体什么时候收集这要取决于<code>GC</code>算法</p>\n<ul>\n<li>软引用(SoftReference)</li>\n</ul>\n<p>​\t\t如果一个对象只具有<strong>软引用</strong>，则<strong>内存空间充足</strong>时，<strong>垃圾回收器</strong>就<strong>不会</strong>回收它；如果<strong>内存空间不足</strong>了，就会<strong>回收</strong>这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p>\n<ul>\n<li><p>弱引用(WeakReference)</p>\n<p>在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有<strong>弱引用</strong>的对象，不管当前<strong>内存空间足够与否</strong>，都会<strong>回收</strong>它的内存。</p>\n</li>\n<li><p>虚引用(PhantomReference)</p>\n<p><strong>虚引用</strong>顾名思义，就是<strong>形同虚设</strong>。与其他几种引用都不同，<strong>虚引用</strong>并<strong>不会</strong>决定对象的<strong>生命周期</strong>。如果一个对象<strong>仅持有虚引用</strong>，那么它就和<strong>没有任何引用</strong>一样，在任何时候都可能被垃圾回收器回收。</p>\n</li>\n</ul>\n<p>ThreadLocal内部类 ThreadLocalMap采用<strong>弱引用</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** The value associated with this ThreadLocal. */</span>\n    <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ThreadLocal为什么会内存泄露？\"><a href=\"#ThreadLocal为什么会内存泄露？\" class=\"headerlink\" title=\"ThreadLocal为什么会内存泄露？\"></a>ThreadLocal为什么会内存泄露？</h2><p>在ThreadLocal的生命周期中，都存在这些引用。看下图: 实线代表强引用，虚线代表弱引用</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/SouthEast.jpeg\" alt=\"这里写图片描述\"></p>\n<center>（图片来自网络）</center>\n\n<p>每个Thread 维护一个 ThreadLocalMap 映射表，这个映射表Entry的 key 是 ThreadLocal实例本身，value 是真正需要存储的 Object</p>\n<p>ThreadLocalMap 是使用 ThreadLocal 的<code>弱引用</code>作为 Key 的，如果一个ThreadLocal没有外部强引用来引用它,弱引用的对象<code>ThreadLocal</code>在 GC 时会被<strong>回收</strong>,这时，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，这个时候如果当前线程再迟迟不结束（比如我们使用<strong>线程池复用线程</strong>），所以存在着内存泄露，因为这里只有线程结束后，存在线程栈中的Current Thread、Map value才会全部被GC回收</p>\n<p>ThreadLocalMap的设计中已经考虑到这种情况,在ThreadLocal的get(),set(),remove()的时候都会清除线程ThreadLocalMap里所有key为null的value</p>\n<p>ThreadLocalMap设计上已经考虑比较多，但是都是<strong>被动措施</strong></p>\n<blockquote>\n<p>分配使用了ThreadLocal又不再调用get(),set(),remove()方法，那么就会导致内存泄漏，因为这块内存一直存在。</p>\n</blockquote>\n<h2 id=\"为什么使用弱引用，OOM是否是弱引用的锅？\"><a href=\"#为什么使用弱引用，OOM是否是弱引用的锅？\" class=\"headerlink\" title=\"为什么使用弱引用，OOM是否是弱引用的锅？\"></a>为什么使用弱引用，OOM是否是弱引用的锅？</h2><p>分两种情况</p>\n<ul>\n<li><p>key 使用强引用：引用的ThreadLocal的对象被回收了，但是ThreadLocalMap还持有ThreadLocal的强引用，如果没有手动删除，ThreadLocal不会被回收，导致Entry内存泄漏。</p>\n</li>\n<li><p>key 使用弱引用：引用的ThreadLocal的对象被回收了，由于ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal也会被回收。value在下一次ThreadLocalMap调用set、get、remove的时候会被清除。</p>\n</li>\n</ul>\n<p>综上所述，Entryd的key无论使用弱引用还是强引用。本质上value还是强引用，所以还是会造成内存泄露，从而引发内存溢出</p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><p>每次使用完ThreadLocal，都调用它的<code>remove()</code>方法，清除数据。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>ThreadLocal 适用于每个线程需要自己独立的实例且该实例需要在多个方法中被使用，也即变量在线程间隔离而在方法或类间共享的场景</p>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"JUC","path":"api/categories/JUC.json"}],"tags":[]}