{"title":"剑指源码-springmvc-(一)-序章","slug":"剑指源码-springmvc-一-序章","date":"2022-05-15T09:55:00.000Z","updated":"2024-04-22T07:21:14.911Z","comments":true,"path":"api/articles/剑指源码-springmvc-一-序章.json","excerpt":"搭建springmvc源码环境。准备工作与前置工作分析","covers":["/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220514094502540-16526085257311.png","/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220514235410561-16526085257323.png","/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220515145511744-16526085257325.png"],"content":"<p>搭建springmvc源码环境。准备工作与前置工作分析</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>前置基础：了解SPI,Service Provider Interface,服务提供者接口 jdk提供给“服务提供厂商”或者“插件开发者”使用的接口,不需要修改原来作为接口的jar的情况下，将原来实现的那个jar替换为另外一种实现的jar即可。</p>\n</blockquote>\n<p>使用规范：</p>\n<p>定义服务的通用接口，针对通用的服务接口，提供具体的实现类。</p>\n<p>在jar包的META-INF&#x2F;services&#x2F;目录中，新建一个文件，文件名为 接口的”全限定名”。 文件内容为该接口的具体实现类的”全限定名”。</p>\n<p>将spi所在jar放在主程序的classpath中</p>\n<p>服务调用方用java.util.ServiceLoader，用服务接口为参数，去动态加载具体的实现类到JVM中。</p>\n<h2 id=\"模块搭建\"><a href=\"#模块搭建\" class=\"headerlink\" title=\"模块搭建\"></a>模块搭建</h2><h3 id=\"1、新增springmvcsource-test\"><a href=\"#1、新增springmvcsource-test\" class=\"headerlink\" title=\"1、新增springmvcsource-test\"></a>1、新增springmvcsource-test</h3><p><img src=\"/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220514094502540-16526085257311.png\" alt=\"image-20220514094502540\"></p>\n<h3 id=\"2、引入相关依赖\"><a href=\"#2、引入相关依赖\" class=\"headerlink\" title=\"2、引入相关依赖\"></a>2、引入相关依赖</h3><p>springmvcsource-test 的build.gradle  dependencies下加入依赖</p>\n<h4 id=\"2-1-源码webmvc\"><a href=\"#2-1-源码webmvc\" class=\"headerlink\" title=\"2.1 源码webmvc\"></a>2.1 源码webmvc</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">implementation <span class=\"token punctuation\">(</span><span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\":spring-webmvc\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h4 id=\"2-2-servlet依赖\"><a href=\"#2-2-servlet依赖\" class=\"headerlink\" title=\"2.2  servlet依赖\"></a>2.2  servlet依赖</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">implementation  group<span class=\"token punctuation\">:</span> <span class=\"token string\">'javax.servlet'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'javax.servlet-api'</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">'4.0.1'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<p>ps:这里是<strong>implementation</strong>，这样lib才会打入war,从而Tomcat启动springmvc相关才会生效（非常重要），这里卡了我大半天。</p>\n<p>不然访问时候总是404 找不到路径</p>\n<h3 id=\"2-3-gradle-补充知识点\"><a href=\"#2-3-gradle-补充知识点\" class=\"headerlink\" title=\"2.3 gradle  补充知识点\"></a>2.3 gradle  补充知识点</h3><p>目前Gradle版本支持的依赖配置有：implementation、api、compileOnly、runtimeOnly和annotationProcessor，已经废弃的配置有：compile、provided、apk、providedCompile。此外依赖配置还可以加一些配置项，例如AndroidTestImplementation、debugApi等等。</p>\n<p>常用的是implementation、api、compileOnly三个依赖配置，含义如下：</p>\n<ul>\n<li>implementation<br>与compile对应，会添加依赖到编译路径，并且会将依赖打包到输出（aar或apk），但是在编译时不会将依赖的实现暴露给其他module，也就是只有在运行时其他module才能访问这个依赖中的实现。使用这个配置，可以显著提升构建时间，因为它可以减少重新编译的module的数量。建议，尽量使用这个依赖配置。</li>\n<li>api<br>与compile对应，功能完全一样，会添加依赖到编译路径，并且会将依赖打包到输出（aar或apk），与implementation不同，这个依赖可以传递，其他module无论在编译时和运行时都可以访问这个依赖的实现，也就是会泄漏一些不应该不使用的实现。举个例子，A依赖B，B依赖C，如果都是使用api配置的话，A可以直接使用C中的类（编译时和运行时），而如果是使用implementation配置的话，在编译时，A是无法访问C中的类的。</li>\n<li>compileOnly<br>与provided对应，Gradle把依赖加到编译路径，编译时使用，不会打包到输出（aar或apk）。这可以减少输出的体积，在只在编译时需要，在运行时可选的情况，很有用。</li>\n<li>runtimeOnly<br>与apk对应，gradle添加依赖只打包到APK，运行时使用，但不会添加到编译路径。这个没有使用过。</li>\n<li>annotationProcessor<br>与compile对应，用于注解处理器的依赖配置。</li>\n</ul>\n<h3 id=\"3、编码\"><a href=\"#3、编码\" class=\"headerlink\" title=\"3、编码\"></a>3、编码</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>web</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AppConfig</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebApplicationInitializer</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnnotationConfigWebApplicationContext</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DispatcherServlet</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletContext</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletRegistration</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/14\n * @description:\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppStarter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebApplicationInitializer</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStartup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContext</span> servletContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 创建一个webIOC容器，并注册主配置类吗  注解版的配置类注册进去</span>\n\t\t<span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 创建并注册 DispatcherServlet</span>\n\t\t<span class=\"token class-name\">DispatcherServlet</span> servlet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatcherServlet</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ServletRegistration<span class=\"token punctuation\">.</span>Dynamic</span> registration <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">addServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">,</span> servlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tregistration<span class=\"token punctuation\">.</span><span class=\"token function\">setLoadOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tregistration<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>WebApplicationInitializer需要<strong>servlet3.0以上</strong>，<strong>Tomcat6.0以上</strong>（6.0以上支持servlet3.0）</p>\n<p>上面的配置相当于web.xml配置了，上述代码采用api形式植入</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.context.ContextLoaderListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>/WEB-INF/app-context.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-param</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>app<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>app<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/app/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComponentScan</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/14\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.hyqup.web\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>说明：配置了AppStarter，相当于Tomcat一启动就加载</p>\n<ol>\n<li>创建了容器，spring基本功能完成</li>\n<li>注册了一个根servlet:DispatcherServlet，后面所有的请求都由 DispatcherServlet 处理</li>\n</ol>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/14\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/say\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello SpringMVC\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"4、部署访问\"><a href=\"#4、部署访问\" class=\"headerlink\" title=\"4、部署访问\"></a>4、部署访问</h3><p><a href=\"http://localhost:8080/webmvc/say\">http://localhost:8080/webmvc/say</a></p>\n<h2 id=\"原理剖析\"><a href=\"#原理剖析\" class=\"headerlink\" title=\"原理剖析\"></a>原理剖析</h2><blockquote>\n<p>SpringMVC基于SPI启动了web容器，servlet定义ServletContainerInitializer。</p>\n</blockquote>\n<h3 id=\"主流程分析启动web容器\"><a href=\"#主流程分析启动web容器\" class=\"headerlink\" title=\"主流程分析启动web容器\"></a>主流程分析启动web容器</h3><p>servlet定义ServletContainerInitializer，</p>\n<p><img src=\"/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220514235410561-16526085257323.png\" alt=\"image-20220514235410561\"></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@HandlesTypes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationInitializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringServletContainerInitializer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ServletContainerInitializer</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStartup</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> webAppInitializerClasses<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletContext</span> servletContext<span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WebApplicationInitializer</span><span class=\"token punctuation\">></span></span> initializers <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>webAppInitializerClasses <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         initializers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>webAppInitializerClasses<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> waiClass <span class=\"token operator\">:</span> webAppInitializerClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Be defensive: Some servlet containers provide us with invalid classes,</span>\n            <span class=\"token comment\">// no matter what @HandlesTypes says...</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>waiClass<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAbstract</span><span class=\"token punctuation\">(</span>waiClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                  <span class=\"token class-name\">WebApplicationInitializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>waiClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                  initializers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationInitializer</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">accessibleConstructor</span><span class=\"token punctuation\">(</span>waiClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to instantiate WebApplicationInitializer class\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initializers<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No Spring WebApplicationInitializer types detected on classpath\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>initializers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Spring WebApplicationInitializers detected on classpath\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">AnnotationAwareOrderComparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>initializers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationInitializer</span> initializer <span class=\"token operator\">:</span> initializers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         initializer<span class=\"token punctuation\">.</span><span class=\"token function\">onStartup</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>HandlesTypes 感兴趣的类WebApplicationInitializer，会去找到所有实现了WebApplicationInitializer的类，我们这里AppStarter就是实现了WebApplicationInitializer，启动时候执行WebApplicationInitializer.onStartup</p>\n<p>接下来逻辑：</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建一个webIOC容器，并注册主配置类吗  注解版的配置类注册进去</span>\n<span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建并注册 DispatcherServlet</span>\n<span class=\"token class-name\">DispatcherServlet</span> servlet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatcherServlet</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ServletRegistration<span class=\"token punctuation\">.</span>Dynamic</span> registration <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">addServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">,</span> servlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nregistration<span class=\"token punctuation\">.</span><span class=\"token function\">setLoadOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nregistration<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>准备一个空的webioc容器，准备一个DispatcherServlet，并将ioc容器传过去，并注册到ServletContext（Tomcat）中去。DispatcherServlet本质上也是一个servlet,所以servlet在执行init的时候就会将该ioc容器执行spring相关的refresh()逻辑将容器刷新。具体初始化逻辑会在HttpServletBean init重写，init有个抽象方法initServletBean，FrameworkServlet来实现initServletBean</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initServletBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initializing Spring \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" '\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getServletName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initializing Servlet '\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getServletName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//初始化web容器</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webApplicationContext <span class=\"token operator\">=</span> <span class=\"token function\">initWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">initFrameworkServlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">RuntimeException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Context initialization failed\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enableLoggingRequestDetails <span class=\"token operator\">?</span>\n            <span class=\"token string\">\"shown which may lead to unsafe logging of potentially sensitive data\"</span> <span class=\"token operator\">:</span>\n            <span class=\"token string\">\"masked to prevent unsafe logging of potentially sensitive data\"</span><span class=\"token punctuation\">;</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enableLoggingRequestDetails='\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enableLoggingRequestDetails <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"': request parameters and headers will be \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Completed initialization in \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" ms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>初始化代码</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">initWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">WebApplicationContext</span> rootContext <span class=\"token operator\">=</span>\n         <span class=\"token class-name\">WebApplicationContextUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">WebApplicationContext</span> wac <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webApplicationContext <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// A context instance was injected at construction time -> use it</span>\n      wac <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webApplicationContext<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wac <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ConfigurableWebApplicationContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">ConfigurableWebApplicationContext</span> cwac <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableWebApplicationContext</span><span class=\"token punctuation\">)</span> wac<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cwac<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// The context has not yet been refreshed -> provide services such as</span>\n            <span class=\"token comment\">// setting the parent context, setting the application context id, etc</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cwac<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token comment\">// The context instance was injected without an explicit parent -> set</span>\n               <span class=\"token comment\">// the root application context (if any; may be null) as the parent</span>\n               cwac<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>rootContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">configureAndRefreshWebApplicationContext</span><span class=\"token punctuation\">(</span>cwac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wac <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// No context instance was injected at construction time -> see if one</span>\n      <span class=\"token comment\">// has been registered in the servlet context. If one exists, it is assumed</span>\n      <span class=\"token comment\">// that the parent context (if any) has already been set and that the</span>\n      <span class=\"token comment\">// user has performed any initialization such as setting the context id</span>\n      wac <span class=\"token operator\">=</span> <span class=\"token function\">findWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wac <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// No context instance is defined for this servlet -> create a local one</span>\n      wac <span class=\"token operator\">=</span> <span class=\"token function\">createWebApplicationContext</span><span class=\"token punctuation\">(</span>rootContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refreshEventReceived<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Either the context is not a ConfigurableApplicationContext with refresh</span>\n      <span class=\"token comment\">// support or the context injected at construction time had already been</span>\n      <span class=\"token comment\">// refreshed -> trigger initial onRefresh manually here.</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRefreshMonitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span>wac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publishContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Publish the context as a servlet context attribute.</span>\n      <span class=\"token class-name\">String</span> attrName <span class=\"token operator\">=</span> <span class=\"token function\">getServletContextAttributeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attrName<span class=\"token punctuation\">,</span> wac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">return</span> wac<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"父子容器的概念引入\"><a href=\"#父子容器的概念引入\" class=\"headerlink\" title=\"父子容器的概念引入\"></a>父子容器的概念引入</h4><p>以前xml配置springMVC的时候步骤，需要在web.xml中配置</p>\n<p>1、在web.xml配置ContextLoadListener,指定Spring配置文件位置</p>\n<p>2、在web.xml配置DispatcherServlet,指定SpringMVC配置文件的位置</p>\n<p>3、以上操作就会产生父子容器</p>\n<p>父容器：Root Spring配置文件进行包扫描并保存的组件的容器</p>\n<p>子容器：SpringMVC配置文件进行包扫描并保存的所有组件的容器</p>\n<p>cwac.setParent(rootContext);好处是容器之间的隔离，类似于Java中类加载的双亲委派模型</p>\n<h3 id=\"基于两个事件回调启动了Spring和SpringMVC\"><a href=\"#基于两个事件回调启动了Spring和SpringMVC\" class=\"headerlink\" title=\"基于两个事件回调启动了Spring和SpringMVC\"></a>基于两个事件回调启动了Spring和SpringMVC</h3><h4 id=\"第一个父容器相关\"><a href=\"#第一个父容器相关\" class=\"headerlink\" title=\"第一个父容器相关\"></a>第一个父容器相关</h4><p>AbstractAnnotationConfigDispatcherServletInitializer</p>\n<p><img src=\"/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220515145511744-16526085257325.png\" alt=\"image-20220515145511744\"></p>\n<p>AbstractContextLoaderInitializer 注册ContextLoaderListener，web应用启动以后（Tomcat加载应用以后）会执行ContextLoaderListener里面contextInitialized的逻辑，监听器机制，servlet的标准</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStartup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContext</span> servletContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">registerContextLoaderListener</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-none\"><code class=\"language-none\">protected void registerContextLoaderListener(ServletContext servletContext) &#123;\n   WebApplicationContext rootAppContext &#x3D; createRootApplicationContext();\n   if (rootAppContext !&#x3D; null) &#123;\n      ContextLoaderListener listener &#x3D; new ContextLoaderListener(rootAppContext);\n      listener.setContextInitializers(getRootApplicationContextInitializers());\n      servletContext.addListener(listener);\n   &#125;\n   else &#123;\n      logger.debug(&quot;No ContextLoaderListener registered, as &quot; +\n            &quot;createRootApplicationContext() did not return an application context&quot;);\n   &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>createRootApplicationContext由<strong>孙子类</strong>AbstractAnnotationConfigDispatcherServletInitializer 实现</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createRootApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> configClasses <span class=\"token operator\">=</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>而 getRootConfigClasses 就是获取自子类的配置文件，也就是我们所说父子容器中父容器Spring组件相关的配置类</p>\n<h4 id=\"第二个子容器相关\"><a href=\"#第二个子容器相关\" class=\"headerlink\" title=\"第二个子容器相关\"></a>第二个子容器相关</h4><p>第二个我们发现 AbstractAnnotationConfigDispatcherServletInitializer  有一个getRootConfigClasses 同时也有一个getRootConfigClasses，获取和servlet相关的。追溯发现</p>\n<p>AbstractDispatcherServletInitializer</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerDispatcherServlet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContext</span> servletContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">String</span> servletName <span class=\"token operator\">=</span> <span class=\"token function\">getServletName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasLength</span><span class=\"token punctuation\">(</span>servletName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"getServletName() must not return null or empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">WebApplicationContext</span> servletAppContext <span class=\"token operator\">=</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>servletAppContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"createServletApplicationContext() must not return null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">FrameworkServlet</span> dispatcherServlet <span class=\"token operator\">=</span> <span class=\"token function\">createDispatcherServlet</span><span class=\"token punctuation\">(</span>servletAppContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>dispatcherServlet<span class=\"token punctuation\">,</span> <span class=\"token string\">\"createDispatcherServlet(WebApplicationContext) must not return null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   dispatcherServlet<span class=\"token punctuation\">.</span><span class=\"token function\">setContextInitializers</span><span class=\"token punctuation\">(</span><span class=\"token function\">getServletApplicationContextInitializers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">ServletRegistration<span class=\"token punctuation\">.</span>Dynamic</span> registration <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">addServlet</span><span class=\"token punctuation\">(</span>servletName<span class=\"token punctuation\">,</span> dispatcherServlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registration <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to register servlet with name '\"</span> <span class=\"token operator\">+</span> servletName <span class=\"token operator\">+</span> <span class=\"token string\">\"'. \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"Check if there is another servlet registered under the same name.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   registration<span class=\"token punctuation\">.</span><span class=\"token function\">setLoadOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   registration<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   registration<span class=\"token punctuation\">.</span><span class=\"token function\">setAsyncSupported</span><span class=\"token punctuation\">(</span><span class=\"token function\">isAsyncSupported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filters <span class=\"token operator\">=</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Filter</span> filter <span class=\"token operator\">:</span> filters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">registerServletFilter</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token function\">customizeRegistration</span><span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>createServletApplicationContext 又是由<strong>孙子类</strong>AbstractAnnotationConfigDispatcherServletInitializer实现</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> configClasses <span class=\"token operator\">=</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h4 id=\"demo演示\"><a href=\"#demo演示\" class=\"headerlink\" title=\"demo演示\"></a>demo演示</h4><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"cn.hyqup.web\"</span><span class=\"token punctuation\">,</span>excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">,</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"cn.hyqup.web\"</span><span class=\"token punctuation\">,</span>includeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">,</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>useDefaultFilters <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMVCConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickAppStater</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/**\n    * 根容器的配置（Spring容器相关的配置）\n    * @return\n    */</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">/**\n    * web容器相关的配置（SpringMVC的配置类）\n    * @return\n    */</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMVCConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">/**\n    * Servlet的映射路径\n    * @return\n    */</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>继承了AbstractAnnotationConfigDispatcherServletInitializer，实现了快速启动spring容器和springmvc容器</p>\n<h3 id=\"整体流程分析\"><a href=\"#整体流程分析\" class=\"headerlink\" title=\"整体流程分析\"></a>整体流程分析</h3><h4 id=\"代码阶段\"><a href=\"#代码阶段\" class=\"headerlink\" title=\"代码阶段\"></a>代码阶段</h4><ol>\n<li>Tomcat启动后会扫描所有的WebApplicationInitializer执行onStartup方法，会扫描到我们所写的QuickAppStater，执行onStartup，会执行super.onStartup</li>\n<li>会执行到AbstractDispatcherServletInitializer的方法首先执行父类AbstractContextLoaderInitializer去执行registerContextLoaderListener，会根据spring的配置类创建一个空容器AnnotationConfigWebApplicationContext，注解版本的。此时容器还未刷新，没有功能 </li>\n<li>AbstractDispatcherServletInitializer其次会执行registerDispatcherServlet注册DispatcherServlet，根据web相关的配置类AnnotationConfigWebApplicationContext，第二个容器创建出来</li>\n</ol>\n<h4 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h4><ol>\n<li>首先按照代码阶段会将我们的父子容器创建出来，也就是两个AnnotationConfigWebApplicationContext，</li>\n<li>（父容器）web启动完成的时候，Tomcat触发监听器启动根容器，也就是ContextLoaderListener里面的contextInitialized进行initWebApplicationContext初始化，也就是会执行到refresh()逻辑装配Spring相关的容器（比如AOP、事务、IOC、自动装配（包括了service层、dao层））</li>\n<li>（子容器）由于DispatcherServlet本质上就是一个servlet,所以tomcat启动之后回调用init方法初始化，这个时候就是执行到对DispatcherServlet里面的AnnotationConfigWebApplicationContext进行refresh装配web相关的SpringMVC相关的容器（比如@Controller相关的）</li>\n</ol>\n<p>注意：由于设计上是子容器刷新的时候父容器已经刷新完毕，并且将父容器设置到子容器对象中，所以我们在controller（子容器）装配service（父容器）正常，而service装配controller就是不支持的</p>\n","more":"<blockquote>\n<p>前置基础：了解SPI,Service Provider Interface,服务提供者接口 jdk提供给“服务提供厂商”或者“插件开发者”使用的接口,不需要修改原来作为接口的jar的情况下，将原来实现的那个jar替换为另外一种实现的jar即可。</p>\n</blockquote>\n<p>使用规范：</p>\n<p>定义服务的通用接口，针对通用的服务接口，提供具体的实现类。</p>\n<p>在jar包的META-INF&#x2F;services&#x2F;目录中，新建一个文件，文件名为 接口的”全限定名”。 文件内容为该接口的具体实现类的”全限定名”。</p>\n<p>将spi所在jar放在主程序的classpath中</p>\n<p>服务调用方用java.util.ServiceLoader，用服务接口为参数，去动态加载具体的实现类到JVM中。</p>\n<h2 id=\"模块搭建\"><a href=\"#模块搭建\" class=\"headerlink\" title=\"模块搭建\"></a>模块搭建</h2><h3 id=\"1、新增springmvcsource-test\"><a href=\"#1、新增springmvcsource-test\" class=\"headerlink\" title=\"1、新增springmvcsource-test\"></a>1、新增springmvcsource-test</h3><p><img src=\"/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220514094502540-16526085257311.png\" alt=\"image-20220514094502540\"></p>\n<h3 id=\"2、引入相关依赖\"><a href=\"#2、引入相关依赖\" class=\"headerlink\" title=\"2、引入相关依赖\"></a>2、引入相关依赖</h3><p>springmvcsource-test 的build.gradle  dependencies下加入依赖</p>\n<h4 id=\"2-1-源码webmvc\"><a href=\"#2-1-源码webmvc\" class=\"headerlink\" title=\"2.1 源码webmvc\"></a>2.1 源码webmvc</h4><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">implementation <span class=\"token punctuation\">(</span><span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\":spring-webmvc\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-2-servlet依赖\"><a href=\"#2-2-servlet依赖\" class=\"headerlink\" title=\"2.2  servlet依赖\"></a>2.2  servlet依赖</h4><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">implementation  group<span class=\"token punctuation\">:</span> <span class=\"token string\">'javax.servlet'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'javax.servlet-api'</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">'4.0.1'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>ps:这里是<strong>implementation</strong>，这样lib才会打入war,从而Tomcat启动springmvc相关才会生效（非常重要），这里卡了我大半天。</p>\n<p>不然访问时候总是404 找不到路径</p>\n<h3 id=\"2-3-gradle-补充知识点\"><a href=\"#2-3-gradle-补充知识点\" class=\"headerlink\" title=\"2.3 gradle  补充知识点\"></a>2.3 gradle  补充知识点</h3><p>目前Gradle版本支持的依赖配置有：implementation、api、compileOnly、runtimeOnly和annotationProcessor，已经废弃的配置有：compile、provided、apk、providedCompile。此外依赖配置还可以加一些配置项，例如AndroidTestImplementation、debugApi等等。</p>\n<p>常用的是implementation、api、compileOnly三个依赖配置，含义如下：</p>\n<ul>\n<li>implementation<br>与compile对应，会添加依赖到编译路径，并且会将依赖打包到输出（aar或apk），但是在编译时不会将依赖的实现暴露给其他module，也就是只有在运行时其他module才能访问这个依赖中的实现。使用这个配置，可以显著提升构建时间，因为它可以减少重新编译的module的数量。建议，尽量使用这个依赖配置。</li>\n<li>api<br>与compile对应，功能完全一样，会添加依赖到编译路径，并且会将依赖打包到输出（aar或apk），与implementation不同，这个依赖可以传递，其他module无论在编译时和运行时都可以访问这个依赖的实现，也就是会泄漏一些不应该不使用的实现。举个例子，A依赖B，B依赖C，如果都是使用api配置的话，A可以直接使用C中的类（编译时和运行时），而如果是使用implementation配置的话，在编译时，A是无法访问C中的类的。</li>\n<li>compileOnly<br>与provided对应，Gradle把依赖加到编译路径，编译时使用，不会打包到输出（aar或apk）。这可以减少输出的体积，在只在编译时需要，在运行时可选的情况，很有用。</li>\n<li>runtimeOnly<br>与apk对应，gradle添加依赖只打包到APK，运行时使用，但不会添加到编译路径。这个没有使用过。</li>\n<li>annotationProcessor<br>与compile对应，用于注解处理器的依赖配置。</li>\n</ul>\n<h3 id=\"3、编码\"><a href=\"#3、编码\" class=\"headerlink\" title=\"3、编码\"></a>3、编码</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>web</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AppConfig</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebApplicationInitializer</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnnotationConfigWebApplicationContext</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DispatcherServlet</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletContext</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletRegistration</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/14\n * @description:\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppStarter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebApplicationInitializer</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStartup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContext</span> servletContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 创建一个webIOC容器，并注册主配置类吗  注解版的配置类注册进去</span>\n\t\t<span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 创建并注册 DispatcherServlet</span>\n\t\t<span class=\"token class-name\">DispatcherServlet</span> servlet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatcherServlet</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ServletRegistration<span class=\"token punctuation\">.</span>Dynamic</span> registration <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">addServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">,</span> servlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tregistration<span class=\"token punctuation\">.</span><span class=\"token function\">setLoadOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tregistration<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>WebApplicationInitializer需要<strong>servlet3.0以上</strong>，<strong>Tomcat6.0以上</strong>（6.0以上支持servlet3.0）</p>\n<p>上面的配置相当于web.xml配置了，上述代码采用api形式植入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.context.ContextLoaderListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>/WEB-INF/app-context.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-param</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>app<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>app<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/app/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComponentScan</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/14\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.hyqup.web\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>说明：配置了AppStarter，相当于Tomcat一启动就加载</p>\n<ol>\n<li>创建了容器，spring基本功能完成</li>\n<li>注册了一个根servlet:DispatcherServlet，后面所有的请求都由 DispatcherServlet 处理</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2022 灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 0.1\n * @date 2022/5/14\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/say\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello SpringMVC\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、部署访问\"><a href=\"#4、部署访问\" class=\"headerlink\" title=\"4、部署访问\"></a>4、部署访问</h3><p><a href=\"http://localhost:8080/webmvc/say\">http://localhost:8080/webmvc/say</a></p>\n<h2 id=\"原理剖析\"><a href=\"#原理剖析\" class=\"headerlink\" title=\"原理剖析\"></a>原理剖析</h2><blockquote>\n<p>SpringMVC基于SPI启动了web容器，servlet定义ServletContainerInitializer。</p>\n</blockquote>\n<h3 id=\"主流程分析启动web容器\"><a href=\"#主流程分析启动web容器\" class=\"headerlink\" title=\"主流程分析启动web容器\"></a>主流程分析启动web容器</h3><p>servlet定义ServletContainerInitializer，</p>\n<p><img src=\"/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220514235410561-16526085257323.png\" alt=\"image-20220514235410561\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@HandlesTypes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationInitializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringServletContainerInitializer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ServletContainerInitializer</span> <span class=\"token punctuation\">&#123;</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStartup</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> webAppInitializerClasses<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletContext</span> servletContext<span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n\n      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WebApplicationInitializer</span><span class=\"token punctuation\">></span></span> initializers <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>webAppInitializerClasses <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         initializers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>webAppInitializerClasses<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> waiClass <span class=\"token operator\">:</span> webAppInitializerClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Be defensive: Some servlet containers provide us with invalid classes,</span>\n            <span class=\"token comment\">// no matter what @HandlesTypes says...</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>waiClass<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAbstract</span><span class=\"token punctuation\">(</span>waiClass<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                  <span class=\"token class-name\">WebApplicationInitializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>waiClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                  initializers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationInitializer</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token class-name\">ReflectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">accessibleConstructor</span><span class=\"token punctuation\">(</span>waiClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to instantiate WebApplicationInitializer class\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initializers<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No Spring WebApplicationInitializer types detected on classpath\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>initializers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Spring WebApplicationInitializers detected on classpath\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">AnnotationAwareOrderComparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>initializers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationInitializer</span> initializer <span class=\"token operator\">:</span> initializers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         initializer<span class=\"token punctuation\">.</span><span class=\"token function\">onStartup</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>HandlesTypes 感兴趣的类WebApplicationInitializer，会去找到所有实现了WebApplicationInitializer的类，我们这里AppStarter就是实现了WebApplicationInitializer，启动时候执行WebApplicationInitializer.onStartup</p>\n<p>接下来逻辑：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建一个webIOC容器，并注册主配置类吗  注解版的配置类注册进去</span>\n<span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建并注册 DispatcherServlet</span>\n<span class=\"token class-name\">DispatcherServlet</span> servlet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatcherServlet</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ServletRegistration<span class=\"token punctuation\">.</span>Dynamic</span> registration <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">addServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">,</span> servlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nregistration<span class=\"token punctuation\">.</span><span class=\"token function\">setLoadOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nregistration<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>准备一个空的webioc容器，准备一个DispatcherServlet，并将ioc容器传过去，并注册到ServletContext（Tomcat）中去。DispatcherServlet本质上也是一个servlet,所以servlet在执行init的时候就会将该ioc容器执行spring相关的refresh()逻辑将容器刷新。具体初始化逻辑会在HttpServletBean init重写，init有个抽象方法initServletBean，FrameworkServlet来实现initServletBean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initServletBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initializing Spring \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" '\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getServletName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Initializing Servlet '\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getServletName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//初始化web容器</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webApplicationContext <span class=\"token operator\">=</span> <span class=\"token function\">initWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">initFrameworkServlet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">RuntimeException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Context initialization failed\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enableLoggingRequestDetails <span class=\"token operator\">?</span>\n            <span class=\"token string\">\"shown which may lead to unsafe logging of potentially sensitive data\"</span> <span class=\"token operator\">:</span>\n            <span class=\"token string\">\"masked to prevent unsafe logging of potentially sensitive data\"</span><span class=\"token punctuation\">;</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enableLoggingRequestDetails='\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enableLoggingRequestDetails <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"': request parameters and headers will be \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Completed initialization in \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" ms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>初始化代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">initWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">WebApplicationContext</span> rootContext <span class=\"token operator\">=</span>\n         <span class=\"token class-name\">WebApplicationContextUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">WebApplicationContext</span> wac <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webApplicationContext <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// A context instance was injected at construction time -> use it</span>\n      wac <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webApplicationContext<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wac <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ConfigurableWebApplicationContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">ConfigurableWebApplicationContext</span> cwac <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableWebApplicationContext</span><span class=\"token punctuation\">)</span> wac<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cwac<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// The context has not yet been refreshed -> provide services such as</span>\n            <span class=\"token comment\">// setting the parent context, setting the application context id, etc</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cwac<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token comment\">// The context instance was injected without an explicit parent -> set</span>\n               <span class=\"token comment\">// the root application context (if any; may be null) as the parent</span>\n               cwac<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>rootContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">configureAndRefreshWebApplicationContext</span><span class=\"token punctuation\">(</span>cwac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wac <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// No context instance was injected at construction time -> see if one</span>\n      <span class=\"token comment\">// has been registered in the servlet context. If one exists, it is assumed</span>\n      <span class=\"token comment\">// that the parent context (if any) has already been set and that the</span>\n      <span class=\"token comment\">// user has performed any initialization such as setting the context id</span>\n      wac <span class=\"token operator\">=</span> <span class=\"token function\">findWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wac <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// No context instance is defined for this servlet -> create a local one</span>\n      wac <span class=\"token operator\">=</span> <span class=\"token function\">createWebApplicationContext</span><span class=\"token punctuation\">(</span>rootContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refreshEventReceived<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Either the context is not a ConfigurableApplicationContext with refresh</span>\n      <span class=\"token comment\">// support or the context injected at construction time had already been</span>\n      <span class=\"token comment\">// refreshed -> trigger initial onRefresh manually here.</span>\n      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onRefreshMonitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span>wac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publishContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Publish the context as a servlet context attribute.</span>\n      <span class=\"token class-name\">String</span> attrName <span class=\"token operator\">=</span> <span class=\"token function\">getServletContextAttributeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attrName<span class=\"token punctuation\">,</span> wac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">return</span> wac<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"父子容器的概念引入\"><a href=\"#父子容器的概念引入\" class=\"headerlink\" title=\"父子容器的概念引入\"></a>父子容器的概念引入</h4><p>以前xml配置springMVC的时候步骤，需要在web.xml中配置</p>\n<p>1、在web.xml配置ContextLoadListener,指定Spring配置文件位置</p>\n<p>2、在web.xml配置DispatcherServlet,指定SpringMVC配置文件的位置</p>\n<p>3、以上操作就会产生父子容器</p>\n<p>父容器：Root Spring配置文件进行包扫描并保存的组件的容器</p>\n<p>子容器：SpringMVC配置文件进行包扫描并保存的所有组件的容器</p>\n<p>cwac.setParent(rootContext);好处是容器之间的隔离，类似于Java中类加载的双亲委派模型</p>\n<h3 id=\"基于两个事件回调启动了Spring和SpringMVC\"><a href=\"#基于两个事件回调启动了Spring和SpringMVC\" class=\"headerlink\" title=\"基于两个事件回调启动了Spring和SpringMVC\"></a>基于两个事件回调启动了Spring和SpringMVC</h3><h4 id=\"第一个父容器相关\"><a href=\"#第一个父容器相关\" class=\"headerlink\" title=\"第一个父容器相关\"></a>第一个父容器相关</h4><p>AbstractAnnotationConfigDispatcherServletInitializer</p>\n<p><img src=\"/%E5%89%91%E6%8C%87%E6%BA%90%E7%A0%81-springmvc-%E4%B8%80-%E5%BA%8F%E7%AB%A0.assets/image-20220515145511744-16526085257325.png\" alt=\"image-20220515145511744\"></p>\n<p>AbstractContextLoaderInitializer 注册ContextLoaderListener，web应用启动以后（Tomcat加载应用以后）会执行ContextLoaderListener里面contextInitialized的逻辑，监听器机制，servlet的标准</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStartup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContext</span> servletContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">registerContextLoaderListener</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">protected void registerContextLoaderListener(ServletContext servletContext) &#123;\n   WebApplicationContext rootAppContext &#x3D; createRootApplicationContext();\n   if (rootAppContext !&#x3D; null) &#123;\n      ContextLoaderListener listener &#x3D; new ContextLoaderListener(rootAppContext);\n      listener.setContextInitializers(getRootApplicationContextInitializers());\n      servletContext.addListener(listener);\n   &#125;\n   else &#123;\n      logger.debug(&quot;No ContextLoaderListener registered, as &quot; +\n            &quot;createRootApplicationContext() did not return an application context&quot;);\n   &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>createRootApplicationContext由<strong>孙子类</strong>AbstractAnnotationConfigDispatcherServletInitializer 实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createRootApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> configClasses <span class=\"token operator\">=</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>而 getRootConfigClasses 就是获取自子类的配置文件，也就是我们所说父子容器中父容器Spring组件相关的配置类</p>\n<h4 id=\"第二个子容器相关\"><a href=\"#第二个子容器相关\" class=\"headerlink\" title=\"第二个子容器相关\"></a>第二个子容器相关</h4><p>第二个我们发现 AbstractAnnotationConfigDispatcherServletInitializer  有一个getRootConfigClasses 同时也有一个getRootConfigClasses，获取和servlet相关的。追溯发现</p>\n<p>AbstractDispatcherServletInitializer</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerDispatcherServlet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContext</span> servletContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">String</span> servletName <span class=\"token operator\">=</span> <span class=\"token function\">getServletName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasLength</span><span class=\"token punctuation\">(</span>servletName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"getServletName() must not return null or empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">WebApplicationContext</span> servletAppContext <span class=\"token operator\">=</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>servletAppContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"createServletApplicationContext() must not return null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">FrameworkServlet</span> dispatcherServlet <span class=\"token operator\">=</span> <span class=\"token function\">createDispatcherServlet</span><span class=\"token punctuation\">(</span>servletAppContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>dispatcherServlet<span class=\"token punctuation\">,</span> <span class=\"token string\">\"createDispatcherServlet(WebApplicationContext) must not return null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   dispatcherServlet<span class=\"token punctuation\">.</span><span class=\"token function\">setContextInitializers</span><span class=\"token punctuation\">(</span><span class=\"token function\">getServletApplicationContextInitializers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">ServletRegistration<span class=\"token punctuation\">.</span>Dynamic</span> registration <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">addServlet</span><span class=\"token punctuation\">(</span>servletName<span class=\"token punctuation\">,</span> dispatcherServlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registration <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to register servlet with name '\"</span> <span class=\"token operator\">+</span> servletName <span class=\"token operator\">+</span> <span class=\"token string\">\"'. \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"Check if there is another servlet registered under the same name.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   registration<span class=\"token punctuation\">.</span><span class=\"token function\">setLoadOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   registration<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   registration<span class=\"token punctuation\">.</span><span class=\"token function\">setAsyncSupported</span><span class=\"token punctuation\">(</span><span class=\"token function\">isAsyncSupported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filters <span class=\"token operator\">=</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Filter</span> filter <span class=\"token operator\">:</span> filters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token function\">registerServletFilter</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token function\">customizeRegistration</span><span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>createServletApplicationContext 又是由<strong>孙子类</strong>AbstractAnnotationConfigDispatcherServletInitializer实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> configClasses <span class=\"token operator\">=</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>configClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"demo演示\"><a href=\"#demo演示\" class=\"headerlink\" title=\"demo演示\"></a>demo演示</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"cn.hyqup.web\"</span><span class=\"token punctuation\">,</span>excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">,</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"cn.hyqup.web\"</span><span class=\"token punctuation\">,</span>includeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">,</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>useDefaultFilters <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMVCConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickAppStater</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/**\n    * 根容器的配置（Spring容器相关的配置）\n    * @return\n    */</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">/**\n    * web容器相关的配置（SpringMVC的配置类）\n    * @return\n    */</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMVCConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">/**\n    * Servlet的映射路径\n    * @return\n    */</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继承了AbstractAnnotationConfigDispatcherServletInitializer，实现了快速启动spring容器和springmvc容器</p>\n<h3 id=\"整体流程分析\"><a href=\"#整体流程分析\" class=\"headerlink\" title=\"整体流程分析\"></a>整体流程分析</h3><h4 id=\"代码阶段\"><a href=\"#代码阶段\" class=\"headerlink\" title=\"代码阶段\"></a>代码阶段</h4><ol>\n<li>Tomcat启动后会扫描所有的WebApplicationInitializer执行onStartup方法，会扫描到我们所写的QuickAppStater，执行onStartup，会执行super.onStartup</li>\n<li>会执行到AbstractDispatcherServletInitializer的方法首先执行父类AbstractContextLoaderInitializer去执行registerContextLoaderListener，会根据spring的配置类创建一个空容器AnnotationConfigWebApplicationContext，注解版本的。此时容器还未刷新，没有功能 </li>\n<li>AbstractDispatcherServletInitializer其次会执行registerDispatcherServlet注册DispatcherServlet，根据web相关的配置类AnnotationConfigWebApplicationContext，第二个容器创建出来</li>\n</ol>\n<h4 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h4><ol>\n<li>首先按照代码阶段会将我们的父子容器创建出来，也就是两个AnnotationConfigWebApplicationContext，</li>\n<li>（父容器）web启动完成的时候，Tomcat触发监听器启动根容器，也就是ContextLoaderListener里面的contextInitialized进行initWebApplicationContext初始化，也就是会执行到refresh()逻辑装配Spring相关的容器（比如AOP、事务、IOC、自动装配（包括了service层、dao层））</li>\n<li>（子容器）由于DispatcherServlet本质上就是一个servlet,所以tomcat启动之后回调用init方法初始化，这个时候就是执行到对DispatcherServlet里面的AnnotationConfigWebApplicationContext进行refresh装配web相关的SpringMVC相关的容器（比如@Controller相关的）</li>\n</ol>\n<p>注意：由于设计上是子容器刷新的时候父容器已经刷新完毕，并且将父容器设置到子容器对象中，所以我们在controller（子容器）装配service（父容器）正常，而service装配controller就是不支持的</p>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"SpringMVC源码","path":"api/categories/SpringMVC源码.json"}],"tags":[{"name":"SpringMVC","path":"api/tags/SpringMVC.json"},{"name":"SPI","path":"api/tags/SPI.json"}]}