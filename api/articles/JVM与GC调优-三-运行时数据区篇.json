{"title":"JVM与GC调优(三)-运行时数据区篇","slug":"JVM与GC调优-三-运行时数据区篇","date":"2022-09-25T05:08:54.000Z","updated":"2024-04-22T07:21:14.883Z","comments":true,"path":"api/articles/JVM与GC调优-三-运行时数据区篇.json","excerpt":"了解内存结构中相关信息，程序计数器、虚拟器栈、本地方法和本地接口栈、堆、方法区","covers":["http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928204912987.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928205653573.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928211031108.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928220835279.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224543209.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224548943.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224554113.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224600714.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224605206.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224610548.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224618969.png","http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224622772.png"],"content":"<p>了解内存结构中相关信息，程序计数器、虚拟器栈、本地方法和本地接口栈、堆、方法区</p>\n<span id=\"more\"></span>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>整个JVM构成里面，由三部分组成：类加载系统、<strong>运行时数据区</strong>、执行引擎</p>\n</blockquote>\n<p>按照线程使用情况和职责分成两大类</p>\n<p><strong>线程独享 （程序执行区域）</strong></p>\n<ul>\n<li><p>不需要垃圾回收</p>\n</li>\n<li><p>虚拟机栈、本地方法栈、程序计数器</p>\n</li>\n</ul>\n<p><strong>线程共享 （数据存储区域）</strong></p>\n<ul>\n<li><p>垃圾回收</p>\n</li>\n<li><p>存储类的静态数据和对象数据</p>\n</li>\n<li><p>堆和方法区</p>\n</li>\n</ul>\n<h2 id=\"一、堆（Heap）\"><a href=\"#一、堆（Heap）\" class=\"headerlink\" title=\"一、堆（Heap）\"></a>一、堆（Heap）</h2><h3 id=\"核心概述\"><a href=\"#核心概述\" class=\"headerlink\" title=\"核心概述\"></a>核心概述</h3><blockquote>\n<p>Java堆在JVM启动时创建内存区域去实现对象、数组与运行时常量的内存分配，它是虚拟机管理最大的，也是垃圾回收的主要内存区域 </p>\n</blockquote>\n<ul>\n<li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</li>\n<li>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间</li>\n<li>堆内存的大小是可以调节的</li>\n<li>《Java虚拟机规范》规定，堆可以处于<strong>物理上</strong>不连续的内存空间中，但在<strong>逻辑上</strong>它应该被视为连续的</li>\n<li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（ Thread Local Allocation Buffer,TLAB)。</li>\n</ul>\n<h3 id=\"堆空间大小的设置\"><a href=\"#堆空间大小的设置\" class=\"headerlink\" title=\"堆空间大小的设置\"></a>堆空间大小的设置</h3><h3 id=\"新生代与老年代的参数设置\"><a href=\"#新生代与老年代的参数设置\" class=\"headerlink\" title=\"新生代与老年代的参数设置\"></a>新生代与老年代的参数设置</h3><h2 id=\"二、虚拟机栈-栈（Stack）\"><a href=\"#二、虚拟机栈-栈（Stack）\" class=\"headerlink\" title=\"二、虚拟机栈&#x2F;栈（Stack）\"></a>二、虚拟机栈&#x2F;栈（Stack）</h2><p>Java虚拟机分堆区、栈区、方法区</p>\n<h3 id=\"核心概述-1\"><a href=\"#核心概述-1\" class=\"headerlink\" title=\"核心概述\"></a>核心概述</h3><blockquote>\n<p>Java 虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应这一次次的 Java 方法调用。</p>\n</blockquote>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><blockquote>\n<p>主管Java程序的运行，它保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果、并参与方法的调用和返回</p>\n</blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>Java虚拟机栈也是<code>线程私有</code>的，它的生命周期与线程相同（随线程而生，随线程而灭）</li>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；<br>　-  如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常；</li>\n</ul>\n<p>　　（当前大部分JVM都可以动态扩展，只不过JVM规范也允许固定长度的虚拟机栈）</p>\n<ul>\n<li>Java虚拟机栈描述的是Java方法执行的内存模型：每个方法执行的同时会创建一个栈帧。</li>\n</ul>\n<h3 id=\"栈的单位：栈帧（Stack-Frame）\"><a href=\"#栈的单位：栈帧（Stack-Frame）\" class=\"headerlink\" title=\"栈的单位：栈帧（Stack Frame）\"></a>栈的单位：栈帧（Stack Frame）</h3><blockquote>\n<p>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧</strong>（Stack Frame）的格式存在</p>\n</blockquote>\n<p><strong>方法与栈帧的关系：</strong></p>\n<p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928204912987.png\" alt=\"image-20220928204912987\"></p>\n<p><strong>栈帧的内部结构：</strong></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928205653573.png\" alt=\"image-20220928205653573\"></p>\n<h4 id=\"栈的FILO原理\"><a href=\"#栈的FILO原理\" class=\"headerlink\" title=\"栈的FILO原理\"></a>栈的FILO原理</h4><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928211031108.png\" alt=\"image-20220928211031108\"></p>\n<p>JVM直接对Java栈的操作只有两个：</p>\n<ul>\n<li>每个方法执行，伴随着压栈（push）</li>\n<li>执行结束后的出栈（pop）</li>\n</ul>\n<p>遵循<code>先进后出</code>、<code>后进先出</code>原则</p>\n<h4 id=\"栈帧中的信息\"><a href=\"#栈帧中的信息\" class=\"headerlink\" title=\"栈帧中的信息\"></a>栈帧中的信息</h4><p>每个栈帧存在以下信息</p>\n<ul>\n<li><code>局部变量表</code></li>\n<li><code>操作数栈</code></li>\n<li><code>动态链接</code></li>\n<li><code>方法返回地址</code></li>\n<li>一些<code>附加信息</code></li>\n</ul>\n<h4 id=\"局部变量表（本地变量表【Local-veriables】）\"><a href=\"#局部变量表（本地变量表【Local-veriables】）\" class=\"headerlink\" title=\"*局部变量表（本地变量表【Local veriables】）\"></a>*局部变量表（本地变量表【Local veriables】）</h4><blockquote>\n<p>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</p>\n</blockquote>\n<p>这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928220835279.png\" alt=\"image-20220928220835279\"></p>\n<p>注意：</p>\n<p>1、<code>非静态</code>方法的话 会有 <code>this</code> 变量 在 index 为0 的位置</p>\n<p>2、<code>double</code>和<code>long</code> 占据两个 slot位 ，一个是 4位</p>\n<p>3、栈帧当中的局部变量表的槽位是可以被<code>重复利用</code>的，出了<code>作用域</code>就会被<code>销毁</code>，后面定义的变量就会占据被销毁的变量的位置</p>\n<p>4、局部变量表中的变量也是重要的<code>垃圾回收根节点</code>，只要被局部变量表中直接或间接引用的对象都不会被回收</p>\n<h4 id=\"操作数栈（Operaand-Stack）\"><a href=\"#操作数栈（Operaand-Stack）\" class=\"headerlink\" title=\"*操作数栈（Operaand Stack）\"></a>*操作数栈（Operaand Stack）</h4><blockquote>\n<p>也叫<code>表达式栈</code>，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即<code>入栈(push)</code>&#x2F;<code>出栈(pop)</code>。并非采用索引访问。</p>\n</blockquote>\n<h5 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h5><p><strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间；</strong></p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAddOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">byte</span> i <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224543209.png\" alt=\"image-20220928224543209\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224548943.png\" alt=\"image-20220928224548943\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224554113.png\" alt=\"image-20220928224554113\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224600714.png\" alt=\"image-20220928224600714\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224605206.png\" alt=\"image-20220928224605206\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224610548.png\" alt=\"image-20220928224610548\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224618969.png\" alt=\"image-20220928224618969\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224622772.png\" alt=\"image-20220928224622772\"></p>\n<h4 id=\"动态链接（Dynamic-Linking）\"><a href=\"#动态链接（Dynamic-Linking）\" class=\"headerlink\" title=\"动态链接（Dynamic Linking）\"></a>动态链接（Dynamic Linking）</h4><p>指向运行时常量池的方法引用</p>\n<ul>\n<li>每一个栈帧内部包含一个指向运行时常量池中该栈帧所属方法的引用，包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接</li>\n<li>在 Java 源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在 class 文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong>。</li>\n</ul>\n<h3 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h3><p>栈 jdk5以后默认都是1M，栈空间比较小</p>\n<h4 id=\"栈中存在垃圾回收吗？\"><a href=\"#栈中存在垃圾回收吗？\" class=\"headerlink\" title=\"栈中存在垃圾回收吗？\"></a>栈中存在垃圾回收吗？</h4><p>栈中不存在垃圾回收</p>\n<h4 id=\"栈中可能抛出的异常是什么？\"><a href=\"#栈中可能抛出的异常是什么？\" class=\"headerlink\" title=\"栈中可能抛出的异常是什么？\"></a>栈中可能抛出的异常是什么？</h4><blockquote>\n<p>Java 虚拟机规范允许Java栈的大小是动态的或者是固定不变的。</p>\n</blockquote>\n<ul>\n<li><p>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个StackOverflowError 异常。</p>\n</li>\n<li><p>如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个 OutOfMemoryError 异常。</p>\n</li>\n</ul>\n<h4 id=\"如何设置栈内存的大小？\"><a href=\"#如何设置栈内存的大小？\" class=\"headerlink\" title=\"如何设置栈内存的大小？\"></a>如何设置栈内存的大小？</h4><p>-Xss size (即：-XX:ThreadStackSize) 一般默认为512k-1024k，取决于操作系统。</p>\n<h2 id=\"三、本地方法栈\"><a href=\"#三、本地方法栈\" class=\"headerlink\" title=\"三、本地方法栈\"></a>三、本地方法栈</h2><blockquote>\n<p><strong>本地方法栈</strong>和<strong>虚拟机栈</strong>相似，区别就是虚拟机栈为虚拟机执行<code>Java</code>服务（字节码服务）<strong>，而本地方法栈为虚拟机使用到的</strong><code>Native</code>方法（比如C++方法）服务**。</p>\n</blockquote>\n<p>简单地讲，一个Native Method就是一个Java调用非Java代码的接口。或者更为底层的接口</p>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>调用native方法直接与操作系统与硬件打交道。多线程底层就是这么实现的</p>\n<h2 id=\"四、-方法区\"><a href=\"#四、-方法区\" class=\"headerlink\" title=\"四、 方法区\"></a>四、 方法区</h2><blockquote>\n<p>方法区（Method Area）是可供各个线程共享的运行时内存区域</p>\n</blockquote>\n<p>方法区本质上是Java语言<strong>编译后代码存储区域</strong>，它存储每一个类的结构信息，例如：<strong>运行时常量池</strong>、成员变量、方法数据、构造方法和普通方法的字节码指令等内容。很多语言都有类似区域。</p>\n<h2 id=\"五、-字符串常量池\"><a href=\"#五、-字符串常量池\" class=\"headerlink\" title=\"五、 字符串常量池\"></a>五、 字符串常量池</h2><p><strong>class常量池：一个class文件只有一个class常量池</strong></p>\n<ul>\n<li><p>字面量：数值型（int、float、long、double）、双引号引起来的字符串值等</p>\n</li>\n<li><p>符号引用：Class、Method、Field等</p>\n</li>\n</ul>\n<p><strong>运行时常量池：一个class对象有一个运行时常量池</strong></p>\n<ul>\n<li><p>字面量：数值型（int、float、long、double）、双引号引起来的字符串值等</p>\n</li>\n<li><p>符号引用：Class、Method、Field等</p>\n</li>\n</ul>\n<p><strong>字符串常量池：全局只有一个字符串常量池</strong></p>\n<ul>\n<li>双引号引起来的字符串值</li>\n</ul>\n<h3 id=\"字符串常量池存储\"><a href=\"#字符串常量池存储\" class=\"headerlink\" title=\"字符串常量池存储\"></a>字符串常量池存储</h3><p>为了提高匹配速度， 即更快的查找某个字符串是否存在于常量池 Java 在设计字符串常量池的时候，还搞了一张StringTable， StringTable里面保存了<strong>字符串的引用</strong>。StringTable类似于HashTable（哈希表）。在JDK1.7+，StringTable可以通过参数指定 -XX:StringTableSize&#x3D;5555</p>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><blockquote>\n<p>对象使用双引号字符串赋值和使用new String等的区别</p>\n</blockquote>\n<ul>\n<li><p>单独使用””引号创建的字符串都是常量，编译期就已经确定存储到String Pool中。</p>\n</li>\n<li><p>使用new String(“”)创建的对象会存储到heap中，是运行期新创建的。</p>\n</li>\n<li><p>使用只包含常量的字符串连接符如”aa”+”bb”创建的也是常量，编译期就能确定已经存储到StringPool中。</p>\n</li>\n<li><p>使用包含变量的字符串连接如”aa”+s创建的对象是运行期才创建的，存储到heap中。</p>\n</li>\n<li><p>运行期调用String的intern()方法可以向String Pool中动态添加对象</p>\n</li>\n</ul>\n<h2 id=\"六、程序计数器（Program-Counter-Register）\"><a href=\"#六、程序计数器（Program-Counter-Register）\" class=\"headerlink\" title=\"六、程序计数器（Program Counter Register）\"></a>六、程序计数器（Program Counter Register）</h2><blockquote>\n<p>PC 寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码</p>\n</blockquote>\n<ul>\n<li><p>它是一块很小的内存空间，几乎可以忽略不记。也是运算速度最快的存储区域。</p>\n</li>\n<li><p>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p>\n</li>\n<li><p>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。程序计数器会存储当前线程正在执行的 Java 方法的 JVM 指令地址；或者，如果是在执行 native方法，则是未指定值（undefined）（因为PC寄存器是java层面的，本地方法栈是C&#x2F;C++层面的）。</p>\n</li>\n<li><p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成；</p>\n</li>\n<li><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令；</p>\n</li>\n<li><p>它是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p>\n</li>\n</ul>\n<h3 id=\"为什么要设置成-线程私有的-？\"><a href=\"#为什么要设置成-线程私有的-？\" class=\"headerlink\" title=\"为什么要设置成 线程私有的 ？\"></a>为什么要设置成 线程私有的 ？</h3><p>CPU需要不停的切换线程，在切换回来的时候，A线程的PC寄存器里就记录了 A线程执行到哪里了 B线程的PC寄存器里就记录了 B线程执行到哪里了，所以需要 是线程私有的。</p>\n","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>整个JVM构成里面，由三部分组成：类加载系统、<strong>运行时数据区</strong>、执行引擎</p>\n</blockquote>\n<p>按照线程使用情况和职责分成两大类</p>\n<p><strong>线程独享 （程序执行区域）</strong></p>\n<ul>\n<li><p>不需要垃圾回收</p>\n</li>\n<li><p>虚拟机栈、本地方法栈、程序计数器</p>\n</li>\n</ul>\n<p><strong>线程共享 （数据存储区域）</strong></p>\n<ul>\n<li><p>垃圾回收</p>\n</li>\n<li><p>存储类的静态数据和对象数据</p>\n</li>\n<li><p>堆和方法区</p>\n</li>\n</ul>\n<h2 id=\"一、堆（Heap）\"><a href=\"#一、堆（Heap）\" class=\"headerlink\" title=\"一、堆（Heap）\"></a>一、堆（Heap）</h2><h3 id=\"核心概述\"><a href=\"#核心概述\" class=\"headerlink\" title=\"核心概述\"></a>核心概述</h3><blockquote>\n<p>Java堆在JVM启动时创建内存区域去实现对象、数组与运行时常量的内存分配，它是虚拟机管理最大的，也是垃圾回收的主要内存区域 </p>\n</blockquote>\n<ul>\n<li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</li>\n<li>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间</li>\n<li>堆内存的大小是可以调节的</li>\n<li>《Java虚拟机规范》规定，堆可以处于<strong>物理上</strong>不连续的内存空间中，但在<strong>逻辑上</strong>它应该被视为连续的</li>\n<li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（ Thread Local Allocation Buffer,TLAB)。</li>\n</ul>\n<h3 id=\"堆空间大小的设置\"><a href=\"#堆空间大小的设置\" class=\"headerlink\" title=\"堆空间大小的设置\"></a>堆空间大小的设置</h3><h3 id=\"新生代与老年代的参数设置\"><a href=\"#新生代与老年代的参数设置\" class=\"headerlink\" title=\"新生代与老年代的参数设置\"></a>新生代与老年代的参数设置</h3><h2 id=\"二、虚拟机栈-栈（Stack）\"><a href=\"#二、虚拟机栈-栈（Stack）\" class=\"headerlink\" title=\"二、虚拟机栈&#x2F;栈（Stack）\"></a>二、虚拟机栈&#x2F;栈（Stack）</h2><p>Java虚拟机分堆区、栈区、方法区</p>\n<h3 id=\"核心概述-1\"><a href=\"#核心概述-1\" class=\"headerlink\" title=\"核心概述\"></a>核心概述</h3><blockquote>\n<p>Java 虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应这一次次的 Java 方法调用。</p>\n</blockquote>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><blockquote>\n<p>主管Java程序的运行，它保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果、并参与方法的调用和返回</p>\n</blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>Java虚拟机栈也是<code>线程私有</code>的，它的生命周期与线程相同（随线程而生，随线程而灭）</li>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；<br>　-  如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常；</li>\n</ul>\n<p>　　（当前大部分JVM都可以动态扩展，只不过JVM规范也允许固定长度的虚拟机栈）</p>\n<ul>\n<li>Java虚拟机栈描述的是Java方法执行的内存模型：每个方法执行的同时会创建一个栈帧。</li>\n</ul>\n<h3 id=\"栈的单位：栈帧（Stack-Frame）\"><a href=\"#栈的单位：栈帧（Stack-Frame）\" class=\"headerlink\" title=\"栈的单位：栈帧（Stack Frame）\"></a>栈的单位：栈帧（Stack Frame）</h3><blockquote>\n<p>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧</strong>（Stack Frame）的格式存在</p>\n</blockquote>\n<p><strong>方法与栈帧的关系：</strong></p>\n<p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928204912987.png\" alt=\"image-20220928204912987\"></p>\n<p><strong>栈帧的内部结构：</strong></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928205653573.png\" alt=\"image-20220928205653573\"></p>\n<h4 id=\"栈的FILO原理\"><a href=\"#栈的FILO原理\" class=\"headerlink\" title=\"栈的FILO原理\"></a>栈的FILO原理</h4><p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928211031108.png\" alt=\"image-20220928211031108\"></p>\n<p>JVM直接对Java栈的操作只有两个：</p>\n<ul>\n<li>每个方法执行，伴随着压栈（push）</li>\n<li>执行结束后的出栈（pop）</li>\n</ul>\n<p>遵循<code>先进后出</code>、<code>后进先出</code>原则</p>\n<h4 id=\"栈帧中的信息\"><a href=\"#栈帧中的信息\" class=\"headerlink\" title=\"栈帧中的信息\"></a>栈帧中的信息</h4><p>每个栈帧存在以下信息</p>\n<ul>\n<li><code>局部变量表</code></li>\n<li><code>操作数栈</code></li>\n<li><code>动态链接</code></li>\n<li><code>方法返回地址</code></li>\n<li>一些<code>附加信息</code></li>\n</ul>\n<h4 id=\"局部变量表（本地变量表【Local-veriables】）\"><a href=\"#局部变量表（本地变量表【Local-veriables】）\" class=\"headerlink\" title=\"*局部变量表（本地变量表【Local veriables】）\"></a>*局部变量表（本地变量表【Local veriables】）</h4><blockquote>\n<p>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</p>\n</blockquote>\n<p>这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型</p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928220835279.png\" alt=\"image-20220928220835279\"></p>\n<p>注意：</p>\n<p>1、<code>非静态</code>方法的话 会有 <code>this</code> 变量 在 index 为0 的位置</p>\n<p>2、<code>double</code>和<code>long</code> 占据两个 slot位 ，一个是 4位</p>\n<p>3、栈帧当中的局部变量表的槽位是可以被<code>重复利用</code>的，出了<code>作用域</code>就会被<code>销毁</code>，后面定义的变量就会占据被销毁的变量的位置</p>\n<p>4、局部变量表中的变量也是重要的<code>垃圾回收根节点</code>，只要被局部变量表中直接或间接引用的对象都不会被回收</p>\n<h4 id=\"操作数栈（Operaand-Stack）\"><a href=\"#操作数栈（Operaand-Stack）\" class=\"headerlink\" title=\"*操作数栈（Operaand Stack）\"></a>*操作数栈（Operaand Stack）</h4><blockquote>\n<p>也叫<code>表达式栈</code>，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即<code>入栈(push)</code>&#x2F;<code>出栈(pop)</code>。并非采用索引访问。</p>\n</blockquote>\n<h5 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h5><p><strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间；</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAddOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">byte</span> i <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224543209.png\" alt=\"image-20220928224543209\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224548943.png\" alt=\"image-20220928224548943\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224554113.png\" alt=\"image-20220928224554113\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224600714.png\" alt=\"image-20220928224600714\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224605206.png\" alt=\"image-20220928224605206\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224610548.png\" alt=\"image-20220928224610548\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224618969.png\" alt=\"image-20220928224618969\"></p>\n<p><img src=\"http://hyqup-blog-upyun.test.upcdn.net/img/image-20220928224622772.png\" alt=\"image-20220928224622772\"></p>\n<h4 id=\"动态链接（Dynamic-Linking）\"><a href=\"#动态链接（Dynamic-Linking）\" class=\"headerlink\" title=\"动态链接（Dynamic Linking）\"></a>动态链接（Dynamic Linking）</h4><p>指向运行时常量池的方法引用</p>\n<ul>\n<li>每一个栈帧内部包含一个指向运行时常量池中该栈帧所属方法的引用，包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接</li>\n<li>在 Java 源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在 class 文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong>。</li>\n</ul>\n<h3 id=\"相关问题\"><a href=\"#相关问题\" class=\"headerlink\" title=\"相关问题\"></a>相关问题</h3><p>栈 jdk5以后默认都是1M，栈空间比较小</p>\n<h4 id=\"栈中存在垃圾回收吗？\"><a href=\"#栈中存在垃圾回收吗？\" class=\"headerlink\" title=\"栈中存在垃圾回收吗？\"></a>栈中存在垃圾回收吗？</h4><p>栈中不存在垃圾回收</p>\n<h4 id=\"栈中可能抛出的异常是什么？\"><a href=\"#栈中可能抛出的异常是什么？\" class=\"headerlink\" title=\"栈中可能抛出的异常是什么？\"></a>栈中可能抛出的异常是什么？</h4><blockquote>\n<p>Java 虚拟机规范允许Java栈的大小是动态的或者是固定不变的。</p>\n</blockquote>\n<ul>\n<li><p>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个StackOverflowError 异常。</p>\n</li>\n<li><p>如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个 OutOfMemoryError 异常。</p>\n</li>\n</ul>\n<h4 id=\"如何设置栈内存的大小？\"><a href=\"#如何设置栈内存的大小？\" class=\"headerlink\" title=\"如何设置栈内存的大小？\"></a>如何设置栈内存的大小？</h4><p>-Xss size (即：-XX:ThreadStackSize) 一般默认为512k-1024k，取决于操作系统。</p>\n<h2 id=\"三、本地方法栈\"><a href=\"#三、本地方法栈\" class=\"headerlink\" title=\"三、本地方法栈\"></a>三、本地方法栈</h2><blockquote>\n<p><strong>本地方法栈</strong>和<strong>虚拟机栈</strong>相似，区别就是虚拟机栈为虚拟机执行<code>Java</code>服务（字节码服务）<strong>，而本地方法栈为虚拟机使用到的</strong><code>Native</code>方法（比如C++方法）服务**。</p>\n</blockquote>\n<p>简单地讲，一个Native Method就是一个Java调用非Java代码的接口。或者更为底层的接口</p>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>调用native方法直接与操作系统与硬件打交道。多线程底层就是这么实现的</p>\n<h2 id=\"四、-方法区\"><a href=\"#四、-方法区\" class=\"headerlink\" title=\"四、 方法区\"></a>四、 方法区</h2><blockquote>\n<p>方法区（Method Area）是可供各个线程共享的运行时内存区域</p>\n</blockquote>\n<p>方法区本质上是Java语言<strong>编译后代码存储区域</strong>，它存储每一个类的结构信息，例如：<strong>运行时常量池</strong>、成员变量、方法数据、构造方法和普通方法的字节码指令等内容。很多语言都有类似区域。</p>\n<h2 id=\"五、-字符串常量池\"><a href=\"#五、-字符串常量池\" class=\"headerlink\" title=\"五、 字符串常量池\"></a>五、 字符串常量池</h2><p><strong>class常量池：一个class文件只有一个class常量池</strong></p>\n<ul>\n<li><p>字面量：数值型（int、float、long、double）、双引号引起来的字符串值等</p>\n</li>\n<li><p>符号引用：Class、Method、Field等</p>\n</li>\n</ul>\n<p><strong>运行时常量池：一个class对象有一个运行时常量池</strong></p>\n<ul>\n<li><p>字面量：数值型（int、float、long、double）、双引号引起来的字符串值等</p>\n</li>\n<li><p>符号引用：Class、Method、Field等</p>\n</li>\n</ul>\n<p><strong>字符串常量池：全局只有一个字符串常量池</strong></p>\n<ul>\n<li>双引号引起来的字符串值</li>\n</ul>\n<h3 id=\"字符串常量池存储\"><a href=\"#字符串常量池存储\" class=\"headerlink\" title=\"字符串常量池存储\"></a>字符串常量池存储</h3><p>为了提高匹配速度， 即更快的查找某个字符串是否存在于常量池 Java 在设计字符串常量池的时候，还搞了一张StringTable， StringTable里面保存了<strong>字符串的引用</strong>。StringTable类似于HashTable（哈希表）。在JDK1.7+，StringTable可以通过参数指定 -XX:StringTableSize&#x3D;5555</p>\n<h3 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3><blockquote>\n<p>对象使用双引号字符串赋值和使用new String等的区别</p>\n</blockquote>\n<ul>\n<li><p>单独使用””引号创建的字符串都是常量，编译期就已经确定存储到String Pool中。</p>\n</li>\n<li><p>使用new String(“”)创建的对象会存储到heap中，是运行期新创建的。</p>\n</li>\n<li><p>使用只包含常量的字符串连接符如”aa”+”bb”创建的也是常量，编译期就能确定已经存储到StringPool中。</p>\n</li>\n<li><p>使用包含变量的字符串连接如”aa”+s创建的对象是运行期才创建的，存储到heap中。</p>\n</li>\n<li><p>运行期调用String的intern()方法可以向String Pool中动态添加对象</p>\n</li>\n</ul>\n<h2 id=\"六、程序计数器（Program-Counter-Register）\"><a href=\"#六、程序计数器（Program-Counter-Register）\" class=\"headerlink\" title=\"六、程序计数器（Program Counter Register）\"></a>六、程序计数器（Program Counter Register）</h2><blockquote>\n<p>PC 寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码</p>\n</blockquote>\n<ul>\n<li><p>它是一块很小的内存空间，几乎可以忽略不记。也是运算速度最快的存储区域。</p>\n</li>\n<li><p>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p>\n</li>\n<li><p>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。程序计数器会存储当前线程正在执行的 Java 方法的 JVM 指令地址；或者，如果是在执行 native方法，则是未指定值（undefined）（因为PC寄存器是java层面的，本地方法栈是C&#x2F;C++层面的）。</p>\n</li>\n<li><p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成；</p>\n</li>\n<li><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令；</p>\n</li>\n<li><p>它是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p>\n</li>\n</ul>\n<h3 id=\"为什么要设置成-线程私有的-？\"><a href=\"#为什么要设置成-线程私有的-？\" class=\"headerlink\" title=\"为什么要设置成 线程私有的 ？\"></a>为什么要设置成 线程私有的 ？</h3><p>CPU需要不停的切换线程，在切换回来的时候，A线程的PC寄存器里就记录了 A线程执行到哪里了 B线程的PC寄存器里就记录了 B线程执行到哪里了，所以需要 是线程私有的。</p>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"JVM","path":"api/categories/JVM.json"}],"tags":[]}