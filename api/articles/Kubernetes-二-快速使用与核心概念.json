{"title":"Kubernetes(二)-快速使用与核心概念","slug":"Kubernetes-二-快速使用与核心概念","date":"2023-06-21T09:25:01.000Z","updated":"2024-04-22T07:21:14.887Z","comments":true,"path":"api/articles/Kubernetes-二-快速使用与核心概念.json","excerpt":" kubectl基础操作、node管理、以及核心概念NameSpace、Pod、Controller、Service","covers":["http://file.hyqup.cn/img/image-20230621172951828.png","http://file.hyqup.cn/img/image-20230621173005878.png"],"content":"<p> kubectl基础操作、node管理、以及核心概念NameSpace、Pod、Controller、Service</p>\n<span id=\"more\"></span>\n\n<h1 id=\"kubectl\"><a href=\"#kubectl\" class=\"headerlink\" title=\"kubectl\"></a>kubectl</h1><h2 id=\"kubectl使用帮助\"><a href=\"#kubectl使用帮助\" class=\"headerlink\" title=\"kubectl使用帮助\"></a>kubectl使用帮助</h2><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-h</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h2 id=\"kubectl命令说明\"><a href=\"#kubectl命令说明\" class=\"headerlink\" title=\"kubectl命令说明\"></a>kubectl命令说明</h2><p><img src=\"http://file.hyqup.cn/img/image-20230621172951828.png\" alt=\"image-20230621172951828\"></p>\n<p><img src=\"http://file.hyqup.cn/img/image-20230621173005878.png\" alt=\"image-20230621173005878\"></p>\n<h2 id=\"kubectl命令补全\"><a href=\"#kubectl命令补全\" class=\"headerlink\" title=\"kubectl命令补全\"></a>kubectl命令补全</h2><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> bash-completion\n<span class=\"token builtin class-name\">source</span> /usr/share/bash-completion/bash_completion\n<span class=\"token builtin class-name\">source</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>kubectl completion <span class=\"token function\">bash</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h1 id=\"node相关命令\"><a href=\"#node相关命令\" class=\"headerlink\" title=\"node相关命令\"></a>node相关命令</h1><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看集群信息</span>\nkubectl cluster-info\n<span class=\"token comment\">#查看集群节点信息</span>\nkubectl get nodes\n<span class=\"token comment\">#集群节点信息</span>\nkubectl get nodes <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\">#查看节点描述详细信息</span>\nkubectl describe <span class=\"token function\">node</span> xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p><strong>给节点打标签</strong> lable</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#设置节点标签,标签以key val的形式</span>\nkubectl label <span class=\"token function\">node</span> xxx  <span class=\"token assign-left variable\">key</span><span class=\"token operator\">=</span>val\n<span class=\"token comment\">#查看所有节点标签</span>\nkubectl get <span class=\"token function\">node</span> --show-labels<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h1 id=\"声明式文件yaml\"><a href=\"#声明式文件yaml\" class=\"headerlink\" title=\"声明式文件yaml\"></a>声明式文件yaml</h1><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>version</td>\n<td>String</td>\n<td>这里是指的是K8S API的版本，目前基本上是v1，可以用 kubectl api-versions命令查询</td>\n</tr>\n<tr>\n<td>kind</td>\n<td>String</td>\n<td>这里指的是yam文件定义的资源类型和角色，比如:Pod</td>\n</tr>\n<tr>\n<td>metadata</td>\n<td>Object</td>\n<td>元数据对象，固定值就写 metadata</td>\n</tr>\n<tr>\n<td>metadata.name</td>\n<td>String</td>\n<td>元数据对象的名字，这里由我们编写，比如命名Pod的名字</td>\n</tr>\n<tr>\n<td>metadata.namespace</td>\n<td>String</td>\n<td>元数据对象的命名空间，由我们自身定义</td>\n</tr>\n<tr>\n<td>Spec</td>\n<td>Object</td>\n<td>详细定义对象，固定值就写Spec</td>\n</tr>\n<tr>\n<td>spec. containers[]</td>\n<td>list</td>\n<td>这里是Spec对象的容器列表定义，是个列表</td>\n</tr>\n<tr>\n<td>spec containers [].name</td>\n<td>String</td>\n<td>这里定义容器的名字</td>\n</tr>\n<tr>\n<td>spec.containers [].image</td>\n<td>String</td>\n<td>这里定义要用到的镜像名称</td>\n</tr>\n<tr>\n<td>spec.containers [].imagePullPolicy</td>\n<td>String</td>\n<td>定义镜像拉取策路，有 Always、 Never、Ifnotpresent三个值可选：(1) Always:意思是每次都尝试重新拉取镜像；(2) Never:表示仅使用本地镜像；(3) IfNotPresent:如果本地有镜像就使用本地镜像，没有就拉取在线镜像。上面三个值都没设置的话，默认是 Always。</td>\n</tr>\n<tr>\n<td>spec containers [].command[]</td>\n<td>List</td>\n<td>指定容器启动命令，因为是数组可以指定多个。不指定则使用镜像打包时使用的启动命令。</td>\n</tr>\n<tr>\n<td>spec.containers [].args</td>\n<td>List</td>\n<td>指定容器启动命令参数，因为是数组可以指定多个.</td>\n</tr>\n<tr>\n<td>spec.containers [].workDir</td>\n<td>String</td>\n<td>指定容器的工作目录</td>\n</tr>\n<tr>\n<td>spec.containers[]. volumeMounts[]</td>\n<td>List</td>\n<td>指定容器内部的存储卷配置</td>\n</tr>\n<tr>\n<td>spec.containers[]. volumeMounts[].name</td>\n<td>String</td>\n<td>指定可以被容器挂载的存储卷的名称</td>\n</tr>\n<tr>\n<td>spec.containers[]. volumeMounts[].mountPath</td>\n<td>String</td>\n<td>指定可以被容器挂载的存储卷的路径</td>\n</tr>\n<tr>\n<td>spec.containers[]. volumeMounts[].readOnly</td>\n<td>String</td>\n<td>设置存储卷路径的读写模式，ture或者 false，默认为读写模式</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[]</td>\n<td>String</td>\n<td>指容器需要用到的端口列表</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[].name</td>\n<td>String</td>\n<td>指定端口名称</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[].containerPort</td>\n<td>String</td>\n<td>指定容器需要监听的端口号</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[].hostPort</td>\n<td>String</td>\n<td>指定容器所在主机需要监听的端口号，默认跟上面 containerPort相同，注意设置了 hostPort同一台主机无法启动该容器的相同副本(因为主机的端口号不能相同，这样会冲突)</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[].protocol</td>\n<td>String</td>\n<td>指定端口协议，支持TCP和UDP，默认值为TCP</td>\n</tr>\n<tr>\n<td>spec.containers [].env[]</td>\n<td>List</td>\n<td>指定容器运行前需设的环境变量列表</td>\n</tr>\n<tr>\n<td>spec.containers [].env[].name</td>\n<td>String</td>\n<td>指定环境变量名称</td>\n</tr>\n<tr>\n<td>spec.containers [].env[].value</td>\n<td>String</td>\n<td>指定环境变量值</td>\n</tr>\n<tr>\n<td>spec.containers[].resources</td>\n<td>Object</td>\n<td>指定资源 限制和资源请求的值（这里开始就是设置容器的资源上限）</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.limits</td>\n<td>Object</td>\n<td>指定设置容器运行时资源的运行上限</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.limits.cpu</td>\n<td>String</td>\n<td>指定CPU限制，单位为core数，将用于docker run – cpu-shares参数</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.limits.memory</td>\n<td>String</td>\n<td>指定MEM内存的限制，单位为MiB、GiB</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.requests</td>\n<td>Object</td>\n<td>指定容器启动和调度时的限制设置</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.requests.cpu</td>\n<td>String</td>\n<td>CPU请求，单位为core数，容器启动时初始化可用数量</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.requests.memory</td>\n<td>String</td>\n<td>内存请求，单位为MiB、GiB，容器启动时初始化可用数量</td>\n</tr>\n<tr>\n<td>sepc.restartPolicy</td>\n<td>String</td>\n<td>定义Pod的重启策略，可选值为Always、OnFailure,默认值为Always。1.Always:Pod一旦终止运行，则无论容器时如何终止的，kubelet服务都将重启它。2.OnFailure:只有Pod以非零退出码终止时，kubelet才会重启该容器。如果容器正常结束（退出码为0），则kubelet将不会重启它。3.Never:Pod终止后，kubelet将退出码报告给Master,不会重启该Pod。</td>\n</tr>\n<tr>\n<td>spec.nodeSelector</td>\n<td>Object</td>\n<td>定义Node的Label过滤标签，以key:value格式指定。</td>\n</tr>\n<tr>\n<td>spec.imagePullSecrets</td>\n<td>Object</td>\n<td>定义pull镜像时使用secret名称，以name:secretkey格式指定。</td>\n</tr>\n<tr>\n<td>spec.hostNetwork</td>\n<td>Boolean</td>\n<td>定义是否使用主机网络模式，默认值为false。设置true表示使用宿主机网络，不使用docker网桥，同时设置了true将无法在同一台宿主机上启动第二个副本。</td>\n</tr>\n</tbody></table>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看子段的配置说明</span>\nkubectl explain xxx\n<span class=\"token comment\">#eg:kubectl explain metadata</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"创建Namespace\"><a href=\"#创建Namespace\" class=\"headerlink\" title=\"创建Namespace\"></a>创建Namespace</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Namespace\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"创建pod\"><a href=\"#创建pod\" class=\"headerlink\" title=\"创建pod\"></a>创建pod</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h1 id=\"集群命名空间-Namespace\"><a href=\"#集群命名空间-Namespace\" class=\"headerlink\" title=\"集群命名空间-Namespace\"></a>集群命名空间-Namespace</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>Namespace是对一组资源和对象的抽象集合.</li>\n<li>常见的 pod, service, deployment 等都是属于某一个namespace的（默认是 default）</li>\n<li>不是所有资源都属于namespace，如nodes, persistent volume，namespace 等资源则不属于任何 namespace</li>\n</ul>\n<h2 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h2><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#获取namespace</span>\nkubectl get namespaces\n<span class=\"token comment\">#获取一个namespace下面的所有资源</span>\nkubectl get all <span class=\"token parameter variable\">--namespace</span><span class=\"token operator\">=</span>xx\n<span class=\"token comment\"># eg: kubectl get pod --namespace=kube-system</span>\n\n<span class=\"token comment\"># 获取某一种类型,这里xx 可以pod等</span>\nkubectl get xx <span class=\"token parameter variable\">--namespace</span><span class=\"token operator\">=</span>yyy\n<span class=\"token comment\"># eg: kubectl get pod --namespace=kube-system</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>命令行</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#命令行创建</span>\nkubectl create namespace xxx\n<span class=\"token comment\">#获取namespace</span>\nkubectl get ns<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>YAML文件创建</p>\n<p>ns.yaml</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\t\t\t\t\t\t\t<span class=\"token comment\"># api版本号</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Namespace\t\t\t\t\t\t\t<span class=\"token comment\"># 类型为namespace</span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\t\t\t\t\t\t\t\t<span class=\"token comment\"># 定义namespace的元数据属性</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ns2\t\t\t\t\t    \t\t<span class=\"token comment\"># 定义name属性为ns2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> ns.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></div></figure>\n\n<h1 id=\"核心概念概述\"><a href=\"#核心概念概述\" class=\"headerlink\" title=\"核心概念概述\"></a>核心概念概述</h1><ul>\n<li><strong>Pod</strong>:是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元</li>\n<li><strong>Controller</strong>:用于管理和运行Pod的对象，控制器通过监控集群的公共状态，并致力于将当前状态转变为期望的状态</li>\n<li><strong>Label</strong>：附着到object上（例如Pod）的键值对。可以在创建object的时候指定，也可以在object创建后随时指定。Labels的值对系统本身并没有什么含义，只是对用户才有意义。</li>\n<li><strong>Service</strong>:将运行在一组 Pods上的应用程序公开为网络服务的抽象方法</li>\n</ul>\n","more":"<h1 id=\"kubectl\"><a href=\"#kubectl\" class=\"headerlink\" title=\"kubectl\"></a>kubectl</h1><h2 id=\"kubectl使用帮助\"><a href=\"#kubectl使用帮助\" class=\"headerlink\" title=\"kubectl使用帮助\"></a>kubectl使用帮助</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-h</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"kubectl命令说明\"><a href=\"#kubectl命令说明\" class=\"headerlink\" title=\"kubectl命令说明\"></a>kubectl命令说明</h2><p><img src=\"http://file.hyqup.cn/img/image-20230621172951828.png\" alt=\"image-20230621172951828\"></p>\n<p><img src=\"http://file.hyqup.cn/img/image-20230621173005878.png\" alt=\"image-20230621173005878\"></p>\n<h2 id=\"kubectl命令补全\"><a href=\"#kubectl命令补全\" class=\"headerlink\" title=\"kubectl命令补全\"></a>kubectl命令补全</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> bash-completion\n<span class=\"token builtin class-name\">source</span> /usr/share/bash-completion/bash_completion\n<span class=\"token builtin class-name\">source</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>kubectl completion <span class=\"token function\">bash</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"node相关命令\"><a href=\"#node相关命令\" class=\"headerlink\" title=\"node相关命令\"></a>node相关命令</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看集群信息</span>\nkubectl cluster-info\n<span class=\"token comment\">#查看集群节点信息</span>\nkubectl get nodes\n<span class=\"token comment\">#集群节点信息</span>\nkubectl get nodes <span class=\"token parameter variable\">-o</span> wide\n<span class=\"token comment\">#查看节点描述详细信息</span>\nkubectl describe <span class=\"token function\">node</span> xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>给节点打标签</strong> lable</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#设置节点标签,标签以key val的形式</span>\nkubectl label <span class=\"token function\">node</span> xxx  <span class=\"token assign-left variable\">key</span><span class=\"token operator\">=</span>val\n<span class=\"token comment\">#查看所有节点标签</span>\nkubectl get <span class=\"token function\">node</span> --show-labels<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"声明式文件yaml\"><a href=\"#声明式文件yaml\" class=\"headerlink\" title=\"声明式文件yaml\"></a>声明式文件yaml</h1><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>version</td>\n<td>String</td>\n<td>这里是指的是K8S API的版本，目前基本上是v1，可以用 kubectl api-versions命令查询</td>\n</tr>\n<tr>\n<td>kind</td>\n<td>String</td>\n<td>这里指的是yam文件定义的资源类型和角色，比如:Pod</td>\n</tr>\n<tr>\n<td>metadata</td>\n<td>Object</td>\n<td>元数据对象，固定值就写 metadata</td>\n</tr>\n<tr>\n<td>metadata.name</td>\n<td>String</td>\n<td>元数据对象的名字，这里由我们编写，比如命名Pod的名字</td>\n</tr>\n<tr>\n<td>metadata.namespace</td>\n<td>String</td>\n<td>元数据对象的命名空间，由我们自身定义</td>\n</tr>\n<tr>\n<td>Spec</td>\n<td>Object</td>\n<td>详细定义对象，固定值就写Spec</td>\n</tr>\n<tr>\n<td>spec. containers[]</td>\n<td>list</td>\n<td>这里是Spec对象的容器列表定义，是个列表</td>\n</tr>\n<tr>\n<td>spec containers [].name</td>\n<td>String</td>\n<td>这里定义容器的名字</td>\n</tr>\n<tr>\n<td>spec.containers [].image</td>\n<td>String</td>\n<td>这里定义要用到的镜像名称</td>\n</tr>\n<tr>\n<td>spec.containers [].imagePullPolicy</td>\n<td>String</td>\n<td>定义镜像拉取策路，有 Always、 Never、Ifnotpresent三个值可选：(1) Always:意思是每次都尝试重新拉取镜像；(2) Never:表示仅使用本地镜像；(3) IfNotPresent:如果本地有镜像就使用本地镜像，没有就拉取在线镜像。上面三个值都没设置的话，默认是 Always。</td>\n</tr>\n<tr>\n<td>spec containers [].command[]</td>\n<td>List</td>\n<td>指定容器启动命令，因为是数组可以指定多个。不指定则使用镜像打包时使用的启动命令。</td>\n</tr>\n<tr>\n<td>spec.containers [].args</td>\n<td>List</td>\n<td>指定容器启动命令参数，因为是数组可以指定多个.</td>\n</tr>\n<tr>\n<td>spec.containers [].workDir</td>\n<td>String</td>\n<td>指定容器的工作目录</td>\n</tr>\n<tr>\n<td>spec.containers[]. volumeMounts[]</td>\n<td>List</td>\n<td>指定容器内部的存储卷配置</td>\n</tr>\n<tr>\n<td>spec.containers[]. volumeMounts[].name</td>\n<td>String</td>\n<td>指定可以被容器挂载的存储卷的名称</td>\n</tr>\n<tr>\n<td>spec.containers[]. volumeMounts[].mountPath</td>\n<td>String</td>\n<td>指定可以被容器挂载的存储卷的路径</td>\n</tr>\n<tr>\n<td>spec.containers[]. volumeMounts[].readOnly</td>\n<td>String</td>\n<td>设置存储卷路径的读写模式，ture或者 false，默认为读写模式</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[]</td>\n<td>String</td>\n<td>指容器需要用到的端口列表</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[].name</td>\n<td>String</td>\n<td>指定端口名称</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[].containerPort</td>\n<td>String</td>\n<td>指定容器需要监听的端口号</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[].hostPort</td>\n<td>String</td>\n<td>指定容器所在主机需要监听的端口号，默认跟上面 containerPort相同，注意设置了 hostPort同一台主机无法启动该容器的相同副本(因为主机的端口号不能相同，这样会冲突)</td>\n</tr>\n<tr>\n<td>spec.containers [].ports[].protocol</td>\n<td>String</td>\n<td>指定端口协议，支持TCP和UDP，默认值为TCP</td>\n</tr>\n<tr>\n<td>spec.containers [].env[]</td>\n<td>List</td>\n<td>指定容器运行前需设的环境变量列表</td>\n</tr>\n<tr>\n<td>spec.containers [].env[].name</td>\n<td>String</td>\n<td>指定环境变量名称</td>\n</tr>\n<tr>\n<td>spec.containers [].env[].value</td>\n<td>String</td>\n<td>指定环境变量值</td>\n</tr>\n<tr>\n<td>spec.containers[].resources</td>\n<td>Object</td>\n<td>指定资源 限制和资源请求的值（这里开始就是设置容器的资源上限）</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.limits</td>\n<td>Object</td>\n<td>指定设置容器运行时资源的运行上限</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.limits.cpu</td>\n<td>String</td>\n<td>指定CPU限制，单位为core数，将用于docker run – cpu-shares参数</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.limits.memory</td>\n<td>String</td>\n<td>指定MEM内存的限制，单位为MiB、GiB</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.requests</td>\n<td>Object</td>\n<td>指定容器启动和调度时的限制设置</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.requests.cpu</td>\n<td>String</td>\n<td>CPU请求，单位为core数，容器启动时初始化可用数量</td>\n</tr>\n<tr>\n<td>spec.containers[].resources.requests.memory</td>\n<td>String</td>\n<td>内存请求，单位为MiB、GiB，容器启动时初始化可用数量</td>\n</tr>\n<tr>\n<td>sepc.restartPolicy</td>\n<td>String</td>\n<td>定义Pod的重启策略，可选值为Always、OnFailure,默认值为Always。1.Always:Pod一旦终止运行，则无论容器时如何终止的，kubelet服务都将重启它。2.OnFailure:只有Pod以非零退出码终止时，kubelet才会重启该容器。如果容器正常结束（退出码为0），则kubelet将不会重启它。3.Never:Pod终止后，kubelet将退出码报告给Master,不会重启该Pod。</td>\n</tr>\n<tr>\n<td>spec.nodeSelector</td>\n<td>Object</td>\n<td>定义Node的Label过滤标签，以key:value格式指定。</td>\n</tr>\n<tr>\n<td>spec.imagePullSecrets</td>\n<td>Object</td>\n<td>定义pull镜像时使用secret名称，以name:secretkey格式指定。</td>\n</tr>\n<tr>\n<td>spec.hostNetwork</td>\n<td>Boolean</td>\n<td>定义是否使用主机网络模式，默认值为false。设置true表示使用宿主机网络，不使用docker网桥，同时设置了true将无法在同一台宿主机上启动第二个副本。</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看子段的配置说明</span>\nkubectl explain xxx\n<span class=\"token comment\">#eg:kubectl explain metadata</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"创建Namespace\"><a href=\"#创建Namespace\" class=\"headerlink\" title=\"创建Namespace\"></a>创建Namespace</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Namespace\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"创建pod\"><a href=\"#创建pod\" class=\"headerlink\" title=\"创建pod\"></a>创建pod</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pod\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"集群命名空间-Namespace\"><a href=\"#集群命名空间-Namespace\" class=\"headerlink\" title=\"集群命名空间-Namespace\"></a>集群命名空间-Namespace</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>Namespace是对一组资源和对象的抽象集合.</li>\n<li>常见的 pod, service, deployment 等都是属于某一个namespace的（默认是 default）</li>\n<li>不是所有资源都属于namespace，如nodes, persistent volume，namespace 等资源则不属于任何 namespace</li>\n</ul>\n<h2 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#获取namespace</span>\nkubectl get namespaces\n<span class=\"token comment\">#获取一个namespace下面的所有资源</span>\nkubectl get all <span class=\"token parameter variable\">--namespace</span><span class=\"token operator\">=</span>xx\n<span class=\"token comment\"># eg: kubectl get pod --namespace=kube-system</span>\n\n<span class=\"token comment\"># 获取某一种类型,这里xx 可以pod等</span>\nkubectl get xx <span class=\"token parameter variable\">--namespace</span><span class=\"token operator\">=</span>yyy\n<span class=\"token comment\"># eg: kubectl get pod --namespace=kube-system</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h2><p>命令行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#命令行创建</span>\nkubectl create namespace xxx\n<span class=\"token comment\">#获取namespace</span>\nkubectl get ns<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>YAML文件创建</p>\n<p>ns.yaml</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\t\t\t\t\t\t\t<span class=\"token comment\"># api版本号</span>\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Namespace\t\t\t\t\t\t\t<span class=\"token comment\"># 类型为namespace</span>\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\t\t\t\t\t\t\t\t<span class=\"token comment\"># 定义namespace的元数据属性</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ns2\t\t\t\t\t    \t\t<span class=\"token comment\"># 定义name属性为ns2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> ns.yml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"核心概念概述\"><a href=\"#核心概念概述\" class=\"headerlink\" title=\"核心概念概述\"></a>核心概念概述</h1><ul>\n<li><strong>Pod</strong>:是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元</li>\n<li><strong>Controller</strong>:用于管理和运行Pod的对象，控制器通过监控集群的公共状态，并致力于将当前状态转变为期望的状态</li>\n<li><strong>Label</strong>：附着到object上（例如Pod）的键值对。可以在创建object的时候指定，也可以在object创建后随时指定。Labels的值对系统本身并没有什么含义，只是对用户才有意义。</li>\n<li><strong>Service</strong>:将运行在一组 Pods上的应用程序公开为网络服务的抽象方法</li>\n</ul>","categories":[],"tags":[]}