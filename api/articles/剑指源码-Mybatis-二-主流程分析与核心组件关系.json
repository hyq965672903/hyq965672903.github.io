{"title":"剑指源码-Mybatis-(二)-主流程分析与核心组件关系","slug":"剑指源码-Mybatis-二-主流程分析与核心组件关系","date":"2022-08-11T12:54:29.000Z","updated":"2024-04-22T07:21:14.891Z","comments":true,"path":"api/articles/剑指源码-Mybatis-二-主流程分析与核心组件关系.json","excerpt":" demo整体流程概述，分析核心组件的作用以及关系","covers":null,"content":"<p> demo整体流程概述，分析核心组件的作用以及关系</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>demo地址：<a href=\"https://github.com/hyq965672903/sourcecode-learn-mybatis.git\">https://github.com/hyq965672903/sourcecode-learn-mybatis.git</a></p>\n</blockquote>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 使用MyBatis API方式\n * @throws IOException\n */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.hyqup.mapper.UserMapper.selectAll\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/**\n * 通过 SqlSession.getMapper(XXXMapper.class)  接口方式\n */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ExecutorType.BATCH</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h2 id=\"整体流程分析\"><a href=\"#整体流程分析\" class=\"headerlink\" title=\"整体流程分析\"></a>整体流程分析</h2><blockquote>\n<p> 通过 SqlSession.getMapper(XXXMapper.class)  接口方式为例，流程分析</p>\n</blockquote>\n<h3 id=\"创建SqlSessionFactory的过程\"><a href=\"#创建SqlSessionFactory的过程\" class=\"headerlink\" title=\"创建SqlSessionFactory的过程\"></a>创建SqlSessionFactory的过程</h3><ol>\n<li><p>首先根据mybatis-config.xml创建一个<code>inputStream</code></p>\n</li>\n<li><p>然后new一个SqlSessionFactoryBuilder对象，使用inputStream调用build方法得到<code>SqlSessionFactory</code>对象</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> inputStream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> environment<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Properties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">XMLConfigBuilder</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLConfigBuilder</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">ExceptionFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrapException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error building SqlSession.\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ErrorContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputStream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Intentionally ignore. Prefer previous error.</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n</li>\n<li><p><code>XMLConfigBuilder</code>创建的parser解析器对象，会去解析每一个xml节点信息，对应的相关配置信息保存在一个<code>Configuration</code>对象中</p>\n</li>\n<li><p>同时这个时候会解析到mapper信息，<code>XMLConfigBuilder</code>内部构建了一个<code>XMLMapperBuilder</code>，<code>XMLMapperBuilder</code>对象会将mappper信息解析到<code>Configuration</code>的<code>mappedStatements</code>这个Map对象中。<strong>而这个<code>mappedStatements</code>包含多个<code>MappedStatement</code>，<code>MappedStatement</code>中包含了mapper中每一个标签信息</strong></p>\n</li>\n<li><p>解析完mapper之后，将mapper的信息放入<code>Configuration</code>对象中，返回<code>Configuration</code>对象</p>\n</li>\n<li><p>build中传入的Configuration对象被用来创建了一个<code>DefaultSqlSessionFactory</code>对象。<u><strong>创建sqlSessionFactory所做的工作就是，将所有配置文件的信息解析并且保存在Configuration对象中，返回包含了Configuration对象的DefaultSqlSessionFactory对象。</strong></u></p>\n</li>\n</ol>\n<h3 id=\"获取sqlSession对象的过程\"><a href=\"#获取sqlSession对象的过程\" class=\"headerlink\" title=\"获取sqlSession对象的过程\"></a>获取sqlSession对象的过程</h3><ol>\n<li>首先调用<code>DefaultSqlSessionFactory</code>的<code>openSession</code>()方法</li>\n<li>openSession里面调用<code>openSessionFromDataSource</code>(configuration.getDefaultExecutorType(), null, false)方法</li>\n<li><code>openSessionFromDataSource</code>里面会创建Transaction一个事务，同时会创建一个Executor对象</li>\n<li>根据<code>Executor</code>在全局配置中的类型（目前类型有3种，simple，batch，reuse），创建出SimpleExecutor、<code>ReuseExecutor</code>或者<code>BatchExecutor</code>。Executor是一个接口，里面规定了一些增删改查的接口方法。默认就是simple类型</li>\n<li>如果开启了二级缓存，会通过CacheExecutor对Executor进行包装，CacheExecutor本质就是<strong>装饰者模式</strong></li>\n<li>executor &#x3D; (Executor) interceptorChain.pluginAll(executor)，pluginAll方法会拿到每一个拦截器的plugin方法包装一下executor，开发插件就是这里织入</li>\n<li>最后创建DefaultSqlSession并返回</li>\n</ol>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">SqlSession</span> <span class=\"token function\">openSessionFromDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutorType</span> execType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransactionIsolationLevel</span> level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> autoCommit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Transaction</span> tx <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Environment</span> environment <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">TransactionFactory</span> transactionFactory <span class=\"token operator\">=</span> <span class=\"token function\">getTransactionFactoryFromEnvironment</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tx <span class=\"token operator\">=</span> transactionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newTransaction</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> autoCommit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//这里去创建Executor</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Executor</span> executor <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">newExecutor</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> execType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultSqlSession</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">,</span> executor<span class=\"token punctuation\">,</span> autoCommit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">closeTransaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// may have fetched a connection so lets call close()</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">ExceptionFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrapException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error opening session.  Cause: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ErrorContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<p>创建Executor代码逻辑</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Executor</span> <span class=\"token function\">newExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transaction</span> transaction<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutorType</span> executorType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  executorType <span class=\"token operator\">=</span> executorType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> defaultExecutorType <span class=\"token operator\">:</span> executorType<span class=\"token punctuation\">;</span>\n  executorType <span class=\"token operator\">=</span> executorType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">ExecutorType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE</span> <span class=\"token operator\">:</span> executorType<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Executor</span> executor<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutorType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BATCH</span> <span class=\"token operator\">==</span> executorType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BatchExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutorType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REUSE</span> <span class=\"token operator\">==</span> executorType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReuseExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cacheEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CachingExecutor</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  executor <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Executor</span><span class=\"token punctuation\">)</span> interceptorChain<span class=\"token punctuation\">.</span><span class=\"token function\">pluginAll</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> executor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<h3 id=\"获取Mapper的代理对象（MapperProxy）的过程\"><a href=\"#获取Mapper的代理对象（MapperProxy）的过程\" class=\"headerlink\" title=\"获取Mapper的代理对象（MapperProxy）的过程\"></a>获取Mapper的代理对象（MapperProxy）的过程</h3><ol>\n<li>调用<code>DefaultSqlSession</code>对象的getMapper(type)方法。（type是Mapper接口的class，例如XXXMapper.class）</li>\n<li>进一步里面会调用<code>configuration</code>.getMapper(type,sqlSession),调用<code>configuration</code>对象中<code>mapperRegistry</code>的getMapper</li>\n<li>然后根据class类型获取<code>MapperProxyFactory</code>，调用其<code>newInstance</code>，进而使用<code>MapperProxy</code>动态代理创建代理对象，并返回</li>\n</ol>\n<h3 id=\"执行增删改查方法的过程\"><a href=\"#执行增删改查方法的过程\" class=\"headerlink\" title=\"执行增删改查方法的过程\"></a>执行增删改查方法的过程</h3><ol>\n<li><p><code>Mapper</code>都是接口，所以最终执行都会执行到<code>MapperProxy</code>的<code>invoke</code>方法</p>\n</li>\n<li><p><code>MapperProxy</code>的invoke会执行<code>MapperMethod</code>的execute，execute方法会判断当前要执行的sql语句的类型</p>\n</li>\n<li><p>当前是selectAll，于是执行到<code>executeForMany</code>方法，进而<code>sqlSession</code>执行到selectList方法</p>\n</li>\n<li><p>selectList方法中获取<code>MappedStatement</code>对象，调用<code>executor</code>(CachingExecutor)执行query</p>\n</li>\n<li><p>获取BoundSql对象，里面包含sql语句的详细信息。sql语句是什么、sql语句的参数是什么等详细信息</p>\n</li>\n<li><p>调用真正的<code>simpleExecutor</code>的query方法进行查询，query是<code>BaseExecutor</code>中的，真正执行到doQuery方法</p>\n</li>\n<li><p>doQuery里面会创建<code>StatementHandler</code>，默认就是<code>PreparedStatementHandler</code>。<code>StatementHandler</code>被用于创建Statement对象。同时这里<code>StatementHandler</code>会执行interceptorChain的pluginAll进行插件加载</p>\n</li>\n<li><p>在<code>StatementHandler</code>会调用父类<code>BaseStatementHandler</code>的构造方法进一步创建<code>ParameterHandler</code>和<code>ResultSetHandler</code></p>\n<ol>\n<li><code>ParameterHandler</code>用于处理参数设置的 ，设置sql语句的预编译参数</li>\n<li><code>ResultSetHandler</code>用于处理结果返回封装的</li>\n</ol>\n</li>\n<li><p><code>ParameterHandler</code>和<code>ResultsetHandler</code>都会借助<code>TypeHandler</code>来进行数据库类型和Java Bean类型的转换</p>\n</li>\n<li><p><code>ParameterHandler</code>设置参数的时候是调用的<code>TypeHandler</code>给sql预编译设置参数</p>\n</li>\n<li><p>查出数据之后，使用<code>ResultHandler</code>处理结果，里面也是使用<code>TypeHandler</code>包装value值</p>\n</li>\n<li><p>后续操作完成数据库连接相关</p>\n</li>\n<li><p>流程结束</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Executor、ParameterHandler、ResultsetHandler、TypeHandler四大对象</strong>之间的关系</p>\n<p>Executor用于执行增删改查操作；StatementHandler用ParameterHandler设置参数；使用ResultsetHandler处理结果；过程中又采用TypeHandler来实现数据库类型和JavaBean类型之间的转换</p>\n</blockquote>\n","more":"<blockquote>\n<p>demo地址：<a href=\"https://github.com/hyq965672903/sourcecode-learn-mybatis.git\">https://github.com/hyq965672903/sourcecode-learn-mybatis.git</a></p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 使用MyBatis API方式\n * @throws IOException\n */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.hyqup.mapper.UserMapper.selectAll\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/**\n * 通过 SqlSession.getMapper(XXXMapper.class)  接口方式\n */</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ExecutorType.BATCH</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"整体流程分析\"><a href=\"#整体流程分析\" class=\"headerlink\" title=\"整体流程分析\"></a>整体流程分析</h2><blockquote>\n<p> 通过 SqlSession.getMapper(XXXMapper.class)  接口方式为例，流程分析</p>\n</blockquote>\n<h3 id=\"创建SqlSessionFactory的过程\"><a href=\"#创建SqlSessionFactory的过程\" class=\"headerlink\" title=\"创建SqlSessionFactory的过程\"></a>创建SqlSessionFactory的过程</h3><ol>\n<li><p>首先根据mybatis-config.xml创建一个<code>inputStream</code></p>\n</li>\n<li><p>然后new一个SqlSessionFactoryBuilder对象，使用inputStream调用build方法得到<code>SqlSessionFactory</code>对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> inputStream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> environment<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Properties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">XMLConfigBuilder</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLConfigBuilder</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">ExceptionFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrapException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error building SqlSession.\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ErrorContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputStream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// Intentionally ignore. Prefer previous error.</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>XMLConfigBuilder</code>创建的parser解析器对象，会去解析每一个xml节点信息，对应的相关配置信息保存在一个<code>Configuration</code>对象中</p>\n</li>\n<li><p>同时这个时候会解析到mapper信息，<code>XMLConfigBuilder</code>内部构建了一个<code>XMLMapperBuilder</code>，<code>XMLMapperBuilder</code>对象会将mappper信息解析到<code>Configuration</code>的<code>mappedStatements</code>这个Map对象中。<strong>而这个<code>mappedStatements</code>包含多个<code>MappedStatement</code>，<code>MappedStatement</code>中包含了mapper中每一个标签信息</strong></p>\n</li>\n<li><p>解析完mapper之后，将mapper的信息放入<code>Configuration</code>对象中，返回<code>Configuration</code>对象</p>\n</li>\n<li><p>build中传入的Configuration对象被用来创建了一个<code>DefaultSqlSessionFactory</code>对象。<u><strong>创建sqlSessionFactory所做的工作就是，将所有配置文件的信息解析并且保存在Configuration对象中，返回包含了Configuration对象的DefaultSqlSessionFactory对象。</strong></u></p>\n</li>\n</ol>\n<h3 id=\"获取sqlSession对象的过程\"><a href=\"#获取sqlSession对象的过程\" class=\"headerlink\" title=\"获取sqlSession对象的过程\"></a>获取sqlSession对象的过程</h3><ol>\n<li>首先调用<code>DefaultSqlSessionFactory</code>的<code>openSession</code>()方法</li>\n<li>openSession里面调用<code>openSessionFromDataSource</code>(configuration.getDefaultExecutorType(), null, false)方法</li>\n<li><code>openSessionFromDataSource</code>里面会创建Transaction一个事务，同时会创建一个Executor对象</li>\n<li>根据<code>Executor</code>在全局配置中的类型（目前类型有3种，simple，batch，reuse），创建出SimpleExecutor、<code>ReuseExecutor</code>或者<code>BatchExecutor</code>。Executor是一个接口，里面规定了一些增删改查的接口方法。默认就是simple类型</li>\n<li>如果开启了二级缓存，会通过CacheExecutor对Executor进行包装，CacheExecutor本质就是<strong>装饰者模式</strong></li>\n<li>executor &#x3D; (Executor) interceptorChain.pluginAll(executor)，pluginAll方法会拿到每一个拦截器的plugin方法包装一下executor，开发插件就是这里织入</li>\n<li>最后创建DefaultSqlSession并返回</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">SqlSession</span> <span class=\"token function\">openSessionFromDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutorType</span> execType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransactionIsolationLevel</span> level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> autoCommit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Transaction</span> tx <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Environment</span> environment <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">TransactionFactory</span> transactionFactory <span class=\"token operator\">=</span> <span class=\"token function\">getTransactionFactoryFromEnvironment</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tx <span class=\"token operator\">=</span> transactionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newTransaction</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> autoCommit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//这里去创建Executor</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Executor</span> executor <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">newExecutor</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> execType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultSqlSession</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">,</span> executor<span class=\"token punctuation\">,</span> autoCommit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">closeTransaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// may have fetched a connection so lets call close()</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">ExceptionFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrapException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error opening session.  Cause: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ErrorContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建Executor代码逻辑</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Executor</span> <span class=\"token function\">newExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transaction</span> transaction<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutorType</span> executorType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  executorType <span class=\"token operator\">=</span> executorType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> defaultExecutorType <span class=\"token operator\">:</span> executorType<span class=\"token punctuation\">;</span>\n  executorType <span class=\"token operator\">=</span> executorType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">ExecutorType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIMPLE</span> <span class=\"token operator\">:</span> executorType<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Executor</span> executor<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutorType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BATCH</span> <span class=\"token operator\">==</span> executorType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BatchExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExecutorType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REUSE</span> <span class=\"token operator\">==</span> executorType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReuseExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cacheEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CachingExecutor</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  executor <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Executor</span><span class=\"token punctuation\">)</span> interceptorChain<span class=\"token punctuation\">.</span><span class=\"token function\">pluginAll</span><span class=\"token punctuation\">(</span>executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> executor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"获取Mapper的代理对象（MapperProxy）的过程\"><a href=\"#获取Mapper的代理对象（MapperProxy）的过程\" class=\"headerlink\" title=\"获取Mapper的代理对象（MapperProxy）的过程\"></a>获取Mapper的代理对象（MapperProxy）的过程</h3><ol>\n<li>调用<code>DefaultSqlSession</code>对象的getMapper(type)方法。（type是Mapper接口的class，例如XXXMapper.class）</li>\n<li>进一步里面会调用<code>configuration</code>.getMapper(type,sqlSession),调用<code>configuration</code>对象中<code>mapperRegistry</code>的getMapper</li>\n<li>然后根据class类型获取<code>MapperProxyFactory</code>，调用其<code>newInstance</code>，进而使用<code>MapperProxy</code>动态代理创建代理对象，并返回</li>\n</ol>\n<h3 id=\"执行增删改查方法的过程\"><a href=\"#执行增删改查方法的过程\" class=\"headerlink\" title=\"执行增删改查方法的过程\"></a>执行增删改查方法的过程</h3><ol>\n<li><p><code>Mapper</code>都是接口，所以最终执行都会执行到<code>MapperProxy</code>的<code>invoke</code>方法</p>\n</li>\n<li><p><code>MapperProxy</code>的invoke会执行<code>MapperMethod</code>的execute，execute方法会判断当前要执行的sql语句的类型</p>\n</li>\n<li><p>当前是selectAll，于是执行到<code>executeForMany</code>方法，进而<code>sqlSession</code>执行到selectList方法</p>\n</li>\n<li><p>selectList方法中获取<code>MappedStatement</code>对象，调用<code>executor</code>(CachingExecutor)执行query</p>\n</li>\n<li><p>获取BoundSql对象，里面包含sql语句的详细信息。sql语句是什么、sql语句的参数是什么等详细信息</p>\n</li>\n<li><p>调用真正的<code>simpleExecutor</code>的query方法进行查询，query是<code>BaseExecutor</code>中的，真正执行到doQuery方法</p>\n</li>\n<li><p>doQuery里面会创建<code>StatementHandler</code>，默认就是<code>PreparedStatementHandler</code>。<code>StatementHandler</code>被用于创建Statement对象。同时这里<code>StatementHandler</code>会执行interceptorChain的pluginAll进行插件加载</p>\n</li>\n<li><p>在<code>StatementHandler</code>会调用父类<code>BaseStatementHandler</code>的构造方法进一步创建<code>ParameterHandler</code>和<code>ResultSetHandler</code></p>\n<ol>\n<li><code>ParameterHandler</code>用于处理参数设置的 ，设置sql语句的预编译参数</li>\n<li><code>ResultSetHandler</code>用于处理结果返回封装的</li>\n</ol>\n</li>\n<li><p><code>ParameterHandler</code>和<code>ResultsetHandler</code>都会借助<code>TypeHandler</code>来进行数据库类型和Java Bean类型的转换</p>\n</li>\n<li><p><code>ParameterHandler</code>设置参数的时候是调用的<code>TypeHandler</code>给sql预编译设置参数</p>\n</li>\n<li><p>查出数据之后，使用<code>ResultHandler</code>处理结果，里面也是使用<code>TypeHandler</code>包装value值</p>\n</li>\n<li><p>后续操作完成数据库连接相关</p>\n</li>\n<li><p>流程结束</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Executor、ParameterHandler、ResultsetHandler、TypeHandler四大对象</strong>之间的关系</p>\n<p>Executor用于执行增删改查操作；StatementHandler用ParameterHandler设置参数；使用ResultsetHandler处理结果；过程中又采用TypeHandler来实现数据库类型和JavaBean类型之间的转换</p>\n</blockquote>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"Mybatis源码","path":"api/categories/Mybatis源码.json"}],"tags":[]}