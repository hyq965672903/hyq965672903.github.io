{"title":"Java并发多线程与高并发(六)-线程池","slug":"Java并发多线程与高并发(六)-线程池","date":"2021-04-28T15:50:21.000Z","updated":"2024-04-22T07:21:14.887Z","comments":true,"path":"api/articles/Java并发多线程与高并发(六)-线程池.json","excerpt":"针对性的学习线程池框架 ExecutorService ，包括核心概念，核心参数，创建使用等","covers":null,"content":"<p>针对性的学习线程池框架 ExecutorService ，包括核心概念，核心参数，创建使用等</p>\n<span id=\"more\"></span>\n\n<h2 id=\"创建线程的方式\"><a href=\"#创建线程的方式\" class=\"headerlink\" title=\"创建线程的方式\"></a>创建线程的方式</h2><h3 id=\"继承Thread\"><a href=\"#继承Thread\" class=\"headerlink\" title=\"继承Thread\"></a>继承Thread</h3><ul>\n<li>定义类继承Thread，重写run方法（线程执行的内容），又叫执行体</li>\n<li>创建Thread继承类的实例，调用start()启动线程</li>\n</ul>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/16\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExample1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 重写run方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"继承thread开启线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExample1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n\n\n<h3 id=\"实现Runable\"><a href=\"#实现Runable\" class=\"headerlink\" title=\"实现Runable\"></a>实现Runable</h3><ul>\n<li><p>定义类实现runable，重写run方法（线程执行的内容），又叫执行体</p>\n</li>\n<li><p>创建Runnable实现类的实例, new Thread作为入参传递。得到一个线程对象</p>\n</li>\n<li><p>调用start()启动线程</p>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/16\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExample2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 重写run方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实现Runnable开启线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ThreadExample2</span> threadExample2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExample2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>threadExample2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li>\n</ul>\n<h3 id=\"实现-Callable-，并结合-Future\"><a href=\"#实现-Callable-，并结合-Future\" class=\"headerlink\" title=\"实现 Callable ，并结合 Future\"></a>实现 Callable ，并结合 Future</h3><ul>\n<li>定义Callable接口的实现类，实现call()方法，又叫执行体，并且定义<strong>返回值</strong>类型</li>\n<li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，并且FutureTask返回类型和Callable的返回类型一致</li>\n<li>new Thread，FutureTask做入参得到一个Thread线程对象</li>\n<li>调用Thread的start()方法，执行开启线程</li>\n<li>调用FutureTask对象的get()方法，得到子线程返回值</li>\n</ul>\n<figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FutureTask</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/16\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExample3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ThreadExample3</span> threadExample3 <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExample3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>threadExample3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程返回的值\"</span><span class=\"token operator\">+</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n\n\n<h2 id=\"使用线程池创建线程（这里介绍JDK自带的Executors-）\"><a href=\"#使用线程池创建线程（这里介绍JDK自带的Executors-）\" class=\"headerlink\" title=\"使用线程池创建线程（这里介绍JDK自带的Executors ）\"></a>使用线程池创建线程（这里介绍JDK自带的Executors ）</h2><p>除了上述三种创建线程的方式，我们还可以通过线程池来创建线程</p>\n<h3 id=\"new-Thread-的弊端\"><a href=\"#new-Thread-的弊端\" class=\"headerlink\" title=\"new Thread 的弊端\"></a>new Thread 的弊端</h3><ul>\n<li>每次都new对象，性能差，复用性差</li>\n<li>缺乏线程之间统一管理，造成资源浪费甚至可能内存溢出</li>\n<li>缺乏更多功能，如定时执行、定期执行、线程中断。</li>\n</ul>\n<h3 id=\"线程池的好处\"><a href=\"#线程池的好处\" class=\"headerlink\" title=\"线程池的好处\"></a>线程池的好处</h3><ul>\n<li>重用存在的线程，减少对象创建、消亡的开销，性能佳。</li>\n<li>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</li>\n<li>提供定时执行、定期执行、单线程、并发数控制等功能。</li>\n</ul>\n<h3 id=\"线程池核心概念及参数介绍\"><a href=\"#线程池核心概念及参数介绍\" class=\"headerlink\" title=\"线程池核心概念及参数介绍\"></a>线程池核心概念及参数介绍</h3><figure><div class=\"code-wrapper\"><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">RejectedExecutionHandler</span> handler<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>\n\n<ul>\n<li>corePoolSize(核心线程数)</li>\n<li>maximumPoolSize（最大线程数）</li>\n<li>keepAliveTime（线程活动保持存活时间）</li>\n<li>unit（时间单位）</li>\n<li>workQueue（任务存储队列）<ul>\n<li>SynchronousQueue(直接交接)：没有工作队列缓冲区，每次直接扔到线程去处理，不能处理则抛异常</li>\n<li>LinkedBlockingQueue(无界队列)：队列永远不会满，也就是永远用不上最大线程数</li>\n<li>ArrayBlockingQueue(有界队列)：基于数组结构的有界阻塞队列，遵循先进先出</li>\n</ul>\n</li>\n<li>ThreadFactory（创建线程的工厂）</li>\n<li>handler（拒绝策略）<ul>\n<li>DiscardPolicy：不处理，丢弃掉。</li>\n<li>AbortPolicy：直接抛出异常。</li>\n<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</li>\n<li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"增减线程的特点\"><a href=\"#增减线程的特点\" class=\"headerlink\" title=\"增减线程的特点\"></a>增减线程的特点</h3><h3 id=\"自动创建线程池的风险分析\"><a href=\"#自动创建线程池的风险分析\" class=\"headerlink\" title=\"自动创建线程池的风险分析\"></a>自动创建线程池的风险分析</h3><p> 针对线程池默认的创建线程池的构造方法的分析</p>\n<ul>\n<li><p>newFixedThreadPool</p>\n<p>创建一个<strong>定长</strong>线程池，可控制线程最大并发数，超出的线程会在<strong>队列中等待</strong>。<strong>队列用的是LinkedBlockingQueue（新任务一直向队列中放）</strong></p>\n<p>缺点：容易造成大量内存占用，可能会导致OOM</p>\n</li>\n<li><p>newSingleThreadExector</p>\n<p>创建一个定长为1的线程池。类似于newFixedThreadPool，<strong>队列用的是LinkedBlockingQueue（新任务一直向队列中放）</strong></p>\n<p>缺点：容易造成大量内存占用，可能会导致OOM</p>\n</li>\n<li><p>newCachedThreadPool</p>\n<p>创建一个可缓存线程池，核心数量为0，<strong>最大线程数为整数最大值</strong></p>\n<p>缺点：新来任务直接创建线程执行，也可能造成OOM</p>\n</li>\n<li><p>newScheduledThreadPool</p>\n<p>建一个<strong>定长线程池</strong>，支持定时及周期性任务执行,可以延迟，可以一定频率</p>\n</li>\n</ul>\n<p>总结：正确的线程池的创建应该是手动创建线程池，依据是调研后，根据业务定制</p>\n","more":"<h2 id=\"创建线程的方式\"><a href=\"#创建线程的方式\" class=\"headerlink\" title=\"创建线程的方式\"></a>创建线程的方式</h2><h3 id=\"继承Thread\"><a href=\"#继承Thread\" class=\"headerlink\" title=\"继承Thread\"></a>继承Thread</h3><ul>\n<li>定义类继承Thread，重写run方法（线程执行的内容），又叫执行体</li>\n<li>创建Thread继承类的实例，调用start()启动线程</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/16\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExample1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 重写run方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"继承thread开启线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExample1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"实现Runable\"><a href=\"#实现Runable\" class=\"headerlink\" title=\"实现Runable\"></a>实现Runable</h3><ul>\n<li><p>定义类实现runable，重写run方法（线程执行的内容），又叫执行体</p>\n</li>\n<li><p>创建Runnable实现类的实例, new Thread作为入参传递。得到一个线程对象</p>\n</li>\n<li><p>调用start()启动线程</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/16\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExample2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * 重写run方法\n     */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实现Runnable开启线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ThreadExample2</span> threadExample2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExample2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>threadExample2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"实现-Callable-，并结合-Future\"><a href=\"#实现-Callable-，并结合-Future\" class=\"headerlink\" title=\"实现 Callable ，并结合 Future\"></a>实现 Callable ，并结合 Future</h3><ul>\n<li>定义Callable接口的实现类，实现call()方法，又叫执行体，并且定义<strong>返回值</strong>类型</li>\n<li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，并且FutureTask返回类型和Callable的返回类型一致</li>\n<li>new Thread，FutureTask做入参得到一个Thread线程对象</li>\n<li>调用Thread的start()方法，执行开启线程</li>\n<li>调用FutureTask对象的get()方法，得到子线程返回值</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hyqup<span class=\"token punctuation\">.</span>concurrency<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FutureTask</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Copyright © 2021灼华. All rights reserved.\n *\n * @author create by hyq\n * @version 1.0\n * @date 2021/5/16\n * @description:\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExample3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ThreadExample3</span> threadExample3 <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExample3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>threadExample3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程返回的值\"</span><span class=\"token operator\">+</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"使用线程池创建线程（这里介绍JDK自带的Executors-）\"><a href=\"#使用线程池创建线程（这里介绍JDK自带的Executors-）\" class=\"headerlink\" title=\"使用线程池创建线程（这里介绍JDK自带的Executors ）\"></a>使用线程池创建线程（这里介绍JDK自带的Executors ）</h2><p>除了上述三种创建线程的方式，我们还可以通过线程池来创建线程</p>\n<h3 id=\"new-Thread-的弊端\"><a href=\"#new-Thread-的弊端\" class=\"headerlink\" title=\"new Thread 的弊端\"></a>new Thread 的弊端</h3><ul>\n<li>每次都new对象，性能差，复用性差</li>\n<li>缺乏线程之间统一管理，造成资源浪费甚至可能内存溢出</li>\n<li>缺乏更多功能，如定时执行、定期执行、线程中断。</li>\n</ul>\n<h3 id=\"线程池的好处\"><a href=\"#线程池的好处\" class=\"headerlink\" title=\"线程池的好处\"></a>线程池的好处</h3><ul>\n<li>重用存在的线程，减少对象创建、消亡的开销，性能佳。</li>\n<li>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</li>\n<li>提供定时执行、定期执行、单线程、并发数控制等功能。</li>\n</ul>\n<h3 id=\"线程池核心概念及参数介绍\"><a href=\"#线程池核心概念及参数介绍\" class=\"headerlink\" title=\"线程池核心概念及参数介绍\"></a>线程池核心概念及参数介绍</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">RejectedExecutionHandler</span> handler<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>corePoolSize(核心线程数)</li>\n<li>maximumPoolSize（最大线程数）</li>\n<li>keepAliveTime（线程活动保持存活时间）</li>\n<li>unit（时间单位）</li>\n<li>workQueue（任务存储队列）<ul>\n<li>SynchronousQueue(直接交接)：没有工作队列缓冲区，每次直接扔到线程去处理，不能处理则抛异常</li>\n<li>LinkedBlockingQueue(无界队列)：队列永远不会满，也就是永远用不上最大线程数</li>\n<li>ArrayBlockingQueue(有界队列)：基于数组结构的有界阻塞队列，遵循先进先出</li>\n</ul>\n</li>\n<li>ThreadFactory（创建线程的工厂）</li>\n<li>handler（拒绝策略）<ul>\n<li>DiscardPolicy：不处理，丢弃掉。</li>\n<li>AbortPolicy：直接抛出异常。</li>\n<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</li>\n<li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"增减线程的特点\"><a href=\"#增减线程的特点\" class=\"headerlink\" title=\"增减线程的特点\"></a>增减线程的特点</h3><h3 id=\"自动创建线程池的风险分析\"><a href=\"#自动创建线程池的风险分析\" class=\"headerlink\" title=\"自动创建线程池的风险分析\"></a>自动创建线程池的风险分析</h3><p> 针对线程池默认的创建线程池的构造方法的分析</p>\n<ul>\n<li><p>newFixedThreadPool</p>\n<p>创建一个<strong>定长</strong>线程池，可控制线程最大并发数，超出的线程会在<strong>队列中等待</strong>。<strong>队列用的是LinkedBlockingQueue（新任务一直向队列中放）</strong></p>\n<p>缺点：容易造成大量内存占用，可能会导致OOM</p>\n</li>\n<li><p>newSingleThreadExector</p>\n<p>创建一个定长为1的线程池。类似于newFixedThreadPool，<strong>队列用的是LinkedBlockingQueue（新任务一直向队列中放）</strong></p>\n<p>缺点：容易造成大量内存占用，可能会导致OOM</p>\n</li>\n<li><p>newCachedThreadPool</p>\n<p>创建一个可缓存线程池，核心数量为0，<strong>最大线程数为整数最大值</strong></p>\n<p>缺点：新来任务直接创建线程执行，也可能造成OOM</p>\n</li>\n<li><p>newScheduledThreadPool</p>\n<p>建一个<strong>定长线程池</strong>，支持定时及周期性任务执行,可以延迟，可以一定频率</p>\n</li>\n</ul>\n<p>总结：正确的线程池的创建应该是手动创建线程池，依据是调研后，根据业务定制</p>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"Java进阶-并发","path":"api/categories/Java进阶-并发.json"}],"tags":[{"name":"线程池","path":"api/tags/线程池.json"},{"name":"executors","path":"api/tags/executors.json"}]}